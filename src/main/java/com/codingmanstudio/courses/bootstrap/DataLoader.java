package com.codingmanstudio.courses.bootstrap;

import com.codingmanstudio.courses.domain.*;
import com.codingmanstudio.courses.repository.*;
import com.codingmanstudio.courses.Utils.EncrytedPasswordUtils;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Component
public class DataLoader implements CommandLineRunner {

    private final RoleRepository roleRepository;
    private final AccountRepository accountRepository;
    private final CategoryRepository categoryRepository;
    private final CourseRepository courseRepository;
    private final LessonRepository lessonRepository;
    private final SectionRepository sectionRepository;
    private final InstructorRepository instructorRepository;
    private final TopicRepository topicRepository;
    private final AdminRepository adminRepository;
    private final StudentRepository studentRepository;

    public DataLoader(RoleRepository roleRepository, AccountRepository accountRepository, CategoryRepository categoryRepository, CourseRepository courseRepository, LessonRepository lessonRepository, SectionRepository sectionRepository, InstructorRepository instructorRepository, TopicRepository topicRepository, AdminRepository adminRepository, StudentRepository studentRepository) {
        this.roleRepository = roleRepository;
        this.accountRepository = accountRepository;
        this.categoryRepository = categoryRepository;
        this.courseRepository = courseRepository;
        this.lessonRepository = lessonRepository;
        this.sectionRepository = sectionRepository;
        this.instructorRepository = instructorRepository;
        this.topicRepository = topicRepository;
        this.adminRepository = adminRepository;
        this.studentRepository = studentRepository;
    }

    @Transactional
    @Override
    public void run(String... args) throws Exception {
        if (roleRepository.count() == 0) {

            //Init topic--------------------------------------------------------------------------------------------------------

            Topic website = new Topic();
            website.setName("Website programming");
            Topic savedTopicWebsite = topicRepository.save(website);

            Topic frontend = new Topic();
            frontend.setName("Front-end");
            Topic savedTopicFrontend = topicRepository.save(frontend);

            Topic backend = new Topic();
            backend.setName("Back-end");
            Topic savedTopicBackend = topicRepository.save(backend);


            Topic bussiness = new Topic();
            bussiness.setName("Bussiness");
            Topic savedBussiness = topicRepository.save(bussiness);

            Topic advertisement = new Topic();
            advertisement.setName("Advertisement");
            Topic savedAd = topicRepository.save(advertisement);

            Topic influncerMarketing = new Topic();
            influncerMarketing.setName("Influencer marketing");
            Topic savedInfluncerMarketing = topicRepository.save(influncerMarketing);


            Topic onlineMakerting = new Topic();
            onlineMakerting.setName("Online Makerting");
            Topic savedonlineMakerting = topicRepository.save(onlineMakerting);


            Topic seo = new Topic();
            seo.setName("SEO");
            Topic savedSeo = topicRepository.save(seo);


            Topic engineering = new Topic();
            engineering.setName("Engineering");
            Topic savedEngineering = topicRepository.save(engineering);
            //Init Course ----------------------------------------------------------------------------------------------------------

            Course nodeJs = new Course();
            nodeJs.setName("Conquer Node JS");
            nodeJs.setCost(300L);
            nodeJs.setRating(1);
            nodeJs.setAmountStudent(303);
            nodeJs.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--QReFaFjw--/v1540525483/geek/nodejs1_miaox0.jpg","7009627637e80f12b9def3fe00f955ee4ecad8cc9728367f354517584d1b98ee752abce356a7e326edf26f4c1414318210ced93489ef0d8b7ac167855ee7b62a21dcc5db26f2efc38a64ac759b8558fdc39c081f92b7e55a38341ed67c769ff3585cd2016ab6734e98a2634c7a21e485aa47092bd4c32802167dcc290dd93a0a674efe5782904776338d9dd2850b195f"));
            nodeJs.getTopics().add(savedTopicWebsite);
            nodeJs.getTopics().add(savedTopicBackend);
            nodeJs.setDescription("Node.js là một hệ thống phần mềm được thiết kế để viết các ứng dụng internet có khả năng mở rộng, đặc biệt là máy chủ web. Chương trình được viết bằng JavaScript, sử dụng kỹ thuật điều khiển theo sự kiện, nhập/xuất không đồng bộ để tối tiểu tổng chi phí và tối đại khả năng mở rộng");
            nodeJs.setDateCreate("03-04-2018");

            Course reactJs = new Course();
            reactJs.setName("ReactJS is easy");
            reactJs.getTopics().add(savedTopicWebsite);
            reactJs.getTopics().add(savedTopicFrontend);
            reactJs.setImage(new Image("http://res.cloudinary.com/quanglibrary/image/upload/s--ZZVzPy97--/v1540525582/geek/reactjs_sm3evd.jpg","15c204e97f23f939d11b32fafa195ffb38c95d6041b95fa0b80cbcd10e4f82189b9c932b98ca79df3a40cc8a77ab18423390af66cd134632604ad9efcc833fbc384647b883d48eca48401aacc28152de114ed10caf60bfbfabad07a469a5f63ccbf56ee77853eb800d72650f8df8a39b219c256a22f63de692468df6bdeeb447595ba348ed41595fc17d30d150c76c58"));
            reactJs.setAmountStudent(401);
            reactJs.setCost(350L);
            reactJs.setRating(1.4);
            reactJs.setDescription("Similarly, any interface we define by extending the ExtendedRepository interface will have the same method");
            reactJs.setDateCreate("03-04-2018");

            Course vueJs = new Course();
            vueJs.getTopics().add(savedTopicWebsite);
            vueJs.getTopics().add(savedTopicFrontend);
            vueJs.setName("Vue JS in real word");
            vueJs.setCost(350L);
            vueJs.setRating(3.4);
            vueJs.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--VuolUoHw--/v1540525653/geek/vuejs_ow9zoq.png","6471e831804dad2236c0360b81ec8d11480b4ce863e1fab5877ded7855bb37d1bb218bcd0e4f6a3355a3ae78060f1f188a9880384f91f4890fa5816b6a054955b3159bd4896731243bdf70f8d47cfb52c5139deba5de2f1ec59f900fb6538f965cd5647b830b0831d1a17ec0242f44175be0b4b4a6dfa43095970105b743b16fb4742bf595c0c2c796ea99055642c6fe"));
            vueJs.setAmountStudent(233);
            vueJs.setDescription("Vue.js, gọi tắt là Vue, là một framework linh động dùng để xây dựng giao diện người dùng. Khác với các framework nguyên khối, Vue được thiết kế từ đầu theo hướng cho phép và khuyến khích việc phát triển ứng dụng theo các bước");
            vueJs.setDateCreate("03-04-2018");

            Course business = new Course();
            business.getTopics().add(savedBussiness);
            business.setName("Market Leader");
            business.setCost(350L);
            business.setRating(2.4);
            business.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--ziyaKDc8--/v1540525762/geek/business1_ag1vla.jpg","97d5524c8f574ef9baedac7a2e6fa61838767be52b0c72b3b013c9f9e7ccb7fae56ad253868ae008c165c7fb1eec728fb440b75a48bb68b456d18093cdc9869f2c2841df0e07f7b8f53d3702a636349be56f702dd27c24871f955ce2eac4c5778e90b7b8e9389c02f68c73e75acdb6799b119f0ee9d0397ebe24d929573a696728443b8e16420ee04dd1bd89a36ca1f8683535e906f4b4df95dddc30cf865e4b"));
            business.setAmountStudent(123);
            business.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            business.setDateCreate("03-04-2018");

            Course marketingCourse = new Course();
            marketingCourse.getTopics().add(savedBussiness);
            marketingCourse.setName("Marketing Leader");
            marketingCourse.setCost(350L);
            marketingCourse.setRating(3.6);
            marketingCourse.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--K5m-Xf9L--/v1540525844/geek/marketing_u6csqk.jpg","5122915ec3894414fd79a993f08c89d0e52344c8863ca99310bee2b0af760c72a3a6044984b0d6692485f6c99304619c08825ff7ddbd7e79f099f8acebf628c63abc3e83be87befec708b51278da3f702875b0d787d8ae15ffb13d33997aabb53b0a200f0b10f4a25c9cb848872b83fdee120a03f6157fffd3d32c8cc88750077087099238edb6452db3c09543a32e7150880efe9f0dbf82196050dad361e32c"));
            marketingCourse.setAmountStudent(923);
            marketingCourse.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            marketingCourse.setDateCreate("03-04-2018");

            Course electronicCourse = new Course();
            electronicCourse.getTopics().add(savedEngineering);
            electronicCourse.setName("Master Electrons");
            electronicCourse.setCost(350L);
            electronicCourse.setRating(4.5);
            electronicCourse.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--dgh_pQof--/v1540525886/geek/electonic_klhzef.jpg","7dc7285f302bd40c3555854d49ad564b0e9ddb67b37285a9005ce6bcc76c7a23e66fb627396a4a70350ec9636fca17d8b554291ff22f9937042c62a1979b315c3d21c774030b3a39514fbd0de6ff7cd1cc83c50ae5d7a1b75ade707966c6bedd2e5f3916c6c09cee6dd22efc463f1cc7bd6f4f94d7493fd93b37237aea3a8c0ecf0da8587c17e32d00ba9ec5dc6923c449df2c326741fab5a2aaba20bd38511b"));
            electronicCourse.setAmountStudent(923);
            electronicCourse.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            electronicCourse.setDateCreate("03-04-2018");

            Course dockerCourse = new Course();
            dockerCourse.getTopics().add(savedBussiness);
            dockerCourse.setName("Docker - magic tool");
            dockerCourse.setCost(350L);
            dockerCourse.setRating(2.5);
            dockerCourse.getContentSummary().add("Completely understand how the stock market works.");
            dockerCourse.getContentSummary().add("Know the history of the Stock Market and it's Evolution.");
            dockerCourse.getContentSummary().add("Know the process that a company goes through to become a Publicly Traded Company");
            dockerCourse.getContentSummary().add("Different Exchanges: NYSE, NASDAQ & AMEX");

            dockerCourse.getRequirements().add("Basic Stock Market or Trading Knowledge");
            dockerCourse.getRequirements().add("This is a follow up course to the course \"Foundation Stock Trading Course\"\n");

            dockerCourse.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--JMGQDe5Q--/v1540525955/geek/docker_wbfbls.png","ad1867137bcad0c43b41750e18ab84acccaa7534382220cfb39b109cc531e97aa9fc4e6138f4d43caaf613304e61b59ffe5147f430945fe95bd02f0d13ad9af0fbafb6a8a834b5d033b18c2f52dc4294df6f8708dad91449a7420e72a9850a5f1d083a86d3d2dbebcbc1ecb4846358477b859987e6051aa9aebd03956a35a20fa47b83fc068393e2ac7e047ea063696b"));
            dockerCourse.setAmountStudent(943);

            dockerCourse.setDescriptionDetail("<p>This is the advanced&nbsp;course that our<strong>&nbsp;Full-Time Traders&nbsp;</strong>at the Proprietary Trading Firm Montreal&nbsp;Trading Group have taken in order to start their trading career.&nbsp;</p>\n" +
                    "<p>This course&nbsp;includes comprehensive advanced&nbsp;material that is required to start&nbsp;trading confidently and effectively.&nbsp;You learn the complete theory behind trading and even better,&nbsp;<strong>how to put theory&nbsp;into actio</strong><strong>n</strong>. I&nbsp;will&nbsp;teach you how our full time traders are&nbsp;making&nbsp;independent market decisions&nbsp;to produce profitable consistent&nbsp;results. You will get&nbsp;an&nbsp;<strong>excellent understanding of the Tools and Techniques used by Professional Traders</strong>.</p>\n" +
                    "<p>You will be learning from Mohsen Hassan, who is the owner of Montreal Trading Group (A proprietary Trading Firm that has 14 Full Time Traders and several Million dollars in Buying Power).</p>\n" +
                    "<p>This course covers<strong>&nbsp;Intermediary&nbsp;and advanced level information</strong>&nbsp;to breakthrough your path to becoming a profitable trader&nbsp;in your own trading abilities.&nbsp;You're going to&nbsp;take away a&nbsp;<strong>different approach at analyzing the data</strong>, an approach that isn&rsquo;t just based on theory.&nbsp;We will also cover in depth&nbsp;<strong>2&nbsp;Strategies&nbsp;</strong>from the ground up&nbsp;that we currently run at our office.&nbsp;On top of all the material thought, I will be giving you our&nbsp;<strong>personal tricks</strong>,&nbsp;<strong>techniques</strong>&nbsp;and&nbsp;<strong>views&nbsp;</strong>on the stock market that have tremendously fast-tracked our success.</p>\n" +
                    "<p>Trading can be a very rewarding career if done correctly. So whether you want to generate some side income by trading stocks or if you want to make trading your only source of income (like our Traders), then this course is for you.&nbsp;</p>\n" +
                    "<p>This is a&nbsp;full course separated in 2 parts, this is the 2nd&nbsp;part of the&nbsp;series.</p>");
            dockerCourse.setDescription("Để giữ gìn sự trong sáng của tiếng Việt \n khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            dockerCourse.setDateCreate("03-04-2018");

            Course phpCourse = new Course();
            phpCourse.getTopics().add(savedTopicBackend);
            phpCourse.setName("Website with PHP");
            phpCourse.setCost(353L);
            phpCourse.setRating(3.1);
            phpCourse.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--6q3OK3c3--/v1540526007/geek/php_hadezi.jpg","f59d06d3aa795b8b6141a23aa5a94e9fd8b3be801cb49ee330964c6164f642cda72f86888b9a01762b6201df398c74f1b77aa0ccc673f967e7b47f2e29cdab8e48fb9c396fd346d9ab6d7981f000e9da711c88d7ae0532842894adcd4a3e941fa3025d8d6d0543ed5e9cfe31a9c07b88d3d85f771a59dc3f84e281fe1d76581c7e6bd7f9d98ca263e74c8a2ee91e5d5d"));
            phpCourse.setAmountStudent(716);
            phpCourse.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            phpCourse.setDateCreate("03-04-2018");

            Course cScharp = new Course();
            cScharp.getTopics().add(savedTopicBackend);
            cScharp.setName("C# Core");
            cScharp.setCost(350L);
            cScharp.setRating(4.2);
            cScharp.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--epyNMN8M--/v1540526040/geek/csharp1_vyqahz.png","13b2b3712566dee180a174df0a9c34dd1470e60fda4c4c82d35d1aecb94918c2eda2fd938f86b46d23a5a48b9aaf9509e8f6f5ac646aed5afcf910c3baf3ae3260572a415b69b877e1f44d373b2fa7d8b6c3d90302dbeb139721fc542910d6b9158dc08e9799e4178016f1be628e3079021919f9cc75f16d88565256a9872f386fe50eb08618a44b10e16aae71758e56"));
            cScharp.setAmountStudent(12);
            cScharp.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            cScharp.setDateCreate("03-04-2018");

            Course java = new Course();
            java.getTopics().add(savedTopicBackend);
            java.setName("Java Core");
            java.setCost(120L);
            java.setRating(4);
            java.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--NxpFvmiF--/v1540526072/geek/java_jvzksj.jpg","d160cd5ca09fd301cd28c359bf7c753cae428fdf3dc4227b10f53ae010d68df8e760729e871517f3c942d7b1968d9d0c5d0f3b7ab4a75f0e19b16539151f7749ab453afc49043a00f554906aca5a0f0f5666d99daa64b857c651311c01bd5b676822878d157f4f2d5bf5e0374445cfc4823697c06335800d4885c911c1a03a7994a3bcae4742761bc75a3284dac15a4e"));
            java.setAmountStudent(12);
            java.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            java.setDateCreate("03-04-2018");


            Course css = new Course();
            css.getTopics().add(savedTopicBackend);
            css.setName("CSS wonderful");
            css.setCost(350L);
            css.setRating(4.7);
            css.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--xP-M834P--/v1540526154/geek/css_pasizv.jpg","156c5df5bcb5eb0ad2654cc4c4af518ffa8c99c100aa43d22948b76520a3b8069198482cd9104b378fa262e705b1e1c89dfff2b463d7466b0256b7321068be953bb484078abedae1874c471845851ea95aab5930b82192cef923c8d9c2d5f084e4e2015e902633b45504d330e9dfab809a08e29f713a67643f964c59654fc9e9f2eca5fab7e67262a5082a50eedc59ad"));
            css.setAmountStudent(12);
            css.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            css.setDateCreate("03-04-2018");

            Course linux = new Course();
            linux.getTopics().add(savedTopicBackend);
            linux.setName("Linux");
            linux.setCost(350L);
            linux.setRating(4.7);
            linux.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--C-Absi9K--/v1540526194/geek/css-wonderful_bziyf7.png","d49c12dfd482ec6e851f5bd3ddde6ab58e7b972ce36e22f02f4973df23fa3c08423686eb88923d2fdebfd09a47db20b4d35c7b14d9d69c8dcad7c77a5d80a023c97799c181dda1c663b6062df7295812c912a75ea1f73769e4920b2c069a3b5205eefb3584ab97663af08d3ef72fd1e0bede77822c37f21c029d74137185aa2efa314bfcfa0dc486cb1b29eb39437abe5326bb5ee9231e611826198510c89df1"));
            linux.setAmountStudent(12);
            linux.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            linux.setDateCreate("03-04-2018");


            Course html = new Course();
            html.getTopics().add(savedTopicBackend);
            html.setName("HTML is not programming lang");
            html.setCost(350L);
            html.setRating(3.4);
            html.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--ZWVpCe4J--/v1540526239/geek/html_u373he.jpg","f1d2b409315ed9043d2975c94a8bce7625b276a897db9d2d93a7f93f524386c387caf9898a33b46477305e07bfda144cd4977665fabd987b028958272f94f08833bdf5c081cb0ff7092e742a7f874e73d41808921580783bf1987ce2a96dd77f75905e8ba0d796a7fba121b4d029ff4f989e6d6d5ce4e5245435b2fca4c3368311d828d483faa7c2d223fcac230cdf4e"));
            html.setAmountStudent(12);
            html.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            html.setDateCreate("03-04-2018");


            Course typeScript = new Course();
            typeScript.getTopics().add(savedTopicBackend);
            typeScript.setName("TypeScript course");
            typeScript.setCost(350L);
            typeScript.setRating(3.9);
            typeScript.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--cS_nnnRh--/v1540526285/geek/typescript_s0drdi.png","ff3d7227aa3743f6ba8489b1a23f29bccb707d3ca2d1e022f9301da06b022691e8a388c65f62a8528891063598ced5a349289c58fd0cd1a03dbc0adfb85c337fd63e7dd2a7b4cd0301eb76e8a596b5a886fe999ac02012cab27c8a02c2db5221d5927feee6b893da79da1da50488739a90b5cdadd4c1a0d2b57865d37439f58554f36ca9f0bb5a001f37abf32180298a22aeda95a6ecd2bcfecea3435147debd"));
            typeScript.setAmountStudent(12);
            typeScript.setDescription("Để giữ gìn sự trong sáng của tiếng Việt khi tham gia chat, blog, các diễn đàn, SMS… Mấy bợng đừn diếc xai trính tã nge");
            typeScript.setDateCreate("03-04-2018");


            //Init category----------------------------------------------------------------------------------------------------

            Category cat1 = new Category();
            cat1.setName("Programming");
            cat1.getTopics().add(savedTopicWebsite);
            cat1.getTopics().add(savedTopicBackend);
            cat1.getTopics().add(savedTopicFrontend);

            vueJs.setCategory(cat1);
            cat1.getCourses().add(vueJs);

            cat1.getCourses().add(cScharp);
            cScharp.setCategory(cat1);

            cat1.getCourses().add(phpCourse);
            phpCourse.setCategory(cat1);

            cat1.getCourses().add(dockerCourse);
            dockerCourse.setCategory(cat1);

            cat1.getCourses().add(java);
            java.setCategory(cat1);

            cat1.getCourses().add(typeScript);
            typeScript.setCategory(cat1);

            cat1.getCourses().add(css);
            css.setCategory(cat1);

            cat1.getCourses().add(html);
            html.setCategory(cat1);

            cat1.getCourses().add(linux);
            linux.setCategory(cat1);

            cat1.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--PZL1J9Sl--/v1540526365/geek/programming-icon_itdqma.png","b79529b0ec34dc05e46d167074861d1b2d31d0e19f35d2ef8e820e8eae1257115b3bf193a2b2b55a22ecc225474a1dce6bfb963b1e7fdef18286ddc26d5d766114f993b3a7355cce75f5d50437242f54504176a0def46cef433629752962a5b3210262993d998d31c3944a53528dcebe9642e69772ddbc4c88f895caef6f220b7d898dad74fe1b9d31f1162b2b9464fde47fc0b12c7a83ed412ba6c45cc69876"));
            cat1.setDescription("C#, Java, Javascript, PHP, ReactJS, VueJS, Node JS,...");

            Category cat2 = new Category();
            nodeJs.setCategory(cat2);
            reactJs.setCategory(cat2);
            business.setCategory(cat2);
            cat2.getCourses().add(nodeJs);
            cat2.getCourses().add(reactJs);
            cat2.setName("Business");
            cat2.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--eC15qLSk--/v1540526416/geek/business-icon_geubib.png","b261b957c059c045f8965dc750df2b4a9724fc58be7e19717b4a6adcf958765fb627f56e9da76e5c73f86b84ee1bf1ad6b30cd24d1460e38f046debda67f67052ea4526247eee089da21b5774af34c40a32c389111ce2c3c461d40fee9df878d16d054c89ea5b9e6ea51a76530e91bdf9b9b6407afd14ed9ae94097c5b7bd370ad52dbf4e650734f1b27fd3a695479762318f4b034c1f641bbae55c8759eb28f"));
            cat2.setDescription("Sale, Manage, Statistic, Products,...");

            Category cat3 = new Category();

            cat3.setName("Marketing");
            cat3.getCourses().add(marketingCourse);
            marketingCourse.setCategory(cat3);
            cat3.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--UR8CIUKs--/v1540526452/geek/marketing-icon_khhxvt.png","92ff1687c0d972a6bed1f8b9e2d197bc7834c4fb847c1c32a224d1b856b67f4b116759839bde100f36464f527b5a3df3669e9574b80be453c2bfc82ca95645218bcf489bc7bdcc3f2fe0c07f72021b9cad38adfc5e89164225e9b8cbeaab455b19fbeca73a82627409d531249b15cae024aa40f4a82874b0cf1119b4cded38823ba882fff98145281050d66771113aae8a4fa52e9def3b4f84c6105a9dc885ff"));
            cat3.setDescription("SEO, Internet Marketing, Influencer Marketing, PPI, Online viral marketing,...");
            cat3.getTopics().add(savedSeo);
            cat3.getTopics().add(savedInfluncerMarketing);
            cat3.getTopics().add(savedonlineMakerting);
            cat3.getTopics().add(savedAd);

            Category cat4 = new Category();
            cat4.getCourses().add(electronicCourse);
            electronicCourse.setCategory(cat4);
            cat4.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--HjKxyPE3--/v1540526490/geek/engineering-icon_glaqnc.png","0791945bfa5c98d45349e38891b991070feb23beda51d39fe0fd0971a434eede23ee2ec93f5ced28bf7cfe81ab6ff52b110d57480f7e1337707a265589dc1f63f1240452af2a5cf11d2761be57883c6dc02019a02a9e85b208bd66804fd0e02a5bd5ddba7b32663b188b30eac8ab8501f42b16f1a0a9c050bdbf48ae1ed9be8ca6d412cb18dbd5aba3cf8e7912184ae7f07e2f360ca79a409a4a203656423a27"));
            cat4.setName("Engineering");
            cat4.setDescription("Chemical engineering, Civil engineering, Electical, Process engineering,...");


            //Init Lesson ----------------------------------------------------------------------------------------------------------

            Lesson nodeJsLesson1 = new Lesson();
            nodeJsLesson1.setOrdinalNumber(1);
            nodeJsLesson1.setName("Deploy Node.js Express Application in App Engine");
            nodeJsLesson1.setDescription("YG Entertainment Inc. (thay mặt cho YG Entertainment); ASCAP, Abramus Digital, SODRAC, UMPG Publishing, UBEM và 13 Hội bảo vệ quyền âm nhạc");
            nodeJsLesson1.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson1);

            Lesson nodeJsLesson2 = new Lesson();
            nodeJsLesson2.setOrdinalNumber(2);
            nodeJsLesson2.setName("Updating the Node App");
            nodeJsLesson2.setDescription("Warning: Establishing SSL connection without server's identity verification is not recommended [duplicate]");
            nodeJsLesson2.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson2);

            Lesson nodeJsLesson3 = new Lesson();
            nodeJsLesson3.setOrdinalNumber(3);
            nodeJsLesson3.setName("Node js chap 3");
            nodeJsLesson3.setDescription("Establishing SSL connection without server's identity verification is not recommended." +
                    " According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set.");
            nodeJsLesson3.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson3);

            Lesson nodeJsLesson4 = new Lesson();
            nodeJsLesson4.setOrdinalNumber(4);
            nodeJsLesson4.setName("Node js chap 4");
            nodeJsLesson4.setDescription("Build a Node.js Web App using Google Cloud Platform");
            nodeJsLesson4.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson4);

            Lesson nodeJsLesson5 = new Lesson();
            nodeJsLesson5.setOrdinalNumber(5);
            nodeJsLesson5.setName("Node js chap 5");
            nodeJsLesson5.setDescription("Build a Slack Bot with Node.js on Kubernetes");
            nodeJsLesson5.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson5);

            Lesson nodeJsLesson6 = new Lesson();
            nodeJsLesson6.setOrdinalNumber(6);
            nodeJsLesson6.setName("Node js chap 6");
            nodeJsLesson6.setDescription("Running Node.js on a Virtual Machine");
            nodeJsLesson6.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson6);

            Lesson nodeJsLesson7 = new Lesson();
            nodeJsLesson7.setOrdinalNumber(7);
            nodeJsLesson7.setName("Node js chap 7");
            nodeJsLesson7.setDescription("Using Cloud Vision with Node.js");
            nodeJsLesson7.setCourse(nodeJs);
            nodeJs.getLessons().add(nodeJsLesson7);

            Lesson reactJsLesson1 = new Lesson();
            reactJsLesson1.setOrdinalNumber(1);
            reactJsLesson1.setName("React js chap 1");
            reactJsLesson1.setDescription("YG Entertainment Inc. (thay mặt cho YG Entertainment); ASCAP, Abramus Digital, SODRAC, UMPG Publishing, UBEM và 13 Hội bảo vệ quyền âm nhạc");
            reactJsLesson1.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson1);

            Lesson reactJsLesson2 = new Lesson();
            reactJsLesson2.setOrdinalNumber(2);
            reactJsLesson2.setName("React js chap 2");
            reactJsLesson2.setDescription("Cascading the one-to-one persist operation\n" +
                    "The CascadeType.PERSIST comes along with the CascadeType.ALL configuration, so we only have to persist the Post entity, and the associated PostDetails entity is persisted as well");
            reactJsLesson2.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson2);

            Lesson reactJsLesson3 = new Lesson();
            reactJsLesson3.setOrdinalNumber(3);
            reactJsLesson3.setName("React js chap 3");
            reactJsLesson3.setDescription("Cascading the one-to-one persist operation\n" +
                    "The CascadeType.PERSIST comes along with the CascadeType.ALL configuration, so we only have to persist the Post entity, and the associated PostDetails entity is persisted as well");
            reactJsLesson3.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson3);

            Lesson reactJsLesson4 = new Lesson();
            reactJsLesson4.setOrdinalNumber(4);
            reactJsLesson4.setName("React js chap 4");
            reactJsLesson4.setDescription("Main Concepts");
            reactJsLesson4.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson4);

            Lesson reactJsLesson5 = new Lesson();
            reactJsLesson5.setOrdinalNumber(5);
            reactJsLesson5.setName("React js chap 5");
            reactJsLesson5.setDescription("Advanced Guides");
            reactJsLesson5.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson5);

            Lesson reactJsLesson6 = new Lesson();
            reactJsLesson6.setOrdinalNumber(6);
            reactJsLesson6.setName("React js chap 6");
            reactJsLesson6.setDescription("API References");
            reactJsLesson6.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson6);

            Lesson reactJsLesson7 = new Lesson();
            reactJsLesson7.setOrdinalNumber(7);
            reactJsLesson7.setName("React js chap 7");
            reactJsLesson7.setDescription("Hooks");
            reactJsLesson7.setCourse(reactJs);
            reactJs.getLessons().add(reactJsLesson7);

            Lesson vueJsLesson1 = new Lesson();
            vueJsLesson1.setOrdinalNumber(1);
            vueJsLesson1.setName("Vue js chap 1");
            vueJsLesson1.setDescription("Cascading the one-to-one persist operation\n" +
                    "The CascadeType.PERSIST comes along with the CascadeType.ALL configuration, so we only have to persist the Post entity, and the associated PostDetails entity is persisted as well");
            vueJsLesson1.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson1);

            Lesson vueJsLesson2 = new Lesson();
            vueJsLesson2.setOrdinalNumber(2);
            vueJsLesson2.setName("Vue js chap 2");
            vueJsLesson2.setDescription("Cascading the one-to-one persist operation\n" +
                    "The CascadeType.PERSIST comes along with the CascadeType.ALL configuration, so we only have to persist the Post entity, and the associated PostDetails entity is persisted as well");
            vueJsLesson2.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson2);

            Lesson vueJsLesson3 = new Lesson();
            vueJsLesson3.setOrdinalNumber(3);
            vueJsLesson3.setName("Vue js chap 3");
            vueJsLesson3.setDescription("Cascading the one-to-one persist operation\n" +
                    "The CascadeType.PERSIST comes along with the CascadeType.ALL configuration, so we only have to persist the Post entity, and the associated PostDetails entity is persisted as well");
            vueJsLesson3.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson3);

            Lesson vueJsLesson4 = new Lesson();
            vueJsLesson4.setOrdinalNumber(4);
            vueJsLesson4.setName("Vue js chap 4");
            vueJsLesson4.setDescription("Essentials");
            vueJsLesson4.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson4);

            Lesson vueJsLesson5 = new Lesson();
            vueJsLesson5.setOrdinalNumber(5);
            vueJsLesson5.setName("Vue js chap 5");
            vueJsLesson5.setDescription("Components In-Depth");
            vueJsLesson5.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson5);

            Lesson vueJsLesson6 = new Lesson();
            vueJsLesson6.setOrdinalNumber(6);
            vueJsLesson6.setName("Vue js chap 6");
            vueJsLesson6.setDescription("Transitions & Animation");
            vueJsLesson6.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson6);

            Lesson vueJsLesson7 = new Lesson();
            vueJsLesson7.setOrdinalNumber(7);
            vueJsLesson7.setName("Vue js chap 7");
            vueJsLesson7.setDescription("Reusability & Composition");
            vueJsLesson7.setCourse(vueJs);
            vueJs.getLessons().add(vueJsLesson7);

            //Init Section ----------------------------------------------------------------------------------------------------------

            Section sec1Node1 = new Section();
            sec1Node1.setOrdinalNumber(1);
            sec1Node1.setDescription("Overview");
            sec1Node1.setContent("<p>Google App Engine applications are easy to create, easy to maintain, and easy to scale as your traffic and data storage needs change. With App Engine, there are no servers to maintain. You simply upload your application and it's ready to go.</p>\n" +
                    "<p>App Engine applications automatically scale based on incoming traffic. load balancing, microservices, authorization, SQL and NoSQL databases, Memcache, traffic splitting, logging, search, versioning, roll out and roll backs, and security scanning are all supported natively and are highly customizable.</p>\n" +
                    "<p>App Engine's environments, the&nbsp;<a href=\"https://cloud.google.com/appengine/docs/about-the-standard-environment\" target=\"_blank\">Standard Environment</a>&nbsp;and the&nbsp;<a href=\"https://cloud.google.com/appengine/docs/flexible/\" target=\"_blank\">Flexible environment</a>, support a host of programming languages, including Java, Python, PHP, Node.js, Go, etc.. The two environments give users maximum flexibility in how their application behaves since each environment has certain strengths. Read&nbsp;<a href=\"https://cloud.google.com/appengine/docs/the-appengine-environments\" target=\"_blank\">The App Engine Environments</a>&nbsp;for more information.</p>\n" +
                    "<p>In this codelab, you will learn how to to connect to computing resources hosted on Google Cloud Platform via the web. You will learn how to use Cloud Shell and the Cloud SDK gcloud command.</p>\n" +
                    "<p>This tutorial uses the sample code from the&nbsp;<a href=\"https://github.com/GoogleCloudPlatform/nodejs-docs-samples\" target=\"_blank\">Google Cloud Node.js Getting Started guide</a>.</p>\n" +
                    "<h3 class=\"checklist\"><strong>What you'll learn</strong></h3>\n" +
                    "<ul class=\"checklist\">\n" +
                    "<li>How to create a Node.js Express application on Google App Engine.</li>\n" +
                    "<li>How to update the code without taking the server down.</li>\n" +
                    "</ul>\n" +
                    "<h3><strong>What you'll need</strong></h3>\n" +
                    "<ul>\n" +
                    "<li>A Google Cloud Platform Project</li>\n" +
                    "<li>A Browser, such&nbsp;<a href=\"https://www.google.com/chrome/browser/desktop/\" target=\"_blank\">Chrome</a>&nbsp;or&nbsp;<a href=\"https://www.mozilla.org/firefox/\" target=\"_blank\">Firefox</a></li>\n" +
                    "<li>Familiarity with standard Linux text editors such as Vim, EMACs or Nano</li>\n" +
                    "</ul>");
            sec1Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec1Node1);

            Section sec2Node1 = new Section();
            sec2Node1.setOrdinalNumber(2);
            sec2Node1.setDescription("Setup and Requirements");
            sec2Node1.setContent("<h2><strong>Self-paced environment setup</strong></h2>\n" +
                    "<p>If you don't already have a Google Account (Gmail or Google Apps), you must&nbsp;<a href=\"https://accounts.google.com/SignUp\" target=\"_blank\">create one</a>. Sign-in to Google Cloud Platform console (<a href=\"http://console.cloud.google.com/\" target=\"_blank\">console.cloud.google.com</a>) and create a new project:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/3c50189ec031c0cf.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/f8a3bda1aa66cf2f.png\" /></p>\n" +
                    "<p>Remember the project ID, a unique name across all Google Cloud projects (the name above has already been taken and will not work for you, sorry!). It will be referred to later in this codelab as&nbsp;<code>PROJECT_ID</code>.</p>\n" +
                    "<p>Next, you'll need to&nbsp;<a href=\"https://console.developers.google.com/billing\" target=\"_blank\">enable billing</a>&nbsp;in the Developers Console in order to use Google Cloud resources.</p>\n" +
                    "<p>Running through this codelab shouldn't cost you more than a few dollars, but it could be more if you decide to use more resources or if you leave them running (see \"cleanup\" section at the end of this document).</p>\n" +
                    "<p>New users of Google Cloud Platform are eligible for a&nbsp;<a href=\"https://console.developers.google.com/billing/freetrial?hl=en\" target=\"_blank\">$300 free trial</a>.</p>\n" +
                    "<h2><strong>Google Cloud Shell</strong></h2>\n" +
                    "<p>While Google Cloud can be operated remotely from your laptop, in this codelab we will be using&nbsp;<a href=\"https://cloud.google.com/cloud-shell/\" target=\"_blank\">Google Cloud Shell</a>, a command line environment running in the Cloud. This Debian-based virtual machine is loaded with all the development tools you'll need (<code>gcloud</code>,&nbsp;<code>node,</code>&nbsp;<code>npm</code>&nbsp;and more), it offers a persistent 5GB home directory, and runs on the Google Cloud, greatly enhancing network performance and authentication. This means that all you will need for this codelab is a browser (yes, it works on a Chromebook).</p>\n" +
                    "<p>To activate Google Cloud Shell, from the developer console simply click the button on the top right-hand side (it should only take a few moments to provision and connect to the environment):</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/5f504766b9b3be17.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/c0726a5e7bd6ec39.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/9f0e51b578fecce5.png\" /></p>\n" +
                    "<p>Once connected to the cloud shell, you should see that you are already authenticated and that the project is already set to your&nbsp;<code>PROJECT_ID</code>&nbsp;:</p>\n" +
                    "<pre>$ gcloud auth list\n" +
                    "Credentialed accounts:\n" +
                    " - &lt;myaccount&gt;@&lt;mydomain&gt;.com (active)</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong><code>gcloud</code>&nbsp;is the powerful and unified command-line tool for Google Cloud Platform. Full documentation is available from&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">https://cloud.google.com/sdk/gcloud</a>. It comes pre-installed on CloudShell and you will surely enjoy its support for tab-completion.</p>\n" +
                    "</aside>\n" +
                    "<pre>$ gcloud config list project\n" +
                    "[core]\n" +
                    "project = &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>If for some reason the project is not set, simply issue the following command :</p>\n" +
                    "<pre>$ gcloud config set project &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>Looking for you&nbsp;<code>PROJECT_ID</code>? Check out what ID you used in the setup steps or look it up in the console dashboard :</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/e40be8c610cd41c0.png\" /></p>\n" +
                    "<h2><strong>Start Cloud Shell</strong></h2>\n" +
                    "<p>Navigate to the the Google Cloud Console from another browser tab/window, to&nbsp;<a href=\"https://console.cloud.google.com/\" target=\"_blank\">https://console.cloud.google.com</a>. Use the login credential given to you by the lab proctor.</p>\n" +
                    "<p>You will do all of the work from the&nbsp;<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">Google Cloud Shell</a>,<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">&nbsp;a command line environment running in the Cloud</a>. This Debian-based virtual machine is loaded with all the development tools you'll need (<code>gcloud</code>,&nbsp;<code>git,</code>&nbsp;<code>node,</code>&nbsp;<code>npm</code>&nbsp;and others) and offers a persistent 5GB home directory. Open the Google Cloud Shell by clicking on the icon on the top right of the screen:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/5f504766b9b3be17.png\" /></p>");
            sec2Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec2Node1);

            Section sec3Node1 = new Section();
            sec3Node1.setOrdinalNumber(3);
            sec3Node1.setDescription("Get the Getting Started Example source code");
            sec3Node1.setContent("<p>After Cloud Shell launches, you can use the command line to clone the example source code in the home directory:</p>\n" +
                    "<pre><code><span class=\"pln\">git clone https</span><span class=\"pun\">:</span><span class=\"com\">//github.com/GoogleCloudPlatform/nodejs-docs-samples.git &amp;&amp; \\</span><span class=\"pln\">\n" +
                    "cd nodejs</span><span class=\"pun\">-</span><span class=\"pln\">docs</span><span class=\"pun\">-</span><span class=\"pln\">samples</span><span class=\"pun\">/</span><span class=\"pln\">appengine</span><span class=\"pun\">/</span><span class=\"pln\">hello</span><span class=\"pun\">-</span><span class=\"pln\">world</span><span class=\"pun\">/</span><span class=\"pln\">standard</span><span class=\"pun\">/</span></code></pre>\n" +
                    "<p>Now, install the dependencies with&nbsp;<code>npm</code>:</p>\n" +
                    "<pre><code><span class=\"pln\">npm install</span></code></pre>");
            sec3Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec3Node1);

            Section sec4Node1 = new Section();
            sec4Node1.setOrdinalNumber(4);
            sec4Node1.setDescription("Get the sample code");
            sec4Node1.setContent("<p>In Cloud Shell on the command-line, run the following command to clone the Github repository:</p>\n" +
                    "<pre>git clone https://github.com/googlecodelabs/cloud-nodejs.git</pre>\n" +
                    "<p>Change directory into&nbsp;<code>cloud-nodejs/start</code>.</p>\n" +
                    "<pre>cd cloud-nodejs/start</pre>");
            sec4Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec4Node1);

            Section sec5Node1 = new Section();
            sec5Node1.setOrdinalNumber(5);
            sec5Node1.setDescription("Try out the sample");
            sec5Node1.setContent("<p>The sample has the following layout:</p>\n" +
                    "<pre><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"pln\">js        </span><span class=\"com\">/* Express.js web application */</span><span class=\"pln\">\n" +
                    "books</span><span class=\"pun\">.</span><span class=\"pln\">js      </span><span class=\"com\">/* Code for creating, deleting, and listing books */</span><span class=\"pln\">\n" +
                    "auth</span><span class=\"pun\">.</span><span class=\"pln\">js       </span><span class=\"com\">/* Code for user authentication */</span><span class=\"pln\">\n" +
                    "config</span><span class=\"pun\">.</span><span class=\"pln\">js     </span><span class=\"com\">/* Application configuration variables */</span>\n" +
                    "<span class=\"kwd\">package</span><span class=\"pun\">.</span><span class=\"pln\">json  </span><span class=\"com\">/* npm package file including dependencies */</span><span class=\"pln\">\n" +
                    "views</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "  index</span><span class=\"pun\">.</span><span class=\"pln\">jade  </span><span class=\"com\">/* HTML template */</span>\n" +
                    "<span class=\"kwd\">public</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "  style</span><span class=\"pun\">.</span><span class=\"pln\">css   </span><span class=\"com\">/* CSS stylesheet */</span></code></pre>\n" +
                    "<p>To run the sample application in Cloud Shell, let's perform the following steps:</p>\n" +
                    "<p>1. Install dependencies. Enter the following command:</p>\n" +
                    "<pre>npm install</pre>\n" +
                    "<p>2. Run app.js to start the node.js server:</p>\n" +
                    "<pre>node app.js</pre>\n" +
                    "<p>3. Click the \"Web preview\" icon that appears at the top left side of the cloud shell window and select \"Preview on port 8080\" to see the app in a web browser.&nbsp;<img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/a0c920da29c2c9e7.png\" /></p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: Usually you would test with&nbsp;<a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080</a>&nbsp;but the Google Cloud Shell environment requires requests to be proxied)</p>\n" +
                    "</aside>\n" +
                    "<p>You will see a page that looks like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/e3a780eda310decb.png\" /></p>\n" +
                    "<p>The application currently displays a fake book.</p>\n" +
                    "<p>Let's fix that by querying for books from datastore!</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: To stop running the app, go to the Cloud Shell window and press&nbsp;<strong><code>CTRL + C</code></strong></p>\n" +
                    "</aside>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you set up and ran the codelab sample application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will setup Google Cloud Datastore and configure the application to begin querying it.</p>");
            sec5Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec5Node1);

            Section sec6Node1 = new Section();
            sec6Node1.setOrdinalNumber(6);
            sec6Node1.setDescription("Set up your project");
            sec6Node1.setContent("<p>In this step, you will set up Google Cloud Datastore and configure the application to query from it.</p>\n" +
                    "<h3><strong>Create Credentials</strong></h3>\n" +
                    "<p>For the node.js application to access this project's services, eg. Datastore and Cloud Storage, it needs to be authenticated. Create a Service Account for this project which will be used to authenticate the application.</p>\n" +
                    "<ol start=\"8\" type=\"1\">\n" +
                    "<li>In the Cloud Console, navigate to&nbsp;<strong>APIs &amp; Services &gt;&nbsp;</strong><a href=\"https://console.developers.google.com/project/_/apiui/credential\" target=\"_blank\"><strong>Credentials</strong></a></li>\n" +
                    "<li>Make sure your project is selected and click&nbsp;<strong>Continue</strong></li>\n" +
                    "<li>Next, click&nbsp;<strong>Create credentials</strong></li>\n" +
                    "<li>Select \"<strong>Service account key</strong>\" from the drop-down menu</li>\n" +
                    "<li>Under the&nbsp;<strong>Service Account</strong>&nbsp;dropdown, select&nbsp;<strong>\"Compute Engine default service account\"&nbsp;</strong>and ensure that&nbsp;<strong>Key type</strong>is set to<strong>&nbsp;JSON</strong>. Then click the \"<strong>Create\"&nbsp;</strong>button</li>\n" +
                    "<li>Once the JSON key file automatically downloads, locate it (it should have a name of the form)&nbsp;<code>&lt;project name&gt;-&lt;hash string&gt;.json</code>&nbsp;and open it in a text editor.</li>\n" +
                    "<li>Back in the Cloud Shell window, in the \"cloud-nodejs/start\" directory, copy and paste the entire contents of the key file into a new file called&nbsp;<code>key.json</code>.</li>\n" +
                    "</ol>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: You can use \"nano -m key.json\" to create the keyfile and store the json content in it.</p>\n" +
                    "</aside>\n" +
                    "<h3><strong>Enable Datastore API</strong></h3>\n" +
                    "<p>The credentials you created allow your application to communicate with Google APIs that you enable for this project. Enable the Datastore API so the application can access Datastore.</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>Under&nbsp;<strong>APIs &amp; Services</strong>, click&nbsp;<strong>Enable APIs and Services</strong>&nbsp;and search for \"<em>Cloud Datastore API</em>\"</li>\n" +
                    "<li>Click on&nbsp;<a href=\"https://console.developers.google.com/project/_/apiui/apiview/datastore/overview\" target=\"_blank\"><strong>Cloud Datastore API</strong></a></li>\n" +
                    "<li>Click&nbsp;<strong>Enable</strong>&nbsp;(at the top of the page).</li>\n" +
                    "</ol>\n" +
                    "<h3><strong>Update configuration variables</strong></h3>\n" +
                    "<p>To configure the node.js sample application to authenticate with your project, go back to your Cloud Shell instance and edit the&nbsp;<code>config.js</code>&nbsp;file in the \"cloud-nodejs/start\" directory and replace the placeholder value for&nbsp;<code>projectId</code>&nbsp;with the Project ID of your project:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/config.js\" target=\"_blank\">config.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">module</span><span class=\"pun\">.</span><span class=\"pln\">exports </span><span class=\"pun\">=</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  projectId</span><span class=\"pun\">:</span> <span class=\"str\">'[your Google Developers Console project ID]'</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "  keyFilename</span><span class=\"pun\">:</span> <span class=\"str\">'./key.json'</span><span class=\"pun\">,</span>\n" +
                    "  <span class=\"com\">// ...</span>\n" +
                    "<span class=\"pun\">};</span></code></pre>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you created a Google Developer Console project and configured the node.js application with the credentials needed to query Datastore.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will update the application to query books from your project's Datastore.</p>");
            sec6Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec6Node1);

            Section sec7Node1 = new Section();
            sec7Node1.setOrdinalNumber(7);
            sec7Node1.setDescription("List all books");
            sec7Node1.setContent("<p>The sample application's home page lists all books.</p>\n" +
                    "<p>Books are retrieved by calling&nbsp;<code>books.getAllBooks</code>&nbsp;from the&nbsp;<code>books</code>&nbsp;module.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/app.js\" target=\"_blank\">app.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> config </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./config'</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> books </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./books'</span><span class=\"pun\">)(</span><span class=\"pln\">config</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"com\">// ...</span>\n" +
                    "\n" +
                    "<span class=\"com\">/* Fetch all books and display them */</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span> <span class=\"kwd\">next</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  books</span><span class=\"pun\">.</span><span class=\"pln\">getAllBooks</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">,</span><span class=\"pln\"> key</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span> <span class=\"kwd\">next</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">);</span>\n" +
                    "    <span class=\"kwd\">var</span><span class=\"pln\"> keyBooks </span><span class=\"pun\">=</span><span class=\"pln\"> books</span><span class=\"pun\">.</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">book</span><span class=\"pun\">)</span> <span class=\"pun\">=&gt;</span> <span class=\"typ\">Object</span><span class=\"pun\">.</span><span class=\"pln\">assign</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\"> id</span><span class=\"pun\">:</span><span class=\"pln\"> book</span><span class=\"pun\">.</span><span class=\"pln\">id </span><span class=\"pun\">||</span><span class=\"pln\"> book</span><span class=\"pun\">[</span><span class=\"pln\">key</span><span class=\"pun\">].</span><span class=\"pln\">id </span><span class=\"pun\">}));</span><span class=\"pln\">\n" +
                    "    res</span><span class=\"pun\">.</span><span class=\"pln\">render</span><span class=\"pun\">(</span><span class=\"str\">'index'</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\"> books</span><span class=\"pun\">:</span><span class=\"pln\"> keyBooks</span><span class=\"pun\">,</span><span class=\"pln\"> user</span><span class=\"pun\">:</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user </span><span class=\"pun\">});</span>\n" +
                    "  <span class=\"pun\">});</span>                                                                              \n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>The current implementation of&nbsp;<code>getAllBooks</code>&nbsp;found in&nbsp;<code>books.js</code>&nbsp;simply returns a fake book.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> getAllBooks</span><span class=\"pun\">(</span><span class=\"pln\">callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>                                                \n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> error </span><span class=\"pun\">=</span> <span class=\"kwd\">null</span><span class=\"pun\">;</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> books </span><span class=\"pun\">=</span> <span class=\"pun\">[</span>\n" +
                    "    <span class=\"pun\">{</span><span class=\"pln\"> id</span><span class=\"pun\">:</span> <span class=\"lit\">12345</span><span class=\"pun\">,</span><span class=\"pln\"> title</span><span class=\"pun\">:</span> <span class=\"str\">'Fake Book'</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">:</span> <span class=\"str\">'Fake Author'</span> <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">];</span><span class=\"pln\">\n" +
                    "  callback</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>In this step, you will write the code for&nbsp;<code>getAllBooks</code>&nbsp;to query for Book entities from Datastore.</p>\n" +
                    "<h3>Configure Datastore</h3>\n" +
                    "<p>To begin, install the&nbsp;<a href=\"https://github.com/GoogleCloudPlatform/google-cloud-node\" target=\"_blank\"><code>google-cloud</code></a>&nbsp;npm package, which you will use to interact with Cloud Datastore.</p>\n" +
                    "<pre>npm install google-cloud@^0.57.0 --save</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>The&nbsp;<a href=\"https://github.com/GoogleCloudPlatform/google-cloud-node\" target=\"_blank\"><code>google-cloud</code></a>&nbsp;node package is an idiomatic node.js client library for&nbsp;<a href=\"https://cloud.google.com/\" target=\"_blank\">Google Cloud Platform</a>&nbsp;services.</p>\n" +
                    "</aside>\n" +
                    "<p>While still in the project directory&nbsp;<code>cloud-nodejs/start</code>&nbsp;edit the&nbsp;<code>books.js</code>&nbsp;file.</p>\n" +
                    "<p>Copy the following code block:</p>\n" +
                    "<pre><code>  <span class=\"kwd\">var</span><span class=\"pln\"> gcloud </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'google-cloud'</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> datastore </span><span class=\"pun\">=</span><span class=\"pln\"> gcloud</span><span class=\"pun\">.</span><span class=\"pln\">datastore</span><span class=\"pun\">({</span><span class=\"pln\">\n" +
                    "    projectId</span><span class=\"pun\">:</span><span class=\"pln\"> config</span><span class=\"pun\">.</span><span class=\"pln\">projectId</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "    keyFilename</span><span class=\"pun\">:</span><span class=\"pln\"> config</span><span class=\"pun\">.</span><span class=\"pln\">keyFilename\n" +
                    "  </span><span class=\"pun\">});</span></code></pre>\n" +
                    "<p>Then paste the code block to the&nbsp;<code>books.js</code>&nbsp;file:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">module</span><span class=\"pun\">.</span><span class=\"pln\">exports </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">config</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "\n" +
                    "   <span class=\"com\">// Add the copied code block here</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">function</span><span class=\"pln\"> getAllBooks</span><span class=\"pun\">(</span><span class=\"pln\">callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"com\">// ...</span></code></pre>\n" +
                    "<p>The&nbsp;<code>gcloud.datastore</code>&nbsp;object allows you to interact with Google Cloud Datastore</p>\n" +
                    "<p>The&nbsp;<code>projectId</code>&nbsp;and&nbsp;<code>keyFilename</code>&nbsp;are read from the&nbsp;<code>config.js</code>&nbsp;file that you edited earlier.</p>\n" +
                    "<h3>Query for entities</h3>\n" +
                    "<p>Now replace the current&nbsp;<code>getAllBooks</code>&nbsp;function with the following:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-1-retrieve-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> getAllBooks</span><span class=\"pun\">(</span><span class=\"pln\">callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> query </span><span class=\"pun\">=</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">createQuery</span><span class=\"pun\">([</span><span class=\"str\">'Book'</span><span class=\"pun\">]);</span><span class=\"pln\">\n" +
                    "  datastore</span><span class=\"pun\">.</span><span class=\"pln\">runQuery</span><span class=\"pun\">(</span><span class=\"pln\">query</span><span class=\"pun\">,</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">)</span> <span class=\"pun\">=&gt;</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">,</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">KEY</span><span class=\"pun\">));</span>                                                   \n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>Datastore queries are built with&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore?method=createQuery\" target=\"_blank\"><code>datastore.createQuery</code></a>&nbsp;and run via&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore?method=runQuery\" target=\"_blank\"><code>datastore.runQuery</code></a>.&nbsp;<code>datastore.KEY</code>is a special value that names a property pointing to the entity's&nbsp;<code>key</code>.</p>\n" +
                    "<p><code>createQuery</code>&nbsp;accepts an array containing the kinds of entities to query and returns a&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.14.0/datastore/query\" target=\"_blank\"><code>Query</code></a>&nbsp;object.</p>\n" +
                    "<p>In our case, we want to query for all&nbsp;<code>'Book'</code>&nbsp;entities.</p>\n" +
                    "<p><code>runQuery</code>&nbsp;runs a query and returns its results as a list of entities in the following format:</p>\n" +
                    "<pre><code><span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "\n" +
                    "  title</span><span class=\"pun\">:</span> <span class=\"str\">'A Tale of Two Cities'</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "  author</span><span class=\"pun\">:</span> <span class=\"str\">'Charles Dickens'</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "  imageUrl</span><span class=\"pun\">:</span> <span class=\"str\">'http://books.google.com/books...'</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<h3><strong>Create Entity using the Developers Console</strong></h3>\n" +
                    "<p>To test the Datastore query and see data displayed, add a&nbsp;<code>Book</code>&nbsp;entity from the&nbsp;<a href=\"http://console.cloud.google.com/\" target=\"_blank\">Google Cloud Console</a>.</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>Open a new web browser tab and visit&nbsp;<a href=\"https://console.cloud.google.com/\" target=\"_blank\">Google Cloud Console</a></li>\n" +
                    "<li>Select to your Google Cloud Platform project using the dropdown at the top.</li>\n" +
                    "<li>From the left navigation menu under \"Storage\", click&nbsp;<strong>Datastore&nbsp;</strong><img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/9540218c28b2e814.png\" /></li>\n" +
                    "<li>Click&nbsp;<strong>Create Entity</strong></li>\n" +
                    "</ol>\n" +
                    "<p>Fill out the&nbsp;<strong>Create an entity</strong>&nbsp;form with the following:</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li><strong>Namespace:&nbsp;</strong>Leave this set as [default]</li>\n" +
                    "<li><strong>Kind:&nbsp;</strong>Select&nbsp;<code>Book</code>&nbsp;from the dropdown. If&nbsp;<code>Book</code>&nbsp;is not present, type it in manually and add the following properties to the entity. (All of these properties should be&nbsp;<code>String</code>s.)</li>\n" +
                    "</ol>\n" +
                    "<ul>\n" +
                    "<li><code>author</code></li>\n" +
                    "<li><code>createdBy</code></li>\n" +
                    "<li><code>description</code></li>\n" +
                    "<li><code>imageUrl</code></li>\n" +
                    "<li><code>publishedDate</code></li>\n" +
                    "<li><code>title</code></li>\n" +
                    "</ul>\n" +
                    "<ol start=\"3\" type=\"1\">\n" +
                    "<li><strong>Key Identifier Type:&nbsp;</strong><em>leave the default value of \"Numeric ID (auto-generated)\"</em></li>\n" +
                    "<li>Under the property list, change the value of the&nbsp;<code>title</code>&nbsp;property to&nbsp;<code>A Tale of Two Cities</code></li>\n" +
                    "<li>Then, change the value of the&nbsp;<code>author</code>&nbsp;property to&nbsp;<code>Charles Dickens</code></li>\n" +
                    "<li>Click&nbsp;<strong>Save</strong></li>\n" +
                    "</ol>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/582e1a9a519443ec.png\" /></p>\n" +
                    "<p>From Cloud Shell, make sure your running node.js web server is stopped. You should have done it in a previous step, but if have not, stop it now by pressing&nbsp;<code>CTRL + C</code>. Now run it again.</p>\n" +
                    "<pre>node app.js</pre>\n" +
                    "<p>To view your changes, click the \"Web preview\" icon that appears at the top left side of the cloud shell window and select \"Preview on port 8080\" to see the app in a web browser.</p>\n" +
                    "<p>Now you should see the book listed!</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/cb5d3b895a7bd5a6.png\" /></p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you queried for all Book entities from Google Cloud Datastore.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will write the code to create and delete books.</p>");
            sec7Node1.setLesson(nodeJsLesson1);
            nodeJsLesson1.getSections().add(sec7Node1);

            Section sec1Node2 = new Section();
            sec1Node2.setOrdinalNumber(1);
            sec1Node2.setDescription("Run the Application Locally");
            sec1Node2.setContent("<p>You can start the Node.js application normally with&nbsp;<code>npm</code>:</p>\n" +
                    "<pre><code><span class=\"pln\">npm start</span></code></pre>\n" +
                    "<p>Once the application started, click on the Web Preview icon<img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/2db57663e4b2d819.png\" />in the Cloud Shell toolbar and choose&nbsp;<strong>preview on port 8080</strong>.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/1ccb86d5704356bc.png\" /></p>\n" +
                    "<p>A tab in your browser opens and connects to the server you just started.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-app-engine-node/img/13fec253414127d.png\" /></p>");
            sec1Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec1Node2);

            Section sec2Node2 = new Section();
            sec2Node2.setOrdinalNumber(2);
            sec2Node2.setDescription("Deploying the Application into App Engine");
            sec2Node2.setContent("App Engine uses a file called app.yaml to describe an application's deployment configuration. If this file is not present, App Engine will try to guess the deployment configuration. However, it is a good idea to provide this file.\n" +
                    "\n" +
                    "Open app.yaml to see what it contains. You can use vim, nano,or emacs to edit the file or use the code editor:\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    "app.yaml\n" +
                    "runtime: nodejs8\n" +
                    "This is the basic configuration needed to deploy a Node.js application. You can learn more about configuring App Engine here.\n" + "\n" +
                    "To deploy your application into App Engine environment, run gcloud app deploy:\n" +
                    "\n" +
                    "gcloud app deploy\n" +
                    "Because this is the first time you are deploying App Engine, the tool will prompt you to select a location to deploy the app. For this lab choose us-central, which is choice 9.\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    "First time deployment up to 2 minutes.\n" +
                    "\n" +
                    "After the application is deployed, you can visit it by opening the URL http://<project-id>.appspot.com in your web browser.\n" +
                    "\n" +
                    "If you don't remember your project-id, please refer to the \"Setup and Requirements\" section or check the deployment logs for something similar to this:\n" +
                    "\n" +
                    "Deployed service [default] to [https://<project-id>.appspot.com]\n" +
                    "\n" +
                    "Optionally, you can instead purchase and use a top-level domain name for your app, or use one that you have already registered.\n" +
                    "\n" +
                    "Summary\n" +
                    "In this step, you set up a simple Node.js application and ran and deployed your application on App Engine.");
            sec2Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec2Node2);

            Section sec3Node2 = new Section();
            sec3Node2.setOrdinalNumber(3);
            sec3Node2.setDescription("Updating the Application");
            sec3Node2.setContent("Update the application to generate a UUID every time someone visits the page.\n" +
                    "\n" +
                    "Install the uuid package with npm:\n" +
                    "\n" +
                    "npm install uuid --save\n" +
                    "Now modify app.js to require uuid and then call the function in the response. You can use vim, nano,or emacs to edit the file or use the code editor:\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    "app.js\n" +
                    "// [START app]\n" +
                    "'use strict';\n" +
                    "\n" +
                    "const express = require('express');\n" +
                    "const uuid = require('uuid');\n" +
                    "const app = express();\n" +
                    "\n" +
                    "app.get('/', (req, res) => {\n" +
                    "  res.status(200).send(`Hello, ${uuid()}!`);\n" +
                    "});\n" +
                    "\n" +
                    "// Start the server\n" +
                    "const PORT = process.env.PORT || 8080;\n" +
                    "app.listen(PORT, () => {\n" +
                    "  console.log(`App listening on port ${PORT}`);\n" +
                    "  console.log('Press Ctrl+C to quit.');\n" +
                    "});\n" +
                    "// [END app]\n" +
                    "Now, you can test the application locally.\n" +
                    "\n" +
                    "Start the Node.js application with npm:\n" +
                    "\n" +
                    "npm start\n" +
                    "Once the application started, click on the Web Preview iconin the Cloud Shell toolbar and choose preview on port 8080.\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    "A tab in your browser opens and connects to the server you just started. You should see the new app that displays a UUID!\n" +
                    "\n" +
                    "\n" +
                    "To deploy your updated application, run gcloud app deploy:\n" +
                    "\n" +
                    "gcloud app deploy\n" +
                    "In a few minutes, the new version will be deployed and you can visit it by opening the URL http://<project-id>.appspot.com in your web browser.\n" +
                    "\n" +
                    "Summary\n" +
                    "In this step, you updated your Node.js application without any downtime.");
            sec3Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec3Node2);

            Section sec4Node2 = new Section();
            sec4Node2.setOrdinalNumber(4);
            sec4Node2.setDescription("Create a Slack bot user");
            sec4Node2.setContent("<p>A&nbsp;<a href=\"https://api.slack.com/bot-users\" target=\"_blank\">bot user</a>&nbsp;can listen to messages on Slack, post messages, and upload files. In this codelab, you will create a bot post a simple greeting message.</p>\n" +
                    "<h2><strong>Create a new Slack app</strong></h2>\n" +
                    "<ul>\n" +
                    "<li>Go to the&nbsp;<a href=\"https://api.slack.com/apps\" target=\"_blank\">Slack apps management page</a>.</li>\n" +
                    "<li>Click the&nbsp;<strong>Create new app</strong>&nbsp;button in the upper-right corner.</li>\n" +
                    "<li>Give the app a name, such as \"Kittenbot\".</li>\n" +
                    "<li>Choose the Slack team where you want it installed.</li>\n" +
                    "</ul>\n" +
                    "<h2><strong>Add a new bot user to the app.</strong></h2>\n" +
                    "<ul>\n" +
                    "<li>Select&nbsp;<strong>Bot users</strong>&nbsp;under the features heading on the left-hand side navigation of the app configuration page.</li>\n" +
                    "<li>Click the&nbsp;<strong>Add a bot user</strong>&nbsp;button.</li>\n" +
                    "<li>Give it a nice username, like&nbsp;<code>@kittenbot</code>.</li>\n" +
                    "<li>This tutorial uses the Realtime Messaging (RTM) API, so keep the&nbsp;<strong>Always show the bot as online</strong>&nbsp;option selected as&nbsp;<strong>Off</strong>. The bot user will show as online only when there is a connection from the bot.</li>\n" +
                    "<li>Click the&nbsp;<strong>Add bot user</strong>&nbsp;button.</li>\n" +
                    "</ul>\n" +
                    "<h2><strong>Get the bot user OAuth access token</strong></h2>\n" +
                    "<ul>\n" +
                    "<li>Select&nbsp;<strong>OAuth &amp; Permissions</strong>&nbsp;under the features heading on the left-hand side navigation of the app configuration page.</li>\n" +
                    "<li>Click the&nbsp;<strong>Reinstall app</strong>&nbsp;button. This will reinstall the app to your team and add the bot user you just created.</li>\n" +
                    "<li>Click the&nbsp;<strong>Copy</strong>&nbsp;button to copy the&nbsp;<strong>Bot user OAuth access token</strong>&nbsp;text into your clipboard.</li>\n" +
                    "<li>You'll use the token in the next step. Don't worry. You can come back this configuration page from the&nbsp;<a href=\"https://api.slack.com/apps\" target=\"_blank\">apps management page</a>&nbsp;if you need to get this token again.</li>\n" +
                    "</ul>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p><a href=\"https://api.slack.com/docs/oauth-safety\" target=\"_blank\">Be careful</a>&nbsp;with your bot user OAuth access token. Treat it like you would any other secret token. Do not store tokens in version control or share them publicly.</p>\n" +
                    "</aside>");
            sec4Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec4Node2);

            Section sec5Node2 = new Section();
            sec5Node2.setOrdinalNumber(5);
            sec5Node2.setDescription("Run the sample app");
            sec5Node2.setContent("<p>Edit the&nbsp;<code>kittenbot.js</code>&nbsp;file and enter your Slack bot token. If it is no longer in your clipboard, you can get it from the&nbsp;<a href=\"https://my.slack.com/apps/manage/custom-integrations\" target=\"_blank\">bot custom integration configuration page</a>. You can use any editor of your choice, such as&nbsp;<code>emacs</code>&nbsp;or&nbsp;<code>vim</code>. This tutorial uses the&nbsp;<a href=\"https://cloud.google.com/shell/docs/features#code_editor\" target=\"_blank\">code editor feature of Cloud Shell</a>&nbsp;for simplicity.</p>\n" +
                    "<ul>\n" +
                    "<li>Open the code editor.<br /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/3cc88b2369c9963d.png\" /></li>\n" +
                    "<li>Select the&nbsp;<code>cloud-slack-bot/start/kittenbot.js</code>&nbsp;file.<br /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/d530308ee7655f15.png\" /></li>\n" +
                    "<li>Paste your Slack token to replace&nbsp;<code>your-slack-token</code>&nbsp;in the file and save the file with&nbsp;<strong>Ctrl-S&nbsp;</strong>or the&nbsp;<strong>File -&gt; Save</strong>menu item.</li>\n" +
                    "</ul>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-slack-bot/blob/master/start/kittenbot.js\" target=\"_blank\">kittenbot.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span> <span class=\"typ\">Botkit</span> <span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'botkit'</span><span class=\"pun\">)</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> controller </span><span class=\"pun\">=</span> <span class=\"typ\">Botkit</span><span class=\"pun\">.</span><span class=\"pln\">slackbot</span><span class=\"pun\">({</span><span class=\"pln\">debug</span><span class=\"pun\">:</span> <span class=\"kwd\">false</span><span class=\"pun\">})</span><span class=\"pln\">\n" +
                    "controller\n" +
                    "  </span><span class=\"pun\">.</span><span class=\"pln\">spawn</span><span class=\"pun\">({</span><span class=\"pln\">\n" +
                    "    token</span><span class=\"pun\">:</span> <span class=\"str\">'your-slack-token'</span> <span class=\"com\">// Edit this line!</span>\n" +
                    "  <span class=\"pun\">})</span>\n" +
                    "  <span class=\"pun\">.</span><span class=\"pln\">startRTM</span><span class=\"pun\">(</span><span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "      <span class=\"kwd\">throw</span> <span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">})</span><span class=\"pln\">\n" +
                    "\n" +
                    "controller</span><span class=\"pun\">.</span><span class=\"pln\">hears</span><span class=\"pun\">(</span>\n" +
                    "  <span class=\"pun\">[</span><span class=\"str\">'hello'</span><span class=\"pun\">,</span> <span class=\"str\">'hi'</span><span class=\"pun\">],</span> <span class=\"pun\">[</span><span class=\"str\">'direct_message'</span><span class=\"pun\">,</span> <span class=\"str\">'direct_mention'</span><span class=\"pun\">,</span> <span class=\"str\">'mention'</span><span class=\"pun\">],</span>\n" +
                    "  <span class=\"kwd\">function</span> <span class=\"pun\">(</span><span class=\"pln\">bot</span><span class=\"pun\">,</span><span class=\"pln\"> message</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\"> bot</span><span class=\"pun\">.</span><span class=\"pln\">reply</span><span class=\"pun\">(</span><span class=\"pln\">message</span><span class=\"pun\">,</span> <span class=\"str\">'Meow. :smile_cat:'</span><span class=\"pun\">)</span> <span class=\"pun\">})</span></code></pre>\n" +
                    "<ul>\n" +
                    "<li>Switch back to Cloud Shell and run your bot.</li>\n" +
                    "</ul>\n" +
                    "<pre>node kittenbot.js</pre>\n" +
                    "<p>In your Slack team, you should now see that @kittenbot is online.</p>\n" +
                    "<ul>\n" +
                    "<li>If you do not see kittenbot in your direct messages list, you may need to open a direct message to the bot.<br /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/cd6a1d257419f41a.png\" /><br /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/22fad5ce5edf666e.png\" /></li>\n" +
                    "<li>Say hello to @kittenbot in a direct message (or if you added @kittenbot to a channel, the bot will respond to mentions there, too). It should meow back at you.</li>\n" +
                    "</ul>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/f9bd9c77c9415b74.png\" /></p>\n" +
                    "<ul>\n" +
                    "<li>Go back to the Cloud Shell and press Control-C to stop the bot server.</li>\n" +
                    "</ul>");
            sec5Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec5Node2);

            Section sec6Node2 = new Section();
            sec6Node2.setOrdinalNumber(6);
            sec6Node2.setDescription("Create a Docker container image");
            sec6Node2.setContent("<p>Docker provides a way to containerize your bot. A Docker image bundles all of your dependencies (even the compiled ones) so that it can run in a lightweight sandbox.</p>\n" +
                    "<h2>Building a Docker image</h2>\n" +
                    "<ul>\n" +
                    "<li>Create a file called&nbsp;<code>Dockerfile</code>.</li>\n" +
                    "<li>Enter the following definition, which describes how to build your Docker image.</li>\n" +
                    "</ul>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-slack-bot/blob/master/step-2-docker/Dockerfile\" target=\"_blank\">Dockerfile</a></h3>\n" +
                    "<pre><code><span class=\"pln\">FROM node</span><span class=\"pun\">:</span><span class=\"lit\">5.4</span><span class=\"pln\">\n" +
                    "COPY </span><span class=\"kwd\">package</span><span class=\"pun\">.</span><span class=\"pln\">json </span><span class=\"pun\">/</span><span class=\"pln\">src</span><span class=\"pun\">/</span><span class=\"kwd\">package</span><span class=\"pun\">.</span><span class=\"pln\">json\n" +
                    "WORKDIR </span><span class=\"pun\">/</span><span class=\"pln\">src\n" +
                    "RUN npm install\n" +
                    "COPY kittenbot</span><span class=\"pun\">.</span><span class=\"pln\">js </span><span class=\"pun\">/</span><span class=\"pln\">src\n" +
                    "CMD </span><span class=\"pun\">[</span><span class=\"str\">\"node\"</span><span class=\"pun\">,</span> <span class=\"str\">\"/src/kittenbot.js\"</span><span class=\"pun\">]</span></code></pre>\n" +
                    "<ul>\n" +
                    "<li>Save this file.</li>\n" +
                    "</ul>\n" +
                    "<p>A&nbsp;<code>Dockerfile</code>&nbsp;is a recipe for a Docker image. This one layers on top of the&nbsp;<a href=\"https://hub.docker.com/_/node/\" target=\"_blank\">Node.js base image</a>&nbsp;found on the Docker hub, copies&nbsp;<code>package.json</code>&nbsp;to the image and installs the dependencies listed in it, copies the&nbsp;<code>kittenbot.js</code>&nbsp;file to the image, and tells Docker to that it should run the Node.js server when the image starts.</p>\n" +
                    "<ul>\n" +
                    "<li>Go back to the Cloud Shell.</li>\n" +
                    "<li>Run this command to save your project ID to the environment variable&nbsp;<code>PROJECT_ID</code>. Commands in this tutorial will use this variable as&nbsp;<code>$PROJECT_ID</code>.</li>\n" +
                    "</ul>\n" +
                    "<pre>export PROJECT_ID=$(gcloud config list --format 'value(core.project)')</pre>\n" +
                    "<ul>\n" +
                    "<li>Build the image by running the&nbsp;<code>docker build</code>&nbsp;command. (This command takes about 4 minutes to complete. It has to download the base image and Node.js dependencies.)</li>\n" +
                    "</ul>\n" +
                    "<pre>docker build -t gcr.io/${PROJECT_ID}/slack-codelab:v1 .</pre>\n" +
                    "<h2><strong>Extra Credit: Create a incoming webhook to Slack</strong></h2>\n" +
                    "<p>While the Docker image is building, you can try out some of the other Slack APIs. For example, an&nbsp;<a href=\"https://api.slack.com/incoming-webhooks\" target=\"_blank\">incoming webhook</a>&nbsp;is an easy way to send Slack notifications from another service or app without having to worry about a persistent connection for two-way communication like we do with a bot user.</p>\n" +
                    "<ul>\n" +
                    "<li>Go to the&nbsp;<a href=\"https://my.slack.com/apps/manage/custom-integrations\" target=\"_blank\">Slack Custom Integrations management console</a>.</li>\n" +
                    "<li>Click&nbsp;<strong>Incoming WebHooks</strong>, then the&nbsp;<strong>Add configuration</strong>&nbsp;button.</li>\n" +
                    "<li>Select a Slack channel for messages to post to (or have them go privately to your Slack user).</li>\n" +
                    "<li>Click the&nbsp;<strong>Add incoming webhooks integration</strong>&nbsp;button.</li>\n" +
                    "</ul>\n" +
                    "<p>By now your Docker build should be complete. We will come back to this integration in a later step.</p>\n" +
                    "<h2>Testing a Docker image locally</h2>\n" +
                    "<ul>\n" +
                    "<li>Go back to Cloud Shell.</li>\n" +
                    "<li>Test the image locally with the following command which will run a Docker container as a daemon from our newly-created container image:</li>\n" +
                    "</ul>\n" +
                    "<pre>docker run -d \\\n" +
                    "    -v $(pwd)/:/config \\\n" +
                    "    -e slack_token_path=/config/slack-token \\\n" +
                    "    gcr.io/${PROJECT_ID}/slack-codelab:v1</pre>\n" +
                    "<p>This command also mounts the current directory as a volume inside the container to give it access to the&nbsp;<code>slack-token</code>&nbsp;file. You should see that @kittenbot is online again.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Here's the full documentation for the&nbsp;<code>docker run</code>&nbsp;command:&nbsp;<a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\">https://docs.docker.com/engine/reference/run/</a></p>\n" +
                    "</aside>\n" +
                    "<p>Let's now stop the running container.</p>\n" +
                    "<ul>\n" +
                    "<li>Get the ID of the running container with the&nbsp;<code>docker ps</code>&nbsp;command:</li>\n" +
                    "</ul>\n" +
                    "<pre>docker ps</pre>\n" +
                    "<h3>Command output</h3>\n" +
                    "<pre>CONTAINER ID   IMAGE                               COMMAND\n" +
                    "fab8b7a0d6ee   gcr.io/your-proj/slack-codelab:v1   \"node /src/kittenbot.\"</pre>\n" +
                    "<ul>\n" +
                    "<li>Stop the container. Replace the docker container ID (<code>fab8b7a0d6ee</code>&nbsp;in the example) with the ID of your container:</li>\n" +
                    "</ul>\n" +
                    "<pre>docker stop fab8b7a0d6ee</pre>\n" +
                    "<h3 class=\"faq\"><strong>Frequently Asked Questions</strong></h3>\n" +
                    "<ul class=\"faq\">\n" +
                    "<li><a href=\"http://stackoverflow.com/q/35599414\" target=\"_blank\">How do I get the project ID from the gcloud command-line tool?</a></li>\n" +
                    "</ul>");
            sec6Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec6Node2);

            Section sec7Node2 = new Section();
            sec7Node2.setOrdinalNumber(7);
            sec7Node2.setDescription("Pushing a Docker image to Google Container Registry");
            sec7Node2.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Now that the image works as intended we can push it to the&nbsp;<a href=\"https://cloud.google.com/container-registry/\" target=\"_blank\">Google Container Registry</a>, a private repository for your Docker images accessible from every Google Cloud project (but also from outside Google Cloud Platform).</p>\n" +
                    "<ul>\n" +
                    "<li>Push the Docker image to Google Container Registry from Cloud Shell. (This command takes about 5 minutes to complete.)</li>\n" +
                    "</ul>\n" +
                    "<pre>gcloud docker -- push gcr.io/${PROJECT_ID}/slack-codelab:v1</pre>\n" +
                    "<h2><strong>Extra Credit: Testing an incoming webhook</strong></h2>\n" +
                    "<p>While waiting for the image to upload, use the incoming webhook to send a notification to Slack.</p>\n" +
                    "<ul>\n" +
                    "<li>In Cloud Shell, click the&nbsp;<strong>+</strong>&nbsp;button to add a new Cloud Shell session.<br /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/e876cbd7bd3a1f32.png\" /></li>\n" +
                    "<li>Go back to the incoming webhook you created. If you closed that browser tab, you can get back to there from the&nbsp;<a href=\"https://my.slack.com/apps/manage/custom-integrations\" target=\"_blank\">Slack Custom Integrations management console</a>.</li>\n" +
                    "<li>Copy the webhook URL from the configuration page.</li>\n" +
                    "<li>In the new Cloud Shell session, run&nbsp;<code>curl</code>&nbsp;to send an HTTP request with your message to Slack. (Replace the URL with your webhook URL.)</li>\n" +
                    "</ul>\n" +
                    "<pre>curl -X POST --data-urlencode \\\n" +
                    "    'payload={\"text\": \"Hello from Cloud Shell.\"}' \\\n" +
                    "    https://hooks.slack.com/services/YOUR/WEBHOOK/URL</pre>\n" +
                    "<p>This demonstrates that anywhere that you can send an HTTP request, you can send a message to Slack. This is a really easy way to integrate your own apps and services with Slack notifications.</p>\n" +
                    "<p>For more complicated messages, test out the JSON request first in the&nbsp;<a href=\"https://api.slack.com/docs/messages/builder\" target=\"_blank\">Slack message builder</a>.</p>\n" +
                    "<h2><strong>Viewing images in Google Container Registry</strong></h2>\n" +
                    "<p>When the image upload completes, you can see the container image listed in the Google Cloud Console:&nbsp;<a href=\"https://console.cloud.google.com/kubernetes/images/list\" target=\"_blank\"><em>Container Engine &gt; Container Registry</em></a>. We now have a project-wide Docker image available which Kubernetes can access and orchestrate as we'll see in a few minutes.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/313206ea857ccb7a.png\" /></p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note that while here we used a generic domain for the registry (<code>gcr.io</code>), you can also be more specific about which zone and bucket to use. Details are documented here:&nbsp;<a href=\"https://cloud.google.com/container-registry/#pushing_to_the_registry\" target=\"_blank\">https://cloud.google.com/container-registry/#pushing_to_the_registry</a></p>\n" +
                    "</aside>\n" +
                    "<p>If you're curious, you can navigate through the container images as they are stored in Google Cloud Storage by following this link:&nbsp;<a href=\"https://console.cloud.google.com/storage/browser/\" target=\"_blank\">https://console.cloud.google.com/storage/browser/</a>.</p>\n" +
                    "<h3 class=\"faq\"><strong>Frequently Asked Questions</strong></h3>\n" +
                    "<ul class=\"faq\">\n" +
                    "<li><a href=\"https://cloud.google.com/container-registry/docs/troubleshooting\" target=\"_blank\">Troubleshooting Google Container Registry (Unable to ping registry endpoint).</a></li>\n" +
                    "<li><a href=\"http://stackoverflow.com/a/37036348/101923\" target=\"_blank\">\"Repository does not exist\" error when doing gcloud docker push command.</a></li>\n" +
                    "</ul>\n" +
                    "</li>\n" +
                    "</ul>");
            sec7Node2.setLesson(nodeJsLesson2);
            nodeJsLesson2.getSections().add(sec7Node2);


            Section sec1Node3 = new Section();
            sec1Node3.setOrdinalNumber(1);
            sec1Node3.setDescription("Sự phù hợp với đặc tả của JPA");
            sec1Node3.setContent("Hibernate là cài đặt ORM Java thành công nhất. Không ngạc nhiên khi mà các đặc tả cho Java persistence API (JPA) bị ảnh hưởng nhiều bởi Hibernate API. Cũng không ngạc nhiên khi Hibernate là ORM Framework phổ biến nhất.");
            sec1Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec1Node3);

            Section sec2Node3 = new Section();
            sec2Node3.setOrdinalNumber(2);
            sec2Node3.setDescription(" Sự khác nhau giữa các hành động thực thi");
            sec2Node3.setContent("Các method persist, save, update, merge, saveOrUpdate không lập tức đưa ra kết quả tương ứng SQL UPDATE hoặc INSERT. Thực tế thì việc cập nhật dữ liệu vào database xảy ra khi transaction được commit hoặc flushing session. Cũng không ngạc nhiên khi Hibernate là ORM Framework phổ biến nhất.");
            sec2Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec2Node3);

            Section sec3Node3 = new Section();
            sec3Node3.setOrdinalNumber(3);
            sec3Node3.setDescription("Persist");
            sec3Node3.setContent("Điều gì xảy ra sau khi method persist được gọi? Đối tượng person bị đổi trạng thái từ transient sang persistent. Đối tượng vào trong persistence context nhưng vẫn chưa được lưu vào database.");
            sec3Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec3Node3);

            Section sec4Node3 = new Section();
            sec4Node3.setOrdinalNumber(4);
            sec4Node3.setDescription("Custom machine types");
            sec4Node3.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>In the previous section, you learned that there are a number of&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types\" target=\"_blank\">predefined machine types</a>&nbsp;that you can choose for your virtual machine. However, if predefined machine types do not meet your needs, you can create an instance with custom virtualized hardware settings. Specifically, you can create an instance with a custom number of vCPUs and amount of memory, effectively using a custom machine type.</p>\n" +
                    "<p>Create another virtual machine instance using the Google Cloud Console, and choose a custom machine type by clicking&nbsp;<strong>Customize</strong>:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/a0813a6f2ab5765d.png\" /></p>\n" +
                    "<p>Then, you use the sliders to pick the exact number of cores and memory to use:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/cab8aa7833d57791.png\" /></p>\n" +
                    "<p>Create a virtual machine instance with 2 vCPU and 5 GB of RAM.</p>\n" +
                    "</li>\n" +
                    "<li>&nbsp;</li>\n" +
                    "</ul>");
            sec4Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec4Node3);

            Section sec5Node3 = new Section();
            sec5Node3.setOrdinalNumber(5);
            sec5Node3.setDescription("Create a new instance, with gcloud");
            sec5Node3.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Rather than using the Google Cloud Console to create a virtual machine instance, you can also use the command line tool called&nbsp;<code>gcloud</code>.</p>\n" +
                    "<p>We'll use&nbsp;<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">Google Cloud Shell</a>,<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">&nbsp;a command line environment running in the Cloud</a>. This Debian-based virtual machine is loaded with all the development tools you'll need (<code>gcloud</code>,&nbsp;<code>git</code>&nbsp;and others) and offers a persistent 5GB home directory.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>You don't need to manually install&nbsp;<code>gcloud</code>&nbsp;for this lab since it's preinstalled in Cloud Shell. But if you want to try this on your own machine in the future, read the&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">gcloud command line tool guide</a>.</p>\n" +
                    "</aside>\n" +
                    "<p>Open the Google Cloud Shell by clicking on the&nbsp;<img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/3b409efdcc18f697.png\" />icon on the top right of the screen:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/446be36b8e6592.png\" /></p>\n" +
                    "<p>Once opened, you can create a new virtual machine instance from the command line by using&nbsp;<code>gcloud</code>&nbsp;(feel free to use another zone closer to you) :</p>\n" +
                    "<pre>$ gcloud compute instances create gcelab2 --zone us-central1-c\n" +
                    "Created [...gcelab2].\n" +
                    "NAME     ZONE           MACHINE_TYPE  PREEMPTIBLE INTERNAL_IP EXTERNAL_IP    STATUS\n" +
                    "gcelab2  us-central1-c  n1-standard-1             10.240.X.X  X.X.X.X        RUNNING</pre>\n" +
                    "<p>The instance was created with some default values:</p>\n" +
                    "<ul>\n" +
                    "<li>The latest&nbsp;<a href=\"https://cloud.google.com/compute/docs/operating-systems/linux-os#debian\" target=\"_blank\">Debian 8 (Jessie)</a>&nbsp;image.</li>\n" +
                    "<li>The&nbsp;<code>n1-standard-1</code>&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types\" target=\"_blank\">machine type</a>. You can select another machine type such as&nbsp;<code>n1-highmem-4</code>&nbsp;or&nbsp;<code>n1-highcpu-6</code>. If none of the&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types\" target=\"_blank\">predefined machine types</a>&nbsp;match your needs, use a&nbsp;<a href=\"https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type\" target=\"_blank\">custom machine type</a>.</li>\n" +
                    "<li>A root persistent disk with the same name as the instance; the disk is automatically attached to the instance.</li>\n" +
                    "</ul>\n" +
                    "<p>Run&nbsp;<code>gcloud compute instances create --help</code>&nbsp;to see all the defaults.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>You can set the default region and zones that&nbsp;<code>gcloud</code>&nbsp;uses if you are always working within one region/zone and you don't want to append the&nbsp;<code>--zone</code>&nbsp;flag every time. You can do so by running these commands :</p>\n" +
                    "<p><code>$ gcloud config set compute/zone ...</code></p>\n" +
                    "<p><code>$ gcloud config set compute/region ...</code></p>\n" +
                    "</aside>\n" +
                    "<p>Finally, you can SSH into your instance using&nbsp;<code>gcloud</code>&nbsp;as well (make sure you adjust your zone if you've used something else when creating the instance, or omit the&nbsp;<code>--zone</code>&nbsp;flag if you've set the option globally):</p>\n" +
                    "<pre>$ gcloud compute ssh gcelab2 --zone us-central1-c\n" +
                    "Warning: Permanently added 'compute.745019997240233037' (ECDSA) to the list of known hosts.\n" +
                    "...\n" +
                    "username@gcelab2:~$</pre>\n" +
                    "<p>Disconnect from SSH by existing from the remote shell:</p>\n" +
                    "<pre>username@gcelab2:~$ exit</pre>\n" +
                    "</li>");
            sec5Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec5Node3);

            Section sec6Node3 = new Section();
            sec6Node3.setOrdinalNumber(6);
            sec6Node3.setDescription("Try out the sample code");
            sec6Node3.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>The sample has the following layout:</p>\n" +
                    "<pre><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"pln\">js                  </span><span class=\"com\">/* Express.js web application */</span><span class=\"pln\">\n" +
                    "config</span><span class=\"pun\">.</span><span class=\"pln\">js               </span><span class=\"com\">/* Application configuration variables */</span><span class=\"pln\">\n" +
                    "lib</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "  cloudVisionClient</span><span class=\"pun\">.</span><span class=\"pln\">js  </span><span class=\"com\">/* Cloud Vision client to consume the API */</span><span class=\"pln\">\n" +
                    "  oauth2</span><span class=\"pun\">.</span><span class=\"pln\">js             </span><span class=\"com\">/* OAuth2 client for login */</span><span class=\"pln\">\n" +
                    "  routes</span><span class=\"pun\">.</span><span class=\"pln\">js             </span><span class=\"com\">/* Application endpoints */</span><span class=\"pln\">\n" +
                    "  storageClient</span><span class=\"pun\">.</span><span class=\"pln\">js      </span><span class=\"com\">/* Cloud Storage client to consume the API */</span>\n" +
                    "<span class=\"kwd\">package</span><span class=\"pun\">.</span><span class=\"pln\">json            </span><span class=\"com\">/* npm package file including dependencies */</span><span class=\"pln\">\n" +
                    "views</span><span class=\"pun\">/</span>\n" +
                    "  <span class=\"kwd\">base</span><span class=\"pun\">.</span><span class=\"pln\">dust             </span><span class=\"com\">/* HTML template */</span>\n" +
                    "<span class=\"kwd\">public</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "  style</span><span class=\"pun\">.</span><span class=\"pln\">css             </span><span class=\"com\">/* CSS stylesheet */</span></code></pre>\n" +
                    "<p>To run the sample application in Cloud Shell let's perform the following steps:</p>\n" +
                    "<p>1. Install dependencies. Enter the following command:</p>\n" +
                    "<pre><code><span class=\"pln\">$ npm install\n" +
                    "</span><span class=\"pun\">...</span></code></pre>\n" +
                    "<p>2. Run app.js to start the node.js server:</p>\n" +
                    "<pre><code><span class=\"pln\">$ node app</span><span class=\"pun\">.</span><span class=\"pln\">js\n" +
                    "</span><span class=\"typ\">App</span><span class=\"pln\"> listening at http</span><span class=\"pun\">:</span><span class=\"com\">//:::8080</span></code></pre>\n" +
                    "<p>3. Click the \"Web preview\"<img src=\"https://codelabs.developers.google.com/codelabs/cloud-vision-nodejs/img/a0c920da29c2c9e7.png\" />icon that appears at the top left side of the cloud shell window and select \"Preview on port 8080\" to see the app in a web browser.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: Usually you would test with&nbsp;<a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080</a>&nbsp;but the Google Cloud Shell environment requires requests to be proxied.</p>\n" +
                    "</aside>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: To kill the running server at anytime press Control+C.</p>\n" +
                    "</aside>\n" +
                    "<p>You will see a page that looks like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-vision-nodejs/img/cdeda69fcb376c50.png\" /></p>\n" +
                    "<p>The application currently displays a not-yet-implemented user login. Let's fix that by setting up user authentication.</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you set up and ran the codelab sample application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will use OAuth 2.0 to add user login to the application and Google+ API to fetch user profile.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec6Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec6Node3);

            Section sec7Node3 = new Section();
            sec7Node3.setOrdinalNumber(7);
            sec7Node3.setDescription("Upload images to storage");
            sec7Node3.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this step, you will write the code to save image in Google Cloud Storage.</p>\n" +
                    "<h3><strong>Set up Google Cloud Storage</strong></h3>\n" +
                    "<p>The default bucket uses the same project ID for name:</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>From the left navigation, click&nbsp;<strong>App Engine &gt; Settings.</strong></li>\n" +
                    "<li>Under&nbsp;<strong>Default Cloud Storage Bucket</strong>, click&nbsp;<strong>Create.</strong></li>\n" +
                    "<li>Set public-read as the default object ACLs to existing and new objects in the bucket:</li>\n" +
                    "</ol>\n" +
                    "<pre><code><span class=\"pln\">$ gsutil defacl </span><span class=\"kwd\">set</span> <span class=\"kwd\">public</span><span class=\"pun\">-</span><span class=\"pln\">read gs</span><span class=\"pun\">:</span><span class=\"com\">//&lt;your-project-id&gt;.appspot.com</span>\n" +
                    "<span class=\"typ\">Setting</span> <span class=\"kwd\">default</span> <span class=\"kwd\">object</span><span class=\"pln\"> ACL on gs</span><span class=\"pun\">:</span><span class=\"com\">//&lt;your-project-id&gt;.appspot.com/...</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: You can also create buckets using the command:&nbsp;<code>gsutil mb gs://&lt;your-bucket-name&gt;.appspot.com</code></p>\n" +
                    "</aside>\n" +
                    "<p>Next, you'll need to install the&nbsp;<a href=\"https://github.com/GoogleCloudPlatform/gcloud-node\" target=\"_blank\">gcloud</a>&nbsp;npm package, which you will use to interact with Cloud Storage, and the node.js middleware&nbsp;<a href=\"https://github.com/expressjs/multer\" target=\"_blank\">Multer</a>&nbsp;for handling&nbsp;<code>multipart/form-data</code>&nbsp;forms for uploading files.</p>\n" +
                    "<pre><code><span class=\"pln\">$ npm install gcloud multer </span><span class=\"pun\">--</span><span class=\"pln\">save</span></code></pre>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>config.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>config.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">$ nano </span><span class=\"pun\">-</span><span class=\"pln\">m config</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Replace the placeholder value for&nbsp;<code>projectId</code>&nbsp;with the ID of the project that you created and also replace the placeholder value for&nbsp;<code>bucketName</code>&nbsp;with the name of the bucket you created:</p>\n" +
                    "<h3>config.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> projectId </span><span class=\"pun\">=</span> <span class=\"str\">'your-project-id'</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> bucketName </span><span class=\"pun\">=</span> <span class=\"str\">'your-bucket-name'</span><span class=\"pun\">;</span></code></pre>\n" +
                    "<p>Now, let's register the cloud storage client.</p>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>app.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>app.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m app</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Add the following code so the storage client creates a&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.14.0/storage/bucket\" target=\"_blank\"><code>bucket</code></a>&nbsp;object that provides the API you will use to interact with your Google Cloud Storage bucket:</p>\n" +
                    "<h3>app.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> storageClient </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./lib/storageClient'</span><span class=\"pun\">)(</span><span class=\"pln\">\n" +
                    "  config</span><span class=\"pun\">.</span><span class=\"pln\">gcloud</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "  config</span><span class=\"pun\">.</span><span class=\"pln\">gcloudStorageBucket\n" +
                    "</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"com\">// Configure routes</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./lib/routes'</span><span class=\"pun\">)(</span><span class=\"pln\">\n" +
                    "  storageClient\n" +
                    "</span><span class=\"pun\">));</span></code></pre>\n" +
                    "<p>To upload the image to Cloud Storage and return a publicly accessible URL for displaying the image and the object URI to be later used for the Cloud Vision API, add a 'post' function to&nbsp;<code>lib/routes.js</code>:</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>routes.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m lib</span><span class=\"pun\">/</span><span class=\"pln\">routes</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Add the following 'post' function to&nbsp;<code>lib/routes.js</code>:</p>\n" +
                    "<h3>routes.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> routes </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">storageClient</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">//...</span><span class=\"pln\">\n" +
                    "\n" +
                    "  router</span><span class=\"pun\">.</span><span class=\"pln\">post</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "    storageClient</span><span class=\"pun\">.</span><span class=\"pln\">multer</span><span class=\"pun\">.</span><span class=\"pln\">single</span><span class=\"pun\">(</span><span class=\"str\">'image'</span><span class=\"pun\">),</span><span class=\"pln\">\n" +
                    "    storageClient</span><span class=\"pun\">.</span><span class=\"pln\">uploadToStorage</span><span class=\"pun\">,</span>\n" +
                    "    <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "      <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">file </span><span class=\"pun\">&amp;&amp;</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">file</span><span class=\"pun\">.</span><span class=\"pln\">cloudStoragePublicUrl</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "        res</span><span class=\"pun\">.</span><span class=\"pln\">render</span><span class=\"pun\">(</span><span class=\"str\">'base'</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "          imageUrl</span><span class=\"pun\">:</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">file</span><span class=\"pun\">.</span><span class=\"pln\">cloudStoragePublicUrl\n" +
                    "        </span><span class=\"pun\">});</span>\n" +
                    "      <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">return</span><span class=\"pln\"> router</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"pun\">};</span></code></pre>\n" +
                    "<p>The publicly accesible URL for the image file will be&nbsp;<a href=\"https://storage.googleapis.com/\" target=\"_blank\"><code>https://storage.googleapis.com/</code></a><code>&lt;bucket-name&gt;/&lt;filename&gt;</code>&nbsp;and the Google Cloud Storage image URI will be&nbsp;<code>gs://bucket-name/object-name</code>.</p>\n" +
                    "<p>Finally, we need to change the&nbsp;<code>views/base.dust</code>&nbsp;file to display the form to upload images and to render the image using the Cloud Storage URL.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>base.dust</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m views</span><span class=\"pun\">/</span><span class=\"kwd\">base</span><span class=\"pun\">.</span><span class=\"pln\">dust</span></code></pre>\n" +
                    "<p>2. Replace the current&nbsp;<code>{?profile}</code>&nbsp;block with the following lines:</p>\n" +
                    "<h3><a href=\"https://github.com/Zarmada/cloudvision-nodejs/blob/develop/step-2-upload-to-storage/views/base.dust\" target=\"_blank\">base.dust</a></h3>\n" +
                    "<pre><code><span class=\"com\">//...</span>\n" +
                    "<span class=\"str\">&lt;h3&gt;</span><span class=\"typ\">Google</span> <span class=\"typ\">Cloud</span> <span class=\"typ\">Vision</span><span class=\"pun\">&lt;/</span><span class=\"pln\">h3</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "<span class=\"pun\">{?</span><span class=\"pln\">profile</span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">&lt;</span><span class=\"pln\">form action</span><span class=\"pun\">=</span><span class=\"str\">\"/\"</span><span class=\"pln\"> method</span><span class=\"pun\">=</span><span class=\"str\">\"post\"</span><span class=\"pln\"> enctype</span><span class=\"pun\">=</span><span class=\"str\">\"multipart/form-data\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-group\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">label </span><span class=\"kwd\">for</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Image</span><span class=\"pun\">&lt;/</span><span class=\"pln\">label</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">input type</span><span class=\"pun\">=</span><span class=\"str\">\"file\"</span><span class=\"pln\"> name</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-control\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-group\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">button type</span><span class=\"pun\">=</span><span class=\"str\">\"submit\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"btn btn-success\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Submit</span><span class=\"pun\">&lt;/</span><span class=\"pln\">button</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>  \n" +
                    "  <span class=\"pun\">&lt;/</span><span class=\"pln\">form</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "  <span class=\"pun\">{?</span><span class=\"pln\">imageUrl</span><span class=\"pun\">}</span>\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel panel-default\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-heading\"</span><span class=\"pun\">&gt;</span>\n" +
                    "        <span class=\"pun\">&lt;</span><span class=\"pln\">h3 </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-title\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Output</span><span class=\"pun\">&lt;/</span><span class=\"pln\">h3</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">div id</span><span class=\"pun\">=</span><span class=\"str\">\"panel-body\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-body\"</span><span class=\"pun\">&gt;</span>\n" +
                    "        <span class=\"pun\">&lt;</span><span class=\"pln\">img src</span><span class=\"pun\">=</span><span class=\"str\">\"{.imageUrl}\"</span><span class=\"pln\"> height</span><span class=\"pun\">=</span><span class=\"str\">\"600\"</span><span class=\"pln\"> width</span><span class=\"pun\">=</span><span class=\"str\">\"600\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">{/</span><span class=\"pln\">imageUrl</span><span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">{:</span><span class=\"kwd\">else</span><span class=\"pun\">}</span>\n" +
                    "<span class=\"com\">//... </span></code></pre>\n" +
                    "<p>Restart the node application and try uploading an image.</p>\n" +
                    "<p>It should work!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you created a Google Cloud Storage bucket, uploaded images into it and rendered them using the public URL.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will set up the Google Cloud Vision API for your project.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec7Node3.setLesson(nodeJsLesson3);
            nodeJsLesson3.getSections().add(sec7Node3);

            Section sec1Node4 = new Section();
            sec1Node4.setOrdinalNumber(1);
            sec1Node4.setDescription("Understanding Regions and Zones");
            sec1Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Certain Compute Engine resources live in regions or zones. A region is a specific geographical location where you can run your resources. Each region has one or more zones. For example, the&nbsp;<code>us-central1</code>&nbsp;region denotes a region in the Central United States that has zones&nbsp;<code>us-central1-a</code>,&nbsp;<code>us-central1-b</code>,&nbsp;<code>us-central1-c</code>, and&nbsp;<code>us-central1-f</code>.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/d5e7e31d2902346c.png\" /></p>\n" +
                    "<p>Virtual machine Instances and persistent disks live in a zone, and these are referred to as zonal resources. For example, to attach a persistent disk to a virtual machine instance, both resources must be in the same zone.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Learn more about regions and zones and see a complete list in&nbsp;<a href=\"https://cloud.google.com/compute/docs/zones\" target=\"_blank\">Regions &amp; Zones documentation</a>.</p>\n" +
                    "</aside>\n" +
                    "</li>\n" +
                    "</ul>");
            sec1Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec1Node4);

            Section sec2Node4 = new Section();
            sec2Node4.setOrdinalNumber(2);
            sec2Node4.setDescription("Create a new instance");
            sec2Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this section, you'll learn how to create a new Google Compute Engine virtual machine instance from the Cloud Console.</p>\n" +
                    "<h2><strong>Login into Google Cloud Console</strong></h2>\n" +
                    "<p>Navigate to the the Google Cloud Console from another browser tab/window, to&nbsp;<a href=\"https://console.cloud.google.com/\" target=\"_blank\">https://console.cloud.google.com</a>. Use the login credential given to you by the lab proctor.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/a416fda967d07163.png\" /></p>\n" +
                    "<h2><strong>Compute Engine</strong></h2>\n" +
                    "<p>In the Google Developer Console, click the&nbsp;<strong>Menu</strong>&nbsp;icon on the top left of the screen:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/caf8a9546fcdb4d8.png\" /></p>\n" +
                    "<p>Then navigate to&nbsp;<strong>Compute Engine</strong>&nbsp;&gt;&nbsp;<strong>VM Instances</strong></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/f03404a0ea354321.png\" /></p>\n" +
                    "<p>This may take a minute to initialize for the first time. Once initialized, you should see the following if the project has no virtual machine instances:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/575f182a8247c86b.png\" /></p>\n" +
                    "<h2><strong>Create a new instance</strong></h2>\n" +
                    "<p>To create a new instance, click&nbsp;<strong>Create instance</strong></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/d26361328d6e6f93.png\" /></p>\n" +
                    "<p>There are many parameters you can configure when creating a new instance. Let's use the following:</p>\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Name</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>gcelab</code></p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Zone</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>us-central1-c</code></p>\n" +
                    "<p>Learn more about zones in&nbsp;<a href=\"https://cloud.google.com/compute/docs/zones\" target=\"_blank\">Regions &amp; Zones documentation</a>.</p>\n" +
                    "<p><strong>Note</strong>: remember the zone that you selected, you'll need it later.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Machine Type</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>1 vCPU (n1-standard-1)</code></p>\n" +
                    "<p>This is a 1-CPU, 3.75GB RAM instance.</p>\n" +
                    "<p>There are a number of machine types, ranging from micro instance types to 32-core/208GB RAM instance types. Learn more about this and custom machine types in the&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types\" target=\"_blank\">Machine Types documentation</a>.</p>\n" +
                    "<p><strong>Note</strong>: A new project has a default&nbsp;<a href=\"https://cloud.google.com/compute/docs/resource-quotas\" target=\"_blank\">resource quota</a>, which may limit the number of CPU cores. You can request more for your projects.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Boot Disk</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>New 10 GB standard persistent disk</code></p>\n" +
                    "<p><code>Image: Debian GNU/Linux 8 (jessie)</code></p>\n" +
                    "<p>There are a number of images to choose from, including: Debian, Ubuntu, CoreOS as well as premium images such as Red Hat Enterprise Linux and Windows Server. See Operating System documentation for more detail.</p>\n" +
                    "<p><strong>Note:</strong>&nbsp;You may optionally choose&nbsp;<code>SSD Persistent Disk</code>&nbsp;as well.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Firewall</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p>Check&nbsp;<code>Allow HTTP traffic</code></p>\n" +
                    "<p>Check this option so that we can access a webserver that we will install later.</p>\n" +
                    "<p><strong>Note:&nbsp;</strong>This will automatically create firewall rule to allow HTTP traffic on port 80.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "<p>Your screen should look like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/46c5bcec70eabe40.png\" /></p>\n" +
                    "<p>Click on&nbsp;<strong>Create</strong>&nbsp;to create the new virtual machine instance!</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>The instance creation process is asynchronous. You can check on the status of the task using the top right hand-side&nbsp;<strong>Notifications</strong>&nbsp;icon. Wait for it to finish - it shouldn't take more than a minute.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/ea1a7f9899153d16.png\" /></p>\n" +
                    "</aside>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p><strong>Hint:&nbsp;</strong>If you receive an error when creating a VM, click into&nbsp;<strong>Details</strong>. Most likely, you may need to try with a different zone.</p>\n" +
                    "</aside>\n" +
                    "<p>Once finished, you should see the new virtual machine in the&nbsp;<strong>VM Instances</strong>&nbsp;page. Note down the&nbsp;<code>External IP</code>&nbsp;of the machine on the VM instances page - you will need this later</p>\n" +
                    "<p>To SSH into the virtual machine, click on&nbsp;<strong>SSH</strong>&nbsp;on the right hand side.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/d64685c5118c91c7.png\" /></p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>This launches a secure SSH client directly from your browser. To learn about other ways to ssh into the VM, see the&nbsp;<a href=\"https://cloud.google.com/compute/docs/instances/connecting-to-instance\" target=\"_blank\">documentation</a>.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/8cb62517d9164047.png\" /></p>\n" +
                    "</aside>\n" +
                    "</li>\n" +
                    "</ul>");
            sec2Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec2Node4);

            Section sec3Node4 = new Section();
            sec3Node4.setOrdinalNumber(3);
            sec3Node4.setDescription("Install Node.js");
            sec3Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Once ssh'ed, install Node.js and Git</p>\n" +
                    "<pre>curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</pre>\n" +
                    "<pre>sudo apt-get install -y nodejs git</pre>\n" +
                    "<p>Now let's run an sample application. First, clone the source code:</p>\n" +
                    "<pre><code><span class=\"pln\">git clone https</span><span class=\"pun\">:</span><span class=\"com\">//github.com/GoogleCloudPlatform/nodejs-docs-samples.git</span></code></pre>\n" +
                    "<pre><code><span class=\"pln\">cd nodejs</span><span class=\"pun\">-</span><span class=\"pln\">docs</span><span class=\"pun\">-</span><span class=\"pln\">samples</span><span class=\"pun\">/</span><span class=\"pln\">appengine</span><span class=\"pun\">/</span><span class=\"pln\">hello</span><span class=\"pun\">-</span><span class=\"pln\">world</span><span class=\"pun\">/</span></code></pre>\n" +
                    "<p>Now, install the dependencies with&nbsp;<code>npm</code>:</p>\n" +
                    "<pre><code><span class=\"pln\">npm install</span></code></pre>\n" +
                    "<p>Finally, start the Node application listening on port 80</p>\n" +
                    "<pre><code><span class=\"pln\">sudo PORT</span><span class=\"pun\">=</span><span class=\"lit\">80</span><span class=\"pln\"> npm start</span></code></pre>\n" +
                    "<p>Awesome! Let's see the web page!</p>\n" +
                    "<p>Use the&nbsp;<code>External IP</code>&nbsp;of the virtual machine instance that you noted down before, and in a new browser window/tab, browse to&nbsp;<a href=\"http://external_ip/\" target=\"_blank\"><code>http://EXTERNAL_IP/</code></a>, you should see the default page.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/7be03829524fbef2.png\" /></p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec3Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec3Node4);

            Section sec4Node4 = new Section();
            sec4Node4.setOrdinalNumber(4);
            sec4Node4.setDescription("Create a new instance, with gcloud");
            sec4Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Rather than using the Google Cloud Console to create a virtual machine instance, you can also use the command line tool called&nbsp;<code>gcloud</code>.</p>\n" +
                    "<p>We'll use&nbsp;<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">Google Cloud Shell</a>,<a href=\"https://cloud.google.com/developer-shell/#how_do_i_get_started\" target=\"_blank\">&nbsp;a command line environment running in the Cloud</a>. This Debian-based virtual machine is loaded with all the development tools you'll need (<code>gcloud</code>,&nbsp;<code>git</code>&nbsp;and others) and offers a persistent 5GB home directory.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>You don't need to manually install&nbsp;<code>gcloud</code>&nbsp;for this lab since it's preinstalled in Cloud Shell. But if you want to try this on your own machine in the future, read the&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">gcloud command line tool guide</a>.</p>\n" +
                    "</aside>\n" +
                    "<p>Open the Google Cloud Shell by clicking on the&nbsp;<img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/3b409efdcc18f697.png\" />icon on the top right of the screen:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-create-a-nodejs-vm/img/446be36b8e6592.png\" /></p>\n" +
                    "<p>Once opened, you can create a new virtual machine instance from the command line by using&nbsp;<code>gcloud</code>&nbsp;(feel free to use another zone closer to you) :</p>\n" +
                    "<pre>$ gcloud compute instances create gcelab2 --zone us-central1-c\n" +
                    "Created [...gcelab2].\n" +
                    "NAME     ZONE           MACHINE_TYPE  PREEMPTIBLE INTERNAL_IP EXTERNAL_IP    STATUS\n" +
                    "gcelab2  us-central1-c  n1-standard-1             10.240.X.X  X.X.X.X        RUNNING</pre>\n" +
                    "<p>The instance was created with some default values:</p>\n" +
                    "<ul>\n" +
                    "<li>The latest&nbsp;<a href=\"https://cloud.google.com/compute/docs/operating-systems/linux-os#debian\" target=\"_blank\">Debian 8 (Jessie)</a>&nbsp;image.</li>\n" +
                    "<li>The&nbsp;<code>n1-standard-1</code>&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types\" target=\"_blank\">machine type</a>. You can select another machine type such as&nbsp;<code>n1-highmem-4</code>&nbsp;or&nbsp;<code>n1-highcpu-6</code>. If none of the&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types#predefined_machine_types\" target=\"_blank\">predefined machine types</a>&nbsp;match your needs, use a&nbsp;<a href=\"https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type\" target=\"_blank\">custom machine type</a>.</li>\n" +
                    "<li>A root persistent disk with the same name as the instance; the disk is automatically attached to the instance.</li>\n" +
                    "</ul>\n" +
                    "<p>Run&nbsp;<code>gcloud compute instances create --help</code>&nbsp;to see all the defaults.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>You can set the default region and zones that&nbsp;<code>gcloud</code>&nbsp;uses if you are always working within one region/zone and you don't want to append the&nbsp;<code>--zone</code>&nbsp;flag every time. You can do so by running these commands :</p>\n" +
                    "<p><code>$ gcloud config set compute/zone ...</code></p>\n" +
                    "<p><code>$ gcloud config set compute/region ...</code></p>\n" +
                    "</aside>\n" +
                    "<p>Finally, you can SSH into your instance using&nbsp;<code>gcloud</code>&nbsp;as well (make sure you adjust your zone if you've used something else when creating the instance, or omit the&nbsp;<code>--zone</code>&nbsp;flag if you've set the option globally):</p>\n" +
                    "<pre>$ gcloud compute ssh gcelab2 --zone us-central1-c\n" +
                    "Warning: Permanently added 'compute.745019997240233037' (ECDSA) to the list of known hosts.\n" +
                    "...\n" +
                    "username@gcelab2:~$</pre>\n" +
                    "<p>Disconnect from SSH by existing from the remote shell:</p>\n" +
                    "<pre>username@gcelab2:~$ exit</pre>\n" +
                    "</li>\n" +
                    "</ul>");
            sec4Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec4Node4);

            Section sec5Node4 = new Section();
            sec5Node4.setOrdinalNumber(5);
            sec5Node4.setDescription("Create and delete books");
            sec5Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<h3><strong>Create books</strong></h3>\n" +
                    "<p>The sample application includes a form for adding books. When the form is submitted, the application creates the book by calling&nbsp;<code>books.addBook</code>.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/app.js\" target=\"_blank\">app.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">/* Add a new book */</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"pln\">post</span><span class=\"pun\">(</span><span class=\"str\">'/books'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span> <span class=\"kwd\">next</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">// ...</span><span class=\"pln\">\n" +
                    "\n" +
                    "  books</span><span class=\"pun\">.</span><span class=\"pln\">addBook</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> coverImageData</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span> <span class=\"kwd\">next</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "    res</span><span class=\"pun\">.</span><span class=\"pln\">redirect</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'Referer'</span><span class=\"pun\">)</span> <span class=\"pun\">||</span> <span class=\"str\">'/'</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">})</span>  \n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>The book title and author come from the&nbsp;<code>'title'</code>&nbsp;and&nbsp;<code>'body'</code>&nbsp;fields in the form.</p>\n" +
                    "<p>You can ignore&nbsp;<code>coverImageData</code>&nbsp;and&nbsp;<code>userId</code>&nbsp;for now - we'll come back to these later :)</p>\n" +
                    "<p>Currently, if you try to add a book, you receive an error:</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>Error: books.addBook [Not Yet Implemented]</p>\n" +
                    "</aside>\n" +
                    "<p>Let's fix that!</p>\n" +
                    "<h3>Creating books</h3>\n" +
                    "<p>Press&nbsp;<strong><code>CTRL + C</code></strong>&nbsp;in Cloud Shell to exit the running Node.js app. Then, in the project directory, edit the&nbsp;<code>books.js</code>&nbsp;file.</p>\n" +
                    "<p>The current&nbsp;<code>addBook</code>&nbsp;function is a placeholder that simply returns an error.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-2-create-and-delete-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> addBook</span><span class=\"pun\">(</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">,</span><span class=\"pln\"> coverImageData</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">coverImageData</span><span class=\"pun\">)</span>\n" +
                    "    <span class=\"kwd\">return</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">\"books.addBook image saving Not Yet Implemented\"</span><span class=\"pun\">));</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">return</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">\"books.addBook datastore saving Not Yet Implemented\"</span><span class=\"pun\">));</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>To save a new&nbsp;<code>Book</code>&nbsp;entity in Datastore, replace the current&nbsp;<code>addBook</code>&nbsp;function with the following.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-2-create-and-delete-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> addBook</span><span class=\"pun\">(</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">,</span><span class=\"pln\"> coverImageData</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">coverImageData</span><span class=\"pun\">)</span>\n" +
                    "    <span class=\"kwd\">return</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">\"books.addBook image saving Not Yet Implemented\"</span><span class=\"pun\">));</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> entity </span><span class=\"pun\">=</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    key</span><span class=\"pun\">:</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">key</span><span class=\"pun\">(</span><span class=\"str\">'Book'</span><span class=\"pun\">),</span><span class=\"pln\">\n" +
                    "    data</span><span class=\"pun\">:</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "      title</span><span class=\"pun\">:</span><span class=\"pln\"> title</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "      author</span><span class=\"pun\">:</span><span class=\"pln\"> author\n" +
                    "    </span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">};</span><span class=\"pln\">\n" +
                    "\n" +
                    "  datastore</span><span class=\"pun\">.</span><span class=\"pln\">save</span><span class=\"pun\">(</span><span class=\"pln\">entity</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">);</span>                                               \n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p><a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore?method=save\" target=\"_blank\"><code>datastore.save</code></a>&nbsp;inserts or updates entity objects.</p>\n" +
                    "<p>Entity objects are represented the following format:</p>\n" +
                    "<pre><code><span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  key</span><span class=\"pun\">:</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">key</span><span class=\"pun\">(</span><span class=\"str\">'Book'</span><span class=\"pun\">,</span> <span class=\"pun\">[</span><span class=\"typ\">Numeric</span><span class=\"pln\"> entity ID</span><span class=\"pun\">])</span> <span class=\"pun\">},</span><span class=\"pln\">\n" +
                    "  data</span><span class=\"pun\">:</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    title</span><span class=\"pun\">:</span> <span class=\"str\">'A Tale of Two Cities'</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "    author</span><span class=\"pun\">:</span> <span class=\"str\">'Charles Dickens'</span>\n" +
                    "    <span class=\"com\">// ... properties ...</span>\n" +
                    "  <span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>If an entity ID is provided, calling&nbsp;<code>save</code>&nbsp;will update the entity in Datastore. In our example, the book entity is being added to Datastore for the first time, so no ID is necessary (<em>an ID will be auto-generated by Datastore</em>).</p>\n" +
                    "<p>Restart your webserver (<code>node app.js</code>) and try submitting the form again with different values to add a new book.</p>\n" +
                    "<p>You should now see your added book!</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-nodejs/img/b5318c68b7c25aae.png\" /></p>\n" +
                    "<h3><strong>Deleting books</strong></h3>\n" +
                    "<p>Now try deleting a book by clicking the delete link below it. You will receive an error:</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>Error: books.deleteBook [Not Yet Implemented]</p>\n" +
                    "</aside>\n" +
                    "<p>Press&nbsp;<strong><code>CTRL-C</code></strong>&nbsp;to stop the webserver, and take a look at&nbsp;<code>books.js</code>. The delete link in the sample application deletes books by calling&nbsp;<code>books.deleteBook</code>&nbsp;with the ID of the book to delete.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/app.js\" target=\"_blank\">app.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">/* Delete book by key */</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/books/delete'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span> <span class=\"kwd\">next</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  books</span><span class=\"pun\">.</span><span class=\"pln\">deleteBook</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">query</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span> <span class=\"kwd\">next</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "    res</span><span class=\"pun\">.</span><span class=\"pln\">redirect</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span> \n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>The sample implementation of&nbsp;<code>books.deleteBook</code>&nbsp;is also a placeholder which simply returns an error:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-2-create-and-delete-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> deleteBook</span><span class=\"pun\">(</span><span class=\"pln\">bookId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  callback</span><span class=\"pun\">(</span><span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">\"books.deleteBook datastore deletion Not Yet Implemented\"</span><span class=\"pun\">));</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>To delete the book with the provided ID, replace the current&nbsp;<code>deleteBook</code>&nbsp;function with the following.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-2-create-and-delete-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> deleteBook</span><span class=\"pun\">(</span><span class=\"pln\">bookId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> key </span><span class=\"pun\">=</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">key</span><span class=\"pun\">([</span><span class=\"str\">'Book'</span><span class=\"pun\">,</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">bookId</span><span class=\"pun\">,</span> <span class=\"lit\">10</span><span class=\"pun\">)]);</span><span class=\"pln\">\n" +
                    "  datastore</span><span class=\"pun\">.</span><span class=\"kwd\">delete</span><span class=\"pun\">(</span><span class=\"pln\">key</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">);</span>                                          \n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>Restart the node application and try deleting book again.</p>\n" +
                    "<p>It should work!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you wrote the code to create and delete entities in Datastore.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will use Google Cloud Storage to upload book cover images.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec5Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec5Node4);

            Section sec6Node4 = new Section();
            sec6Node4.setOrdinalNumber(6);
            sec6Node4.setDescription("Display a user's books");
            sec6Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>When a user is signed in, the sample application passes the ID of the signed in user to&nbsp;<code>books.addBook</code>&nbsp;when new books are created.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/app.js\" target=\"_blank\">app.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">/* Add a new book */</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"pln\">post</span><span class=\"pun\">(</span><span class=\"str\">'/books'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span> <span class=\"kwd\">next</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">// ...</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> userId</span><span class=\"pun\">;</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "    userId </span><span class=\"pun\">=</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">;</span><span class=\"pln\">\n" +
                    "\n" +
                    "  books</span><span class=\"pun\">.</span><span class=\"pln\">addBook</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> coverImageData</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span> <span class=\"kwd\">next</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "    res</span><span class=\"pun\">.</span><span class=\"pln\">redirect</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'Referer'</span><span class=\"pun\">)</span> <span class=\"pun\">||</span> <span class=\"str\">'/'</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">})</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>Currently, we're not tracking this&nbsp;<code>userId</code>&nbsp;when saving book entities.</p>\n" +
                    "<p>To fix this, update the&nbsp;<code>entity</code>&nbsp;object in the&nbsp;<code>books.addBook</code>&nbsp;function of&nbsp;<code>books.js</code>&nbsp;to include the&nbsp;<code>userId</code>&nbsp;when provided:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-5-user-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code>  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">userId</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "    entity</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">.</span><span class=\"pln\">userId </span><span class=\"pun\">=</span><span class=\"pln\"> userId</span><span class=\"pun\">;</span></code></pre>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> addBook</span><span class=\"pun\">(</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">,</span><span class=\"pln\"> coverImageData</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> entity </span><span class=\"pun\">=</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    key</span><span class=\"pun\">:</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">key</span><span class=\"pun\">(</span><span class=\"str\">'Book'</span><span class=\"pun\">),</span><span class=\"pln\">\n" +
                    "    data</span><span class=\"pun\">:</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "      title</span><span class=\"pun\">:</span><span class=\"pln\"> title</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "      author</span><span class=\"pun\">:</span><span class=\"pln\"> author</span><span class=\"pun\">,</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">};</span>\n" +
                    "  \n" +
                    "  <span class=\"com\">// Add the code here</span>\n" +
                    "\n" +
                    "\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">coverImageData</span><span class=\"pun\">)</span>\n" +
                    "    <span class=\"com\">// ...</span></code></pre>\n" +
                    "<p>Now, books created by authenticated users will be associated with the books they add. This means we can query Datastore to list only the books added by that user.</p>\n" +
                    "<p>The sample application displays a&nbsp;<strong>My Library</strong>&nbsp;link when a user is signed in. When clicked, only books owned by the user are displayed.</p>\n" +
                    "<p>A user's books are fetched by calling&nbsp;<code>books.getUserBooks</code>&nbsp;in&nbsp;<code>books.js</code>.</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/start/app.js\" target=\"_blank\">app.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">/* Fetch books created by the currently logged in user and display them */</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/mine'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span> <span class=\"kwd\">next</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(!</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span><span class=\"pln\"> res</span><span class=\"pun\">.</span><span class=\"pln\">redirect</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "  books</span><span class=\"pun\">.</span><span class=\"pln\">getUsersBooks</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span> <span class=\"kwd\">return</span> <span class=\"kwd\">next</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "    res</span><span class=\"pun\">.</span><span class=\"pln\">render</span><span class=\"pun\">(</span><span class=\"str\">'index'</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\"> books</span><span class=\"pun\">:</span><span class=\"pln\"> books</span><span class=\"pun\">,</span><span class=\"pln\"> user</span><span class=\"pun\">:</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">session</span><span class=\"pun\">.</span><span class=\"pln\">user </span><span class=\"pun\">});</span> \n" +
                    "  <span class=\"pun\">});</span> \n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>Sign into the application and click on&nbsp;<strong>My Library</strong>. You will receive an error:</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>Error: books.getUsersBooks [Not Yet Implemented]</p>\n" +
                    "</aside>\n" +
                    "<p>Let's fix that!</p>\n" +
                    "<p>Currently, the&nbsp;<code>getUserBooks</code>&nbsp;function in&nbsp;<code>books.js</code>&nbsp;is a placeholder that simply returns an error:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-5-user-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> getUserBooks</span><span class=\"pun\">(</span><span class=\"pln\">userId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  callback</span><span class=\"pun\">(</span><span class=\"kwd\">new</span> <span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">'books.getUserBooks [Not Yet Implemented]'</span><span class=\"pun\">));</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>books.js</code>&nbsp;file and replace the&nbsp;<code>getUserBooks</code>&nbsp;function with the following:</p>\n" +
                    "<h3><a href=\"https://github.com/googlecodelabs/cloud-nodejs/blob/master/step-5-user-books/books.js\" target=\"_blank\">books.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">function</span><span class=\"pln\"> getUserBooks</span><span class=\"pun\">(</span><span class=\"pln\">userId</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> query </span><span class=\"pun\">=</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">createQuery</span><span class=\"pun\">([</span><span class=\"str\">'Book'</span><span class=\"pun\">]).</span><span class=\"pln\">filter</span><span class=\"pun\">(</span><span class=\"str\">'userId'</span><span class=\"pun\">,</span> <span class=\"str\">'='</span><span class=\"pun\">,</span><span class=\"pln\"> userId</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "  datastore</span><span class=\"pun\">.</span><span class=\"pln\">runQuery</span><span class=\"pun\">(</span><span class=\"pln\">query</span><span class=\"pun\">,</span> <span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">)</span> <span class=\"pun\">=&gt;</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">,</span><span class=\"pln\"> datastore</span><span class=\"pun\">.</span><span class=\"pln\">KEY</span><span class=\"pun\">));</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>To refine queries, the Datastore&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query\" target=\"_blank\"><code>Query</code></a>&nbsp;object provides functions such as&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query?method=filter\" target=\"_blank\"><code>filter</code></a>,&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query?method=groupBy\" target=\"_blank\"><code>groupBy</code></a>,&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query?method=limit\" target=\"_blank\"><code>limit</code></a>,&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query?method=offset\" target=\"_blank\"><code>offset</code></a>, and&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.34.0/datastore/query?method=hasAncestor\" target=\"_blank\"><code>hasAncestor</code></a>.</p>\n" +
                    "</aside>\n" +
                    "<p>Restart the node application, sign in, and click on the&nbsp;<strong>My Library</strong>&nbsp;link. This should now list only the books you've added!</p>\n" +
                    "<p>If you haven't added any books, you will see \"<em>There are no books!</em>\". In this case, sign in (if you haven't already), add a book, and then click the &lsquo;My Library' link again to view the list of only books you have added.</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you associated books with the user who created them and queried books from Datastore, filtering them by the&nbsp;<code>userId</code>&nbsp;property.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec6Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec6Node4);

            Section sec7Node4 = new Section();
            sec7Node4.setOrdinalNumber(7);
            sec7Node4.setDescription("Create a Kubernetes cluster on Google Container Engine");
            sec7Node4.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Now that the Docker image is in Google Container Registry, you can run the&nbsp;<a href=\"https://cloud.google.com/container-registry/docs/pulling\" target=\"_blank\"><code>gcloud docker -- pull</code>&nbsp;command</a>&nbsp;to save this image on any machine and run it with the Docker command-line tool.</p>\n" +
                    "<p>If you want to make sure your bot keeps running after it is started, you'll have to run another service to monitor your Docker container and restarts it if it stops. This gets even harder if you want to make sure the bot keeps running even if the machine it is running on fails.</p>\n" +
                    "<p><a href=\"https://kubernetes.io/\" target=\"_blank\">Kubernetes</a>&nbsp;solves these problems. You tell it that you want there to always be a replica of your bot running, and the Kubernetes master will keep that target state. It starts the bot up when there aren't enough running, and shuts bot replicas down when there are too many.</p>\n" +
                    "<p>A Container Engine cluster is a managed Kubernetes cluster. It consists of a Kubernetes master API server hosted by Google and a set of worker nodes. The worker nodes are Compute Engine virtual machines.</p>\n" +
                    "<ul>\n" +
                    "<li>Create a cluster with two&nbsp;<a href=\"https://cloud.google.com/compute/docs/machine-types\" target=\"_blank\"><code>n1-standard-1</code></a>&nbsp;nodes (this will take a few minutes to complete):</li>\n" +
                    "</ul>\n" +
                    "<pre>gcloud container clusters create my-cluster \\\n" +
                    "      --num-nodes=2 \\\n" +
                    "      --zone=us-central1-f \\\n" +
                    "      --machine-type n1-standard-1</pre>\n" +
                    "<h3>Command output</h3>\n" +
                    "<pre>Creating cluster my-cluster...done.\n" +
                    "Created [https://container.googleapis.com/v1/projects/PROJECT_ID/zones/us-central1-f/clusters/my-cluster].\n" +
                    "kubeconfig entry generated for my-cluster.\n" +
                    "NAME        ZONE           MACHINE_TYPE   NUM_NODES  STATUS\n" +
                    "my-cluster  us-central1-f  n1-standard-1  2          RUNNING</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Alternatively, you could create this cluster via the Cloud Console:&nbsp;<em>Container Engine &gt; Container Clusters &gt; New container cluster</em>.</p>\n" +
                    "<p>If you use the Cloud Console to create the cluster, run&nbsp;<code>gcloud container clusters get-credentials my-cluster --zone=us-central1-f</code>&nbsp;to authenticate Cloud Shell with the cluster credentials.</p>\n" +
                    "</aside>\n" +
                    "<p>This command creates the cluster and authenticates the Kubernetes command-line tool,&nbsp;<code>kubectl</code>, with the new cluster's credentials.</p>\n" +
                    "<p>You should now have a fully-functioning Kubernetes cluster powered by Google Container Engine. View it in the Cloud Console at&nbsp;<a href=\"https://console.cloud.google.com/kubernetes/list\" target=\"_blank\"><em>Container Engine &gt; Container Clusters</em></a>.</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-slack-bot/img/502cd21bca1660ca.png\" /></p>\n" +
                    "<p>Each node in the cluster is a Compute Engine instance provisioned with Kubernetes and Docker binaries. If you are curious, you can list all Compute Engine instances in the project:</p>\n" +
                    "<pre>gcloud compute instances list</pre>\n" +
                    "<h3>Command output</h3>\n" +
                    "<pre>NAME           ZONE          MACHINE_TYPE  INTERNAL_IP EXTERNAL_IP     STATUS\n" +
                    "gke-my-cl...16 us-central1-f n1-standard-1 10.240.0.2  146.148.100.240 RUNNING\n" +
                    "gke-my-cl...34 us-central1-f n1-standard-1 10.240.0.3  104.154.36.108  RUNNING</pre>\n" +
                    "<p>You won't use anything Compute Engine-specific in the rest of the tutorial. Instead, you'll use&nbsp;<code>kubectl</code>, the Kubernetes command-line tool, to configure and run your bot.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec7Node4.setLesson(nodeJsLesson4);
            nodeJsLesson4.getSections().add(sec7Node4);

            Section sec1Node5 = new Section();
            sec1Node5.setOrdinalNumber(1);
            sec1Node5.setDescription("Overview");
            sec1Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p><a href=\"http://www.grpc.io/\" target=\"_blank\">gRPC</a>&nbsp;is a language-neutral, platform-neutral remote procedure call (RPC) framework and toolset developed at Google. It lets you define a service using Protocol Buffers, a particularly powerful binary serialization toolset and language. It then lets you generate idiomatic client and server stubs from your service definition in a variety of languages.</p>\n" +
                    "<p>In this codelab, you'll learn how to build a Node.js service that exposes an API using the gRPC framework. You'll interact with this service using a command line client written in Go that uses the same service description as the Node.js service. Finally, you will write a Node.js command line client for the gRPC service.</p>\n" +
                    "<h3 class=\"checklist\"><strong>What you'll learn</strong></h3>\n" +
                    "<ul class=\"checklist\">\n" +
                    "<li>The Protocol Buffer Language</li>\n" +
                    "<li>How to implement a gRPC service using Node.js</li>\n" +
                    "<li>How to implement a gRPC client using Node.js</li>\n" +
                    "</ul>\n" +
                    "<h3>What you'll need<strong>&nbsp;- We will install those along the way</strong></h3>\n" +
                    "<ul>\n" +
                    "<li>Node.js</li>\n" +
                    "<li>Go</li>\n" +
                    "<li>Protoc</li>\n" +
                    "</ul>\n" +
                    "<div class=\"survey style-scope google-codelab-survey\">\n" +
                    "<h4>How will you use use this tutorial?</h4>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Read it through only</div>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Read it and complete the exercises</div>\n" +
                    "<h4>How would you rate your experience with building Node.js apps?</h4>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Novice</div>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Intermediate</div>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Proficient</div>\n" +
                    "<h4>How would you rate your experience with building Go apps?</h4>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Novice</div>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Intermediate</div>\n" +
                    "<div id=\"radioContainer\" class=\"style-scope paper-radio-button\">\n" +
                    "<div id=\"offRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "<div id=\"onRadio\" class=\"style-scope paper-radio-button\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "<div id=\"radioLabel\" class=\"style-scope paper-radio-button\">Proficient</div>\n" +
                    "</div>\n" +
                    "</li>\n" +
                    "</ul>");
            sec1Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec1Node5);

            Section sec2Node5 = new Section();
            sec2Node5.setOrdinalNumber(2);
            sec2Node5.setDescription("Setup and Requirements");
            sec2Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<h2><strong>Self-paced environment setup</strong></h2>\n" +
                    "<p>If you don't already have a Google Account (Gmail or Google Apps), you must&nbsp;<a href=\"https://accounts.google.com/SignUp\" target=\"_blank\">create one</a>. Sign-in to Google Cloud Platform console (<a href=\"http://console.cloud.google.com/\" target=\"_blank\">console.cloud.google.com</a>) and create a new project:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-grpc/img/3c50189ec031c0cf.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-grpc/img/a52f5c4efa9fc84d.png\" /></p>\n" +
                    "<p>Remember the project ID, a unique name across all Google Cloud projects (the name above has already been taken and will not work for you, sorry!). It will be referred to later in this codelab as&nbsp;<code>PROJECT_ID</code>.</p>\n" +
                    "<p>Next, you'll need to&nbsp;<a href=\"https://console.developers.google.com/billing\" target=\"_blank\">enable billing</a>&nbsp;in the Developers Console in order to use Google Cloud resources and&nbsp;<a href=\"https://console.developers.google.com/project/_/kubernetes/list\" target=\"_blank\">enable the Container Engine API</a>.</p>\n" +
                    "<p>Running through this codelab shouldn't cost you more than a few dollars, but it could be more if you decide to use more resources or if you leave them running (see \"cleanup\" section at the end of this document). Google Container Engine pricing is documented&nbsp;<a href=\"https://cloud.google.com/container-engine/docs/#pricing\" target=\"_blank\">here</a>.</p>\n" +
                    "<p>New users of Google Cloud Platform are eligible for a&nbsp;<a href=\"https://console.developers.google.com/billing/freetrial?hl=en\" target=\"_blank\">$300 free trial</a>.</p>\n" +
                    "<h2><strong>Google Cloud Shell</strong></h2>\n" +
                    "<p>While this codelab can be operated from your computer, in this codelab we will be using&nbsp;<a href=\"https://cloud.google.com/cloud-shell/\" target=\"_blank\">Google Cloud Shell</a>, a command line environment running in the Cloud.</p>\n" +
                    "<p>This Debian-based virtual machine is loaded with all the development tools you'll need. It offers a persistent 5GB home directory, and runs on the Google Cloud, greatly enhancing network performance and authentication. This means that all you will need for this codelab is a browser (yes, it works on a Chromebook).</p>\n" +
                    "<p>To activate Google Cloud Shell, from the developer console simply click the button on the top right-hand side (it should only take a few moments to provision and connect to the environment):</p>\n" +
                    "<p><img src=\"https://lh4.googleusercontent.com/aTWW5eqtihrAnSHQEocSQagOiQ_5WrQ412SqbeUwuTy7gdeDYp9PuExUS1W_ZTJUqXUWTiI9az55Gq3k7_7VPRUpT6v1mQyLj1hKPn-Qhtj6AZDs82NfZOesWucAPzqqTXG4Iq8q\" /></p>\n" +
                    "<p>Then accept the terms of service and click the \"Start Cloud Shell\" link:</p>\n" +
                    "<p><img src=\"https://lh4.googleusercontent.com/JAYYQ2Or-2dVym1jWtAwnF7wrK1GxMsxUKIsLggOTkmtKMx0noCE_UdUN6vizw5MYrQtQuIKQxHoV2wTS2DhLqcNlgCvMzg9-Zc8mRsdU63QR2NnZXb-FaV-fO5JTBrD7T66Jofo\" /></p>\n" +
                    "<p><img src=\"https://lh6.googleusercontent.com/MlVK1apzXKq0v4faXqeuirITzJfezMoFVIghY9_OpVQNYnYollNKtiCLAwnZ2XCeI9qOwqN1k5dsi7zRFgC5EXXOwlSBUo8RWFLBMKN8VJDL544MzIcxv-x6Cm8tAiE0sNzgXpAP\" /></p>\n" +
                    "<p>Once connected to the cloud shell, you should see that you are already authenticated and that the project is already set to your&nbsp;<code>PROJECT_ID</code>&nbsp;:</p>\n" +
                    "<pre>gcloud auth list</pre>\n" +
                    "<h3><strong>Command output</strong></h3>\n" +
                    "<pre>Credentialed accounts:\n" +
                    " - &lt;myaccount&gt;@&lt;mydomain&gt;.com (active)</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong><code>gcloud</code>&nbsp;is the powerful and unified command-line tool for Google Cloud Platform. Full documentation is available from&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">https://cloud.google.com/sdk/gcloud</a>. It comes pre-installed on CloudShell and you will surely enjoy its support for tab-completion.</p>\n" +
                    "</aside>\n" +
                    "<pre>gcloud config list project</pre>\n" +
                    "<h3><strong>Command output</strong></h3>\n" +
                    "<pre>[core]\n" +
                    "project = &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>If for some reason the project is not set, simply issue the following command :</p>\n" +
                    "<pre>gcloud config set project &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>Looking for your&nbsp;<code>PROJECT_ID</code>? Check out what ID you used in the setup steps or look it up in the console dashboard:</p>\n" +
                    "<p><img src=\"https://lh4.googleusercontent.com/_c-lkHjF_mx4O5NYDoPlScyjQgkAWpynuDznqW8gR7-UseawO-81H49x-ZbtX4d6bU8N9TUDboJT4VRSiBP_Hhxr3YcwuLO8PdlPAvdA0oX7iYgQS1DPkKM-03PTWQpZiDZjjWDU\" /></p>\n" +
                    "<p>IMPORTANT: Finally, set the default zone and project configuration:</p>\n" +
                    "<pre>gcloud config set compute/zone us-central1-f</pre>\n" +
                    "<p>You can choose a variety of different zones. Learn more in the&nbsp;<a href=\"https://cloud.google.com/compute/docs/regions-zones/regions-zones\" target=\"_blank\">Regions &amp; Zones documentation</a>.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>When you run&nbsp;<code>gcloud</code>&nbsp;on your own machine, the config settings would've been persisted across sessions. But in Cloud Shell, you will need to set this for every new session or reconnection.</p>\n" +
                    "</aside>\n" +
                    "</li>\n" +
                    "</ul>");
            sec2Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec2Node5);

            Section sec3Node5 = new Section();
            sec3Node5.setOrdinalNumber(3);
            sec3Node5.setDescription("Get things set up");
            sec3Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>To run the sample application, the following dependencies are required:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://git-scm.com/\" target=\"_blank\">Git</a></li>\n" +
                    "<li><a href=\"https://nodejs.org/\" target=\"_blank\">Node.js</a></li>\n" +
                    "<li><a href=\"https://golang.org/\" target=\"_blank\">Go</a></li>\n" +
                    "<li><a href=\"http://www.grpc.io/docs/quickstart/go.html#install-protocol-buffers-v3\" target=\"_blank\">Protoc</a>&nbsp;&gt;= 3.0.0</li>\n" +
                    "</ul>\n" +
                    "<p>All these dependencies have been pre-installed for you on&nbsp;<a href=\"https://cloud.google.com/cloud-shell/\" target=\"_blank\">Google Cloud Shell</a>&nbsp;which we will use for this codelab.</p>\n" +
                    "<p>Go to the&nbsp;<a href=\"https://console.cloud.google.com/\" target=\"_blank\">Developer Console</a>, it should automatically log you in based on your provided login. If you get asked for a username/password, please reuse the credentials we provided to you.</p>\n" +
                    "<p>You need to accept the terms of service before you'll be redirected to the Developer Console.</p>\n" +
                    "<p>In the upper right corner you'll see the Cloud Shell symbol&nbsp;<img src=\"https://codelabs.developers.google.com/codelabs/cloud-grpc/img/86b373e02f19c722.png\" />. Click on it to open your very own Cloud Shell session. All following command line instructions are executed in the Cloud Shell session.</p>\n" +
                    "<p>You can open additional Cloud Shell sessions by clicking on \"+\" in the Cloud Shell sessions tab bar&nbsp;<img src=\"https://codelabs.developers.google.com/codelabs/cloud-grpc/img/38cc44dcc867054c.png\" />.</p>\n" +
                    "<p>So you're ready to get started!</p>\n" +
                    "<h2>Summary</h2>\n" +
                    "<p>In this step, you set up your development environment.</p>\n" +
                    "<h2>Next up</h2>\n" +
                    "<p>Next, you will download and run the sample application.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec3Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec3Node5);

            Section sec4Node5 = new Section();
            sec4Node5.setOrdinalNumber(4);
            sec4Node5.setDescription("Get the sample");
            sec4Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>Clone the GitHub repository from the command line:</p>\n" +
                    "<pre>git clone https://github.com/googlecodelabs/cloud-grpc</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>The source for this codelab is in&nbsp;<code>cloud-grpc/start</code>.</p>\n" +
                    "</aside>\n" +
                    "<p>Sample project layout:</p>\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Name</strong></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><strong>Description</strong></p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>client.go</code></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p>Command-line client for the server API.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "<tr>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p><code>books/books.pb.go</code></p>\n" +
                    "</td>\n" +
                    "<td colspan=\"1\" rowspan=\"1\">\n" +
                    "<p>go library for the books gRPC service.</p>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "<h3>Run the sample application</h3>\n" +
                    "<p>The sample application folder contains&nbsp;<a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/start/client.go\" target=\"_blank\"><code>client.go</code></a>, a command-line client for interacting with the gRPC service that you will create in this codelab.</p>\n" +
                    "<p>To run the command-line client, first install the Go&nbsp;<code>grpc</code>&nbsp;package:</p>\n" +
                    "<pre>$ go get -u google.golang.org/grpc</pre>\n" +
                    "<p>Now, from the project directory, run the command-line client with no arguments to view the available commands:</p>\n" +
                    "<pre>$ go run client.go \n" +
                    "client.go is a command-line client for this codelab's gRPC service\n" +
                    "\n" +
                    "Usage:\n" +
                    "  client.go list                            List all books\n" +
                    "  client.go insert &lt;id&gt; &lt;title&gt; &lt;author&gt;    Insert a book\n" +
                    "  client.go get &lt;id&gt;                        Get a book by its ID\n" +
                    "  client.go delete &lt;id&gt;                     Delete a book by its ID\n" +
                    "  client.go watch                           Watch for inserted books</pre>\n" +
                    "<p>Try calling one of the available commands:</p>\n" +
                    "<pre>$ go run client.go list</pre>\n" +
                    "<p>You will see a list of errors after a few seconds because the node gRPC server does not yet exist!</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>grpc: addrConn.resetTransport failed to create client transport: connection error: desc = \"transport: Error while dialing dial tcp 0.0.0.0:50051: getsockopt: connection refused\"; Reconnecting to {0.0.0.0:50051 &lt;nil&gt;}<br />2017/06/30 13:02:03 List books: rpc error: code = Unavailable desc = grpc: the connection is unavailable<br />exit status 1</p>\n" +
                    "</aside>\n" +
                    "<p>Let's fix this!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you set up and ran the codelab sample application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will implement a Node.js gRPC service that lists books.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec4Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec4Node5);

            Section sec5Node5 = new Section();
            sec5Node5.setOrdinalNumber(5);
            sec5Node5.setDescription("List all books");
            sec5Node5.setContent("In this step you will write the code to implement a Node.js gRPC service that lists books.\n" +
                    "\n" +
                    "gRPC services are defined in .proto files using the protocol buffer language.\n" +
                    "\n" +
                    "The Protocol Buffers Language Guide documents the .proto file format.\n" +
                    "\n" +
                    "The protocol buffer language is used to define services and message types.\n" +
                    "\n" +
                    "Let's start by defining a service for books!\n" +
                    "\n" +
                    "In the project directory cloud-grpc/start, create a new file called books.proto and add the following:\n" +
                    "\n" +
                    "books.proto\n" +
                    "syntax = \"proto3\";\n" +
                    "\n" +
                    "package books;\n" +
                    "\n" +
                    "service BookService {\n" +
                    "  rpc List (Empty) returns (Empty) {}\n" +
                    "}\n" +
                    "\n" +
                    "message Empty {}\n" +
                    "This defines a new service called BookService using the proto3 version of the protocol buffers language. This is the latest version of protocol buffers and is recommended for use with gRPC.\n" +
                    "\n" +
                    "To run this service with node, first install the grpc npm package:\n" +
                    "\n" +
                    "$ npm install grpc\n" +
                    "The grpc node package is gRPC library for Node.js.\n" +
                    "\n" +
                    "Now, still in our working directory cloud-grpc/start, let's build the Node.js service by starting with a new file called server.js and add the following:\n" +
                    "\n" +
                    "server.js\n" +
                    "var grpc = require('grpc');\n" +
                    "\n" +
                    "var booksProto = grpc.load('books.proto');\n" +
                    "\n" +
                    "var server = new grpc.Server();\n" +
                    "\n" +
                    "server.addService(booksProto.books.BookService.service, {});\n" +
                    "\n" +
                    "server.bind('0.0.0.0:50051',\n" +
                    "  grpc.ServerCredentials.createInsecure());\n" +
                    "console.log('Server running at http://0.0.0.0:50051');\n" +
                    "server.start();\n" +
                    "This code snippet creates and starts a new gRPC server with the books proto service descriptor and binds to port 50051 with a credentials object.\n" +
                    "\n" +
                    "gRPC services work on any port but 50051 is conventional to use. See: Node.js gRPC service examples.\n" +
                    "\n" +
                    "Open a 2nd Cloud Shell session where we will run the service. Navigate to your working directory and run the server:\n" +
                    "\n" +
                    "$ node server.js\n" +
                    "Now run the go gRPC command-line client in your other Cloud Shell Session again to test the server API:\n" +
                    "\n" +
                    "$ go run client.go list\n" +
                    "This time, you will see a new error:\n" +
                    "\n" +
                    "rpc error: code = Unimplemented desc = The server does not implement this method\n" +
                    "\n" +
                    "Great! This means that the server is running and the go client communicated with it over gRPC!\n" +
                    "\n" +
                    "Let's fix this by implementing a List method!\n" +
                    "\n" +
                    "List books\n" +
                    "In the project directory, edit books.proto and update BookService with the following code:\n" +
                    "\n" +
                    "books.proto\n" +
                    "syntax = \"proto3\";\n" +
                    "\n" +
                    "package books;\n" +
                    "\n" +
                    "service BookService {\n" +
                    "  rpc List (Empty) returns (BookList) {}\n" +
                    "}\n" +
                    "\n" +
                    "message Empty {} \n" +
                    "\n" +
                    "message Book {\n" +
                    "  int32 id = 1;\n" +
                    "  string title = 2;\n" +
                    "  string author = 3;\n" +
                    "}\n" +
                    "\n" +
                    "message BookList {\n" +
                    "  repeated Book books = 1;\n" +
                    "}\n" +
                    "Each service rpc method accepts a (request) message and returns a (response) message.\n" +
                    "\n" +
                    "Making a request to List books requires no parameters so the request message for List has no fields (as defined by the Empty message).\n" +
                    "\n" +
                    "The Book message represents a single book object with id, title, and author fields.\n" +
                    "\n" +
                    "The numbers assigned to each field are unique numbered tags. These tags are used to identify your fields in the message binary format.\n" +
                    "\n" +
                    "Two scalar types, int32 and string, are used in this example. Scalar Value Types lists all available types.\n" +
                    "\n" +
                    "List returns a repeated list of Book messages. repeated specifies that this message can be repeated any number of times.\n" +
                    "\n" +
                    "Now update the Node.js application to respond to calls to the List method of the BookService.\n" +
                    "\n" +
                    "Edit the server.js file and add the following code, replacing the current var server and updating the server.addService with the following:\n" +
                    "\n" +
                    "server.js\n" +
                    "// In-memory array of book objects\n" +
                    "var books = [ \n" +
                    "  { id: 123, title: 'A Tale of Two Cities', author: 'Charles Dickens' }\n" +
                    "];\n" +
                    "\n" +
                    "var server = new grpc.Server();\n" +
                    "server.addService(booksProto.books.BookService.service, {\n" +
                    "    list: function(call, callback) {\n" +
                    "        callback(null, books);\n" +
                    "    }\n" +
                    "});\n" +
                    "To register handlers for gRPC service methods, handler functions are passed into the Server constructor for each method. When the service method is invoked, the handler function is called with a call object representing the request message. To respond to the method, call callback providing an error object (or null) and an object representing the response message. In this case, we return a JavaScript object with fields matching those defined in book.proto for the Book message type.\n" +
                    "\n" +
                    "This implements the List rpc call, returning a Book message.\n" +
                    "\n" +
                    "To test this, stop your running node process in your 2nd Cloud Shell session by pressing CTRL-C and run it again:\n" +
                    "\n" +
                    "$ node server.js\n" +
                    "To avoid restarting your node process to view file changes during development, you can run your application using the nodemon utility.\n" +
                    "\n" +
                    "$ npm install nodemon\n" +
                    "\n" +
                    "$ nodemon server.js\n" +
                    "\n" +
                    "Switch back to your other shell session and run the go gRPC command-line client again:\n" +
                    "\n" +
                    "$ go run client.go list\n" +
                    "You should now see this book listed!\n" +
                    "\n" +
                    "Got 1 books.\n" +
                    "{\n" +
                    "  \"books\": [\n" +
                    "    {\n" +
                    "      \"id\": 123,\n" +
                    "      \"title\": \"A Tale of Two Cities\",\n" +
                    "      \"author\": \"Charles Dickens\"\n" +
                    "    }\n" +
                    "  ]\n" +
                    "}\n" +
                    "Summary\n" +
                    "In this step, you implemented a gRPC service that lists books.\n" +
                    "\n" +
                    "Next up\n" +
                    "Next, you will insert new books via gRPC calls.");
            sec5Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec5Node5);

            Section sec6Node5 = new Section();
            sec6Node5.setOrdinalNumber(6);
            sec6Node5.setDescription("Insert new books");
            sec6Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this step you will write the code to implement adding new&nbsp;<code>Book</code>&nbsp;objects via the gRPC service.</p>\n" +
                    "<p>To begin, edit&nbsp;<code>books.proto</code>&nbsp;and update&nbsp;<code>BookService</code>&nbsp;to the following:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-2-insert-books/books.proto\" target=\"_blank\">books.proto</a></h3>\n" +
                    "<pre><code><span class=\"pln\">service </span><span class=\"typ\">BookService</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">List</span> <span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">BookList</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "  <span class=\"com\">// add the following line</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Insert</span> <span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>This defines a new&nbsp;<code>Insert</code>&nbsp;rpc call that takes a&nbsp;<code>Book</code>&nbsp;message as its request and returns an&nbsp;<code>Empty</code>&nbsp;response.</p>\n" +
                    "<p>To implement the&nbsp;<code>Insert</code>&nbsp;method in the server, edit&nbsp;<code>server.js</code>&nbsp;and add the insert method to the function map in<code>addService</code>:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-2-insert-books/server.js\" target=\"_blank\">server.js</a></h3>\n" +
                    "<pre><code><span class=\"pln\">server</span><span class=\"pun\">.</span><span class=\"pln\">addService</span><span class=\"pun\">(</span><span class=\"pln\">booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">.</span><span class=\"pln\">service</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    list</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">call</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "        callback</span><span class=\"pun\">(</span><span class=\"kwd\">null</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">);</span>\n" +
                    "    <span class=\"pun\">},</span>\n" +
                    "    <span class=\"com\">// add the insert method</span><span class=\"pln\">\n" +
                    "    insert</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">call</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "        <span class=\"kwd\">var</span><span class=\"pln\"> book </span><span class=\"pun\">=</span><span class=\"pln\"> call</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">;</span><span class=\"pln\">\n" +
                    "        books</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "        callback</span><span class=\"pun\">(</span><span class=\"kwd\">null</span><span class=\"pun\">,</span> <span class=\"pun\">{});</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>The added&nbsp;<code>insert</code>&nbsp;function implements the&nbsp;<code>Insert</code>&nbsp;rpc call, adding the received&nbsp;<code>Book</code>&nbsp;message to the&nbsp;<code>books</code>array and returning an&nbsp;<code>Empty</code>&nbsp;message.</p>\n" +
                    "<p>Handler functions access the request message via&nbsp;<code>call.request</code>. In this case,&nbsp;<code>call.request</code>&nbsp;is a JavaScript object with&nbsp;<code>id</code>,&nbsp;<code>title</code>, and&nbsp;<code>author</code>&nbsp;fields representing a&nbsp;<code>Book</code>&nbsp;message.</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>Note: because&nbsp;<code>books</code>&nbsp;is a simple in-memory array, it will be reset every time the node process is restarted.</p>\n" +
                    "</aside>\n" +
                    "<p>To test this, restart the node server and then run the go gRPC command-line client's&nbsp;<code>insert</code>&nbsp;command, passing&nbsp;<code>id</code>,&nbsp;<code>title</code>, and&nbsp;<code>author</code>&nbsp;as arguments:</p>\n" +
                    "<pre>$ go run client.go insert 2 \"The Three Musketeers\" \"Alexandre Dumas\"</pre>\n" +
                    "<p>You should see an empty response:</p>\n" +
                    "<pre><code><span class=\"typ\">Server</span><span class=\"pln\"> response</span><span class=\"pun\">:</span>\n" +
                    "<span class=\"pun\">{}</span></code></pre>\n" +
                    "<p>To verify that the book was inserted, run the&nbsp;<code>list</code>&nbsp;command again to see all books:</p>\n" +
                    "<pre>$ go run client.go list</pre>\n" +
                    "<p>You should now see 2 books listed!</p>\n" +
                    "<pre><code><span class=\"typ\">Got</span> <span class=\"lit\">2</span><span class=\"pln\"> books</span><span class=\"pun\">.</span>\n" +
                    "<span class=\"pun\">{</span>\n" +
                    "  <span class=\"str\">\"books\"</span><span class=\"pun\">:</span> <span class=\"pun\">[</span>\n" +
                    "    <span class=\"pun\">{</span>\n" +
                    "      <span class=\"str\">\"id\"</span><span class=\"pun\">:</span> <span class=\"lit\">123</span><span class=\"pun\">,</span>\n" +
                    "      <span class=\"str\">\"title\"</span><span class=\"pun\">:</span> <span class=\"str\">\"A Tale of Two Cities\"</span><span class=\"pun\">,</span>\n" +
                    "      <span class=\"str\">\"author\"</span><span class=\"pun\">:</span> <span class=\"str\">\"Charles Dickens\"</span>\n" +
                    "    <span class=\"pun\">},</span>\n" +
                    "    <span class=\"pun\">{</span>\n" +
                    "      <span class=\"str\">\"id\"</span><span class=\"pun\">:</span> <span class=\"lit\">2</span><span class=\"pun\">,</span>\n" +
                    "      <span class=\"str\">\"title\"</span><span class=\"pun\">:</span> <span class=\"str\">\"The Three Musketeers\"</span><span class=\"pun\">,</span>\n" +
                    "      <span class=\"str\">\"author\"</span><span class=\"pun\">:</span> <span class=\"str\">\"Alexandre Dumas\"</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">]</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you extended the gRPC service to support adding books.</p>\n" +
                    "<h2>Next up</h2>\n" +
                    "<p>Next, you will extend the gRPC service further to support getting and deleting individual books</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec6Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec6Node5);

            Section sec7Node5 = new Section();
            sec7Node5.setOrdinalNumber(7);
            sec7Node5.setDescription("Get and delete books");
            sec7Node5.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this step you will write the code to get and delete&nbsp;<code>Book</code>&nbsp;objects by&nbsp;<code>id</code>&nbsp;via the gRPC service.</p>\n" +
                    "<p>To begin, edit&nbsp;<code>books.proto</code>&nbsp;and update&nbsp;<code>BookService</code>&nbsp;with the following:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-3-get-and-delete-books/books.proto\" target=\"_blank\">books.proto</a></h3>\n" +
                    "<pre><code><span class=\"pln\">service </span><span class=\"typ\">BookService</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">List</span> <span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">BookList</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Insert</span> <span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "  <span class=\"com\">// add the following line</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Get</span> <span class=\"pun\">(</span><span class=\"typ\">BookIdRequest</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"com\">// add the message definition below</span><span class=\"pln\">\n" +
                    "message </span><span class=\"typ\">BookIdRequest</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  int32 id </span><span class=\"pun\">=</span> <span class=\"lit\">1</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>This defines a new&nbsp;<code>Get</code>&nbsp;rpc call that takes a&nbsp;<code>BookIdRequest</code>&nbsp;as its request and returns a&nbsp;<code>Book</code>&nbsp;as its response.</p>\n" +
                    "<p>A&nbsp;<code>BookIdRequest</code>&nbsp;message type is defined for requests containing only a book's&nbsp;<code>id</code>.</p>\n" +
                    "<p>To implement the&nbsp;<code>Get</code>&nbsp;method in the server, edit&nbsp;<code>server.js</code>&nbsp;and add the following&nbsp;<code>get</code>&nbsp;handler function:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-3-get-and-delete-books/server.js\" target=\"_blank\">server.js</a></h3>\n" +
                    "<pre><code><span class=\"pln\">server</span><span class=\"pun\">.</span><span class=\"pln\">addService</span><span class=\"pun\">(</span><span class=\"pln\">booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">.</span><span class=\"pln\">service</span><span class=\"pun\">,</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"com\">// ...</span>\n" +
                    "    <span class=\"com\">// add the following get method</span>\n" +
                    "    <span class=\"kwd\">get</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">call</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "        <span class=\"kwd\">for</span> <span class=\"pun\">(</span><span class=\"kwd\">var</span><span class=\"pln\"> i </span><span class=\"pun\">=</span> <span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> books</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span>\n" +
                    "            <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">books</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">].</span><span class=\"pln\">id </span><span class=\"pun\">==</span><span class=\"pln\"> call</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">)</span>\n" +
                    "                <span class=\"kwd\">return</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"kwd\">null</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">]);</span><span class=\"pln\">\n" +
                    "        callback</span><span class=\"pun\">({</span><span class=\"pln\">\n" +
                    "            code</span><span class=\"pun\">:</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"pln\">status</span><span class=\"pun\">.</span><span class=\"pln\">NOT_FOUND</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "            details</span><span class=\"pun\">:</span> <span class=\"str\">'Not found'</span>\n" +
                    "        <span class=\"pun\">});</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>If the&nbsp;<code>books</code>&nbsp;array contains a book with the&nbsp;<code>id</code>&nbsp;requested, the book is returned. If no book is found with the requested&nbsp;<code>id</code>, a&nbsp;<code>NOT_FOUND</code>&nbsp;error is returned.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><code>grpc</code>&nbsp;provides build-in status codes for errors, eg.&nbsp;<code>NOT_FOUND</code>,&nbsp;<code>INVALID_ARGUMENT</code>,&nbsp;<code>PERMISSION_DENIED</code>and more.</p>\n" +
                    "<p>You can view a list of available status names&nbsp;<a href=\"https://github.com/grpc/grpc/blob/release-0_11/src/node/test/constant_test.js\" target=\"_blank\">here</a>.</p>\n" +
                    "</aside>\n" +
                    "<p>To test this, restart the node server and then run the go gRPC command-line client's&nbsp;<code>get</code>&nbsp;command, passing&nbsp;<code>id</code>&nbsp;as an argument:</p>\n" +
                    "<pre>$ go run client.go get 123</pre>\n" +
                    "<p>You should see the book response!</p>\n" +
                    "<pre><code><span class=\"typ\">Server</span><span class=\"pln\"> response</span><span class=\"pun\">:</span>\n" +
                    "<span class=\"pun\">{</span>\n" +
                    "  <span class=\"str\">\"id\"</span><span class=\"pun\">:</span> <span class=\"lit\">123</span><span class=\"pun\">,</span>\n" +
                    "  <span class=\"str\">\"title\"</span><span class=\"pun\">:</span> <span class=\"str\">\"A Tale of Two Cities\"</span><span class=\"pun\">,</span>\n" +
                    "  <span class=\"str\">\"author\"</span><span class=\"pun\">:</span> <span class=\"str\">\"Charles Dickens\"</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>Now try getting a book that doesn't exist:</p>\n" +
                    "<pre>$ go run client.go get 404</pre>\n" +
                    "<p>You should see the error message returned:</p>\n" +
                    "<aside class=\"warning\">\n" +
                    "<p>Get book (404): rpc error: code = 5 desc = \"Not found\"</p>\n" +
                    "</aside>\n" +
                    "<h3><strong>Delete books</strong></h3>\n" +
                    "<p>Now you will write the code to delete a book by&nbsp;<code>id</code>.</p>\n" +
                    "<p>Edit&nbsp;<code>books.proto</code>&nbsp;and add the following&nbsp;<code>Delete</code>&nbsp;rpc method:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-3-get-and-delete-books/books.proto\" target=\"_blank\">books.proto</a></h3>\n" +
                    "<pre><code><span class=\"pln\">service </span><span class=\"typ\">BookService</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">// ...</span>\n" +
                    "  <span class=\"com\">// add the delete method definition</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Delete</span> <span class=\"pun\">(</span><span class=\"typ\">BookIdRequest</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>Now edit&nbsp;<code>server.js</code>&nbsp;and add the following&nbsp;<code>delete</code>&nbsp;handler function:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-3-get-and-delete-books/server.js\" target=\"_blank\">server.js</a></h3>\n" +
                    "<pre><code><span class=\"pln\">server</span><span class=\"pun\">.</span><span class=\"pln\">addService</span><span class=\"pun\">(</span><span class=\"pln\">booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">.</span><span class=\"pln\">service</span><span class=\"pun\">,</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"com\">// ...</span>\n" +
                    "    <span class=\"com\">// add the following delete method</span>\n" +
                    "    <span class=\"kwd\">delete</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">call</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "        <span class=\"kwd\">for</span> <span class=\"pun\">(</span><span class=\"kwd\">var</span><span class=\"pln\"> i </span><span class=\"pun\">=</span> <span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> books</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span> <span class=\"pun\">{</span>\n" +
                    "            <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">books</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">].</span><span class=\"pln\">id </span><span class=\"pun\">==</span><span class=\"pln\"> call</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "                books</span><span class=\"pun\">.</span><span class=\"pln\">splice</span><span class=\"pun\">(</span><span class=\"pln\">i</span><span class=\"pun\">,</span> <span class=\"lit\">1</span><span class=\"pun\">);</span>\n" +
                    "                <span class=\"kwd\">return</span><span class=\"pln\"> callback</span><span class=\"pun\">(</span><span class=\"kwd\">null</span><span class=\"pun\">,</span> <span class=\"pun\">{});</span>\n" +
                    "            <span class=\"pun\">}</span>\n" +
                    "        <span class=\"pun\">}</span><span class=\"pln\">\n" +
                    "        callback</span><span class=\"pun\">({</span><span class=\"pln\">\n" +
                    "            code</span><span class=\"pun\">:</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"pln\">status</span><span class=\"pun\">.</span><span class=\"pln\">NOT_FOUND</span><span class=\"pun\">,</span><span class=\"pln\">\n" +
                    "            details</span><span class=\"pun\">:</span> <span class=\"str\">'Not found'</span>\n" +
                    "        <span class=\"pun\">});</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>If the&nbsp;<code>books</code>&nbsp;array contains a book with the&nbsp;<code>id</code>&nbsp;requested, the book is removed, otherwise a&nbsp;<code>NOT_FOUND</code>&nbsp;error is returned.</p>\n" +
                    "<p>To test this, restart the node server and then run the go gRPC command-line client to delete a book:</p>\n" +
                    "<pre>$ go run client.go list\n" +
                    "Server sent 1 book(s).\n" +
                    "{\n" +
                    "  \"books\": [\n" +
                    "    {\n" +
                    "      \"id\": 123,\n" +
                    "      \"title\": \"A Tale of Two Cities\",\n" +
                    "      \"author\": \"Charles Dickens\"\n" +
                    "    }\n" +
                    "  ]\n" +
                    "}\n" +
                    "\n" +
                    "$ go run client.go delete 123\n" +
                    "Server response:\n" +
                    "{}\n" +
                    "\n" +
                    "$ go run client.go list\n" +
                    "Server sent 0 book(s).\n" +
                    "{}\n" +
                    "\n" +
                    "$ go run client.go delete 123\n" +
                    "Delete book (123): rpc error: code = 5 desc = \"Not found\"</pre>\n" +
                    "<p>Great!</p>\n" +
                    "<p>You implemented a fully functioning gRPC service that can list, insert, get, and delete books!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you extended the gRPC service to support getting and deleting books.</p>\n" +
                    "<h2>Next up</h2>\n" +
                    "<p>Next, you will add the ability for the client to connect to a stream that will receive books when they are inserted.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec7Node5.setLesson(nodeJsLesson5);
            nodeJsLesson5.getSections().add(sec7Node5);

            Section sec1Node6 = new Section();
            sec1Node6.setOrdinalNumber(1);
            sec1Node6.setDescription("Stream added books");
            sec1Node6.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this step you will write the code to add a streaming endpoint to the service so the client can establish a stream to the server and listen for added books.</p>\n" +
                    "<p>gRPC supports&nbsp;<a href=\"https://github.com/grpc/grpc#streaming\" target=\"_blank\">streaming semantics</a>, where either the client or the server (or both) send a stream of messages on a single RPC call. The most general case is Bidirectional Streaming where a single gRPC call establishes a stream where both the client and the server can send a stream of messages to each other.</p>\n" +
                    "<p>To begin, edit&nbsp;<code>books.proto</code>&nbsp;and add the following&nbsp;<code>Watch</code>&nbsp;rpc method to&nbsp;<code>BookService</code>:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-4-stream-books/books.proto\" target=\"_blank\">books.proto</a></h3>\n" +
                    "<pre><code><span class=\"pln\">service </span><span class=\"typ\">BookService</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">// ...</span>\n" +
                    "  <span class=\"com\">// add the watch method definition</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Watch</span> <span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"pln\">stream </span><span class=\"typ\">Book</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>When the client calls the&nbsp;<code>Watch</code>&nbsp;method, it will establish a stream and server will be able to stream&nbsp;<code>Book</code>&nbsp;messages when books are inserted.</p>\n" +
                    "<p>To implement the&nbsp;<code>Watch</code>&nbsp;method in the server, install the&nbsp;<code>events</code>&nbsp;npm package.</p>\n" +
                    "<pre>$ npm install events</pre>\n" +
                    "<p>Now edit&nbsp;<code>server.js</code>&nbsp;and add the following events package, bookStream event listener and&nbsp;<code>watch</code>&nbsp;handler function:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-4-stream-books/server.js\" target=\"_blank\">server.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">// add the events package</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> events </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'events'</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"com\">// add the bookStream global variable</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> bookStream </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> events</span><span class=\"pun\">.</span><span class=\"typ\">EventEmitter</span><span class=\"pun\">();</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> server </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"typ\">Server</span><span class=\"pun\">();</span><span class=\"pln\">\n" +
                    "server</span><span class=\"pun\">.</span><span class=\"pln\">addService</span><span class=\"pun\">(</span><span class=\"pln\">booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">.</span><span class=\"pln\">service</span><span class=\"pun\">,</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"com\">// ...</span>\n" +
                    "    <span class=\"com\">// add the following watch method</span><span class=\"pln\">\n" +
                    "    watch</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">stream</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "        bookStream</span><span class=\"pun\">.</span><span class=\"pln\">on</span><span class=\"pun\">(</span><span class=\"str\">'new_book'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">){</span><span class=\"pln\">\n" +
                    "            stream</span><span class=\"pun\">.</span><span class=\"pln\">write</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span>\n" +
                    "        <span class=\"pun\">});</span>\n" +
                    "    <span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>Handler functions for streaming rpc methods are invoked with a writable&nbsp;<a href=\"https://nodejs.org/api/stream.html#stream_class_stream_writable\" target=\"_blank\"><code>stream</code></a>&nbsp;object.</p>\n" +
                    "<p>To stream messages to the client, the stream's&nbsp;<code>write()</code>&nbsp;function is called when an&nbsp;<code>new_book</code>&nbsp;event is emitted.</p>\n" +
                    "<p>Edit&nbsp;<code>server.js</code>&nbsp;and update the&nbsp;<code>insert</code>&nbsp;function to emit a&nbsp;<code>new_book</code>&nbsp;event when books are inserted:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-4-stream-books/server.js\" target=\"_blank\">server.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> server </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"typ\">Server</span><span class=\"pun\">();</span><span class=\"pln\">\n" +
                    "server</span><span class=\"pun\">.</span><span class=\"pln\">addService</span><span class=\"pun\">(</span><span class=\"pln\">booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">.</span><span class=\"pln\">service</span><span class=\"pun\">,</span> <span class=\"pun\">{</span>\n" +
                    "    <span class=\"com\">// ...</span><span class=\"pln\">\n" +
                    "    insert</span><span class=\"pun\">:</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">call</span><span class=\"pun\">,</span><span class=\"pln\"> callback</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "        <span class=\"kwd\">var</span><span class=\"pln\"> book </span><span class=\"pun\">=</span><span class=\"pln\"> call</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">;</span><span class=\"pln\">\n" +
                    "        books</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "        <span class=\"com\">// add the following to the insert method</span><span class=\"pln\">\n" +
                    "        bookStream</span><span class=\"pun\">.</span><span class=\"pln\">emit</span><span class=\"pun\">(</span><span class=\"str\">'new_book'</span><span class=\"pun\">,</span><span class=\"pln\"> book</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "\n" +
                    "        callback</span><span class=\"pun\">(</span><span class=\"kwd\">null</span><span class=\"pun\">,</span> <span class=\"pun\">{});</span>\n" +
                    "    <span class=\"pun\">},</span>\n" +
                    "    <span class=\"com\">// ...</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>To test this, restart the node server and then run the go gRPC command-line client's&nbsp;<code>watch</code>&nbsp;command in a 3rd Cloud Shell Session:</p>\n" +
                    "<pre>$ go run client.go watch</pre>\n" +
                    "<p>Now run the go gRPC command-line client's&nbsp;<code>insert</code>&nbsp;command in your main Cloud Shell session to insert a book:</p>\n" +
                    "<pre>$ go run client.go insert 2 \"The Three Musketeers\" \"Alexandre Dumas\"</pre>\n" +
                    "<p>Check the Cloud Shell session where the&nbsp;<code>client.go watch process</code>&nbsp;is running. It should have printed out the inserted book!</p>\n" +
                    "<pre>$ go run client.go watch\n" +
                    "Server stream data received:\n" +
                    "{\n" +
                    "  \"id\": 2,\n" +
                    "  \"title\": \"The Three Musketeers\",\n" +
                    "  \"author\": \"Alexandre Dumas\"\n" +
                    "}</pre>\n" +
                    "<p>Press&nbsp;<strong><code>CTRL-C</code></strong>&nbsp;to exit the&nbsp;<code>client.go watch process</code>.</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you added a streaming gRPC endpoint to the service to stream inserted books to a connected client.</p>\n" +
                    "<h2>Next up</h2>\n" +
                    "<p>Next, you will write a command-line client to interact with your gRPC service.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec1Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec1Node6);

            Section sec2Node6 = new Section();
            sec2Node6.setOrdinalNumber(2);
            sec2Node6.setDescription("Create gRPC client");
            sec2Node6.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<p>In this step, you will write the code to implement a Node.js command-line client that calls your gRPC service.</p>\n" +
                    "<p>The result will be functionally equivalent to the&nbsp;<code>client.go</code>&nbsp;script that you have been using so far in this codelab!</p>\n" +
                    "<p>Start by running the gRPC server again if it isn't running already:</p>\n" +
                    "<pre>$ node server.js</pre>\n" +
                    "<p>Now create a new file called&nbsp;<code>client.js</code>&nbsp;in the project directory and add the following:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-5-node-client/client.js\" target=\"_blank\">client.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> grpc </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'grpc'</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> booksProto </span><span class=\"pun\">=</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"str\">'books.proto'</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> client </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">(</span><span class=\"str\">'127.0.0.1:50051'</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "  grpc</span><span class=\"pun\">.</span><span class=\"pln\">credentials</span><span class=\"pun\">.</span><span class=\"pln\">createInsecure</span><span class=\"pun\">());</span><span class=\"pln\">\n" +
                    "\n" +
                    "client</span><span class=\"pun\">.</span><span class=\"pln\">list</span><span class=\"pun\">({},</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">'Error: '</span><span class=\"pun\">,</span><span class=\"pln\"> error</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"kwd\">else</span><span class=\"pln\">\n" +
                    "    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">books</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"pun\">});</span></code></pre>\n" +
                    "<p>This requires the&nbsp;<code>grpc</code>&nbsp;node module and loads&nbsp;<code>books.proto</code>&nbsp;(<em>exactly like you did in server.js previously</em>).</p>\n" +
                    "<p>The&nbsp;<code>client</code>&nbsp;object for the gRPC service is created by calling the&nbsp;<code>BookService</code>&nbsp;constructor, which is dynamically created from the service definition found in&nbsp;<code>books.proto</code>.</p>\n" +
                    "<p>The&nbsp;<code>list()</code>&nbsp;function takes a request message object as a parameter (<code>{}</code>&nbsp;in this case to represent an&nbsp;<code>Empty</code>message), followed by a callback function that will be invoked with an&nbsp;<code>error</code>&nbsp;object (or&nbsp;<code>null</code>) and a response message object (a&nbsp;<code>Book</code>&nbsp;message in this case).</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/complete/books.proto\" target=\"_blank\">books.proto</a></h3>\n" +
                    "<pre><code><span class=\"pln\">service </span><span class=\"typ\">BookService</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">List</span> <span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">BookList</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Insert</span> <span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Get</span> <span class=\"pun\">(</span><span class=\"typ\">BookIdRequest</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Delete</span> <span class=\"pun\">(</span><span class=\"typ\">BookIdRequest</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span><span class=\"pln\">\n" +
                    "  rpc </span><span class=\"typ\">Watch</span> <span class=\"pun\">(</span><span class=\"typ\">Empty</span><span class=\"pun\">)</span><span class=\"pln\"> returns </span><span class=\"pun\">(</span><span class=\"pln\">stream </span><span class=\"typ\">Book</span><span class=\"pun\">)</span> <span class=\"pun\">{}</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>This means that you can now&nbsp;<code>list()</code>,&nbsp;<code>insert()</code>,&nbsp;<code>get()</code>,&nbsp;<code>delete()</code>, and&nbsp;<code>watch()</code>&nbsp;books!</p>\n" +
                    "<p>Now run the command-line client:</p>\n" +
                    "<pre>$ node client.js list\n" +
                    "{ books: \n" +
                    "   [ { id: 123,\n" +
                    "       title: 'A Tale of Two Cities',\n" +
                    "       author: 'Charles Dickens' } ] }</pre>\n" +
                    "<p>You should see books listed!</p>\n" +
                    "<p>Next, to implement the command-line client, update client.js with functions for&nbsp;<code>list()</code>,&nbsp;<code>insert()</code>,&nbsp;<code>get()</code>, and&nbsp;<code>delete()</code>:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-5-node-client/client.js\" target=\"_blank\">client.js</a></h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> grpc </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'grpc'</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> booksProto </span><span class=\"pun\">=</span><span class=\"pln\"> grpc</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"str\">'books.proto'</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> client </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> booksProto</span><span class=\"pun\">.</span><span class=\"pln\">books</span><span class=\"pun\">.</span><span class=\"typ\">BookService</span><span class=\"pun\">(</span><span class=\"str\">'127.0.0.1:50051'</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "  grpc</span><span class=\"pun\">.</span><span class=\"typ\">Credentials</span><span class=\"pun\">.</span><span class=\"pln\">createInsecure</span><span class=\"pun\">());</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> printResponse</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> response</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">'Error: '</span><span class=\"pun\">,</span><span class=\"pln\"> error</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"kwd\">else</span><span class=\"pln\">\n" +
                    "    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">response</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> listBooks</span><span class=\"pun\">()</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  client</span><span class=\"pun\">.</span><span class=\"pln\">list</span><span class=\"pun\">({},</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    printResponse</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> books</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> insertBook</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">,</span><span class=\"pln\"> title</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> book </span><span class=\"pun\">=</span> <span class=\"pun\">{</span><span class=\"pln\"> id</span><span class=\"pun\">:</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">),</span><span class=\"pln\"> title</span><span class=\"pun\">:</span><span class=\"pln\"> title</span><span class=\"pun\">,</span><span class=\"pln\"> author</span><span class=\"pun\">:</span><span class=\"pln\"> author </span><span class=\"pun\">};</span><span class=\"pln\">\n" +
                    "  client</span><span class=\"pun\">.</span><span class=\"pln\">insert</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> empty</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    printResponse</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> empty</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> getBook</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  client</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">({</span><span class=\"pln\"> id</span><span class=\"pun\">:</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span> <span class=\"pun\">},</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> book</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    printResponse</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> book</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> deleteBook</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "  client</span><span class=\"pun\">.</span><span class=\"kwd\">delete</span><span class=\"pun\">({</span><span class=\"pln\"> id</span><span class=\"pun\">:</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span> <span class=\"pun\">},</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> empty</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    printResponse</span><span class=\"pun\">(</span><span class=\"pln\">error</span><span class=\"pun\">,</span><span class=\"pln\"> empty</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>To implement the watch() function, which receives a stream of Book messages, an event handler is registered:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-5-node-client/client.js\" target=\"_blank\">client.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">// add the following section</span>\n" +
                    "<span class=\"kwd\">function</span><span class=\"pln\"> watchBooks</span><span class=\"pun\">()</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">var</span><span class=\"pln\"> call </span><span class=\"pun\">=</span><span class=\"pln\"> client</span><span class=\"pun\">.</span><span class=\"pln\">watch</span><span class=\"pun\">({});</span><span class=\"pln\">\n" +
                    "  call</span><span class=\"pun\">.</span><span class=\"pln\">on</span><span class=\"pun\">(</span><span class=\"str\">'data'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>The&nbsp;<code>on('data')</code>&nbsp;function callback will be called with a&nbsp;<code>Book</code>&nbsp;message object whenever a book is inserted.</p>\n" +
                    "<p>Finally, add code to parse command-line arguments:</p>\n" +
                    "<h3><a href=\"https://github.com/googlesamples/io2015-codelabs/blob/master/gRPC/step-5-node-client/client.js\" target=\"_blank\">client.js</a></h3>\n" +
                    "<pre><code><span class=\"com\">// add the following section</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> processName </span><span class=\"pun\">=</span><span class=\"pln\"> process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">.</span><span class=\"pln\">shift</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> scriptName </span><span class=\"pun\">=</span><span class=\"pln\"> process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">.</span><span class=\"pln\">shift</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> command </span><span class=\"pun\">=</span><span class=\"pln\"> process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">.</span><span class=\"pln\">shift</span><span class=\"pun\">();</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">command </span><span class=\"pun\">==</span> <span class=\"str\">'list'</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "  listBooks</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"kwd\">else</span> <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">command </span><span class=\"pun\">==</span> <span class=\"str\">'insert'</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "  insertBook</span><span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\"> process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"pln\"> process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">[</span><span class=\"lit\">2</span><span class=\"pun\">]);</span>\n" +
                    "<span class=\"kwd\">else</span> <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">command </span><span class=\"pun\">==</span> <span class=\"str\">'get'</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "  getBook</span><span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]);</span>\n" +
                    "<span class=\"kwd\">else</span> <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">command </span><span class=\"pun\">==</span> <span class=\"str\">'delete'</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "  deleteBook</span><span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">argv</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]);</span>\n" +
                    "<span class=\"kwd\">else</span> <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">command </span><span class=\"pun\">==</span> <span class=\"str\">'watch'</span><span class=\"pun\">)</span><span class=\"pln\">\n" +
                    "  watchBooks</span><span class=\"pun\">();</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><a href=\"https://nodejs.org/docs/latest/api/process.html#process_process_argv\" target=\"_blank\"><code>process.argv</code></a>&nbsp;is an array containing the command line arguments. The first element will be&nbsp;<code>'node'</code>, the second element will be the name of the JavaScript file.</p>\n" +
                    "</aside>\n" +
                    "<p>Now run the command-line client:</p>\n" +
                    "<pre>$ node client.js list\n" +
                    "{ books: \n" +
                    "   [ { id: 123,\n" +
                    "       title: 'A Tale of Two Cities',\n" +
                    "       author: 'Charles Dickens' } ] }</pre>\n" +
                    "<p>All of the commands you previously ran via client.go should now be available via your Node.js gRPC command-line client!</p>\n" +
                    "<pre>$ node client.js insert 2 \"The Three Musketeers\" \"Alexandre Dumas\"\n" +
                    "{}\n" +
                    "\n" +
                    "$ node client.js list\n" +
                    "{ books: \n" +
                    "   [ { id: 123,\n" +
                    "       title: 'A Tale of Two Cities',\n" +
                    "       author: 'Charles Dickens' },\n" +
                    "     { id: 2,\n" +
                    "       title: 'The Three Musketeers',\n" +
                    "       author: 'Alexandre Dumas' } ] }\n" +
                    "\n" +
                    "$ node client.js delete 123\n" +
                    "{}\n" +
                    "\n" +
                    "$ node client.js list\n" +
                    "{ books: \n" +
                    "   [ { id: 2,\n" +
                    "       title: 'The Three Musketeers',\n" +
                    "       author: 'Alexandre Dumas' } ] }\n" +
                    "\n" +
                    "$ node client.js get 2\n" +
                    "{ id: 2,\n" +
                    "  title: 'The Three Musketeers',\n" +
                    "  author: 'Alexandre Dumas' }</pre>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you wrote a command-line client in Node.js that interacts with your gRPC service.</p>\n" +
                    "</li>\n" +
                    "</ul>");
            sec2Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec2Node6);

            Section sec3Node6 = new Section();
            sec3Node6.setOrdinalNumber(3);
            sec3Node6.setDescription("Authenticate users");
            sec3Node6.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this step, you will set up the Oauth 2.0 client.</p>\n" +
                    "<p>First, you need to create a web application client for authentication.</p>\n" +
                    "<p>The simplest authentication mechanism involves passing an API key directly to the service. In using the Vision API, we recommend that you enable an API key for testing purposes, and a&nbsp;<a href=\"https://cloud.google.com/vision/docs/getting-started#setting_up_a_service_account\" target=\"_blank\">service account</a>&nbsp;for production usage. From the Google Cloud console :</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>From the left navigation, click&nbsp;<strong>API Manager &gt; Credentials</strong></li>\n" +
                    "<li>Click&nbsp;<strong>Create credentials &gt; OAuth Client ID</strong></li>\n" +
                    "<li>Click&nbsp;<strong>Configure consent screen.</strong></li>\n" +
                    "<li>Enter any product name you like, and fill in any relevant optional fields. Click&nbsp;<strong>Save</strong>.</li>\n" +
                    "<li>Choose&nbsp;<strong>Web application&nbsp;</strong>for the Application type.</li>\n" +
                    "<li>Under&nbsp;<strong>Name,&nbsp;</strong>enter any name you like.</li>\n" +
                    "<li>Under Authorized redirect URIs enter the URL you've been using to access the application from the browser:</li>\n" +
                    "</ol>\n" +
                    "<pre><code><span class=\"pln\">https</span><span class=\"pun\">:</span><span class=\"com\">//8080-dot-&lt;digit number&gt;-dot-devshell.appspot.com/oauth2callback</span></code></pre>\n" +
                    "<ol start=\"8\" type=\"1\">\n" +
                    "<li>Click&nbsp;<strong>Create.</strong></li>\n" +
                    "<li>Note the&nbsp;<strong>Client ID</strong>&nbsp;and&nbsp;<strong>Client Secret&nbsp;</strong>that are displayed since you'll need them for configuration.</li>\n" +
                    "</ol>\n" +
                    "<p>Here is a screenshot of the page used to create the client ID :</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-vision-nodejs/img/a4ddf1c68e3927e9.png\" /></p>\n" +
                    "<p>And here is the resulting client ID and secret:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-vision-nodejs/img/946274294142c6c8.png\" /></p>\n" +
                    "<h3><strong>Update configuration</strong></h3>\n" +
                    "<p>The node.js application needs to be configured to use the Client ID you created.</p>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>config.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>config.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m config</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Set the values of&nbsp;<code>clientId</code>,&nbsp;<code>clientSecret</code>, and&nbsp;<code>redirectUrl</code>&nbsp;with the values you set / obtained in the last step.</p>\n" +
                    "<h3>config.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> clientId </span><span class=\"pun\">=</span> <span class=\"str\">'REPLACE_WITH_YOUR_CLIENT_ID'</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> clientSecret </span><span class=\"pun\">=</span> <span class=\"str\">'REPLACE_WITH_YOUR_CLIENT_SECRET'</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> redirectUrl </span><span class=\"pun\">=</span> <span class=\"str\">'REPLACE_WITH_CALLBACK_URL_FROM_ABOVE'</span><span class=\"pun\">;</span></code></pre>\n" +
                    "<h3><strong>Redirect to sign in screen</strong></h3>\n" +
                    "<p>To begin, install the&nbsp;<a href=\"https://www.npmjs.com/package/googleapis\" target=\"_blank\"><code>googleapis</code></a>&nbsp;npm package, which you will use to generate the authentication URL and fetch the profile information for the logged in user, and also install&nbsp;<code>cookie-session</code>&nbsp;is a node.js middleware for providing signed cookie-based sessions.</p>\n" +
                    "<pre><code><span class=\"pln\">npm install cookie</span><span class=\"pun\">-</span><span class=\"pln\">session googleapis </span><span class=\"pun\">--</span><span class=\"pln\">save</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>The&nbsp;<a href=\"https://github.com/google/google-api-nodejs-client/\" target=\"_blank\"><code>googleapis</code></a>&nbsp;node package is Google's officially supported node.js client library for using Google APIs.</p>\n" +
                    "<p>Cookies are signed with the value of&nbsp;<code>config.secret</code>&nbsp;to protect against forgery.</p>\n" +
                    "</aside>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>app.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>app.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m app</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Add the following code to register the OAuth2 middlewares and router:</p>\n" +
                    "<h3>app.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> session </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'cookie-session'</span><span class=\"pun\">);</span>\n" +
                    "<span class=\"com\">// ...</span>\n" +
                    " \n" +
                    "<span class=\"com\">// Set view template engine</span>\n" +
                    "<span class=\"com\">// ... </span>\n" +
                    "\n" +
                    "<span class=\"com\">// Configure the session and session storage.</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"pln\">session</span><span class=\"pun\">({</span><span class=\"pln\">\n" +
                    "  secret</span><span class=\"pun\">:</span><span class=\"pln\"> config</span><span class=\"pun\">.</span><span class=\"pln\">secret</span><span class=\"pun\">,</span>\n" +
                    "  <span class=\"kwd\">signed</span><span class=\"pun\">:</span> <span class=\"kwd\">true</span>\n" +
                    "<span class=\"pun\">}));</span>\n" +
                    "\n" +
                    "\n" +
                    "<span class=\"com\">// OAuth2</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> oauth2 </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./lib/oauth2'</span><span class=\"pun\">)(</span><span class=\"pln\">config</span><span class=\"pun\">.</span><span class=\"pln\">oauth2</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"pln\">oauth2</span><span class=\"pun\">.</span><span class=\"pln\">router</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"pln\">oauth2</span><span class=\"pun\">.</span><span class=\"pln\">aware</span><span class=\"pun\">);</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"pln\">oauth2</span><span class=\"pun\">.</span><span class=\"kwd\">template</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"com\">// Configure routes</span>\n" +
                    "<span class=\"com\">// ...</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><code>oauth2.template</code>&nbsp;is the middleware that exposes the user's profile as well as login/logout URLs to any templates.</p>\n" +
                    "<p><code>oauth2.aware</code>&nbsp;is the middleware that makes the user's credentials available in the request as ``req.oauth2client``.</p>\n" +
                    "<p><code>oauth2.router</code>&nbsp;registers the authorization flow endpoints.</p>\n" +
                    "</aside>\n" +
                    "<h3><strong>Fetch user profile</strong></h3>\n" +
                    "<p>Enable the Google+ API so the application can call the API to fetch user profiles. From the Google Cloud Console :</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>From the left navigation, click&nbsp;<strong>API Manager</strong>&nbsp;&gt; Library, search for the \"<em>Google+ API</em>\".</li>\n" +
                    "<li>Click on Google+ API.</li>\n" +
                    "<li>Click&nbsp;<strong>Enable.</strong></li>\n" +
                    "</ol>\n" +
                    "<p>To fetch the profile of the authenticated user, the&nbsp;<code>/oauth2callback</code>&nbsp;route that Google Oauth2.0 redirects to calls&nbsp;<code>getUserProfile</code>&nbsp;from&nbsp;<code>lib/oauth.js</code>, passing it the provided&nbsp;<code>?code</code>&nbsp;query string that can be used to fetch user's profile.</p>\n" +
                    "<p>The returned user profile is stored in the application session via cookies.</p>\n" +
                    "<p>Now, let's change the view to use the template values added by the OAuth2 middleware. In the project directory, edit the&nbsp;<code>views/base.dust</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>base.dust</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m views</span><span class=\"pun\">/</span><span class=\"kwd\">base</span><span class=\"pun\">.</span><span class=\"pln\">dust</span></code></pre>\n" +
                    "<p>2. Replace the next two sections:</p>\n" +
                    "<h3>base.dust</h3>\n" +
                    "<pre><code><span class=\"com\">//...</span>\n" +
                    "<span class=\"pun\">&lt;</span><span class=\"pln\">p </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"navbar-text navbar-right\"</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">&lt;</span><span class=\"pln\">a href</span><span class=\"pun\">=</span><span class=\"str\">\"#\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Login</span><span class=\"pun\">&lt;/</span><span class=\"pln\">a</span><span class=\"pun\">&gt;</span>\n" +
                    "<span class=\"pun\">&lt;/</span><span class=\"pln\">p</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "<span class=\"com\">//...</span>\n" +
                    "\n" +
                    "<span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"alert alert-info\"</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"typ\">Please</span> <span class=\"str\">&lt;strong&gt;</span> <span class=\"pun\">&lt;</span><span class=\"pln\">a href</span><span class=\"pun\">=</span><span class=\"str\">\"#\"</span><span class=\"pun\">&gt;</span><span class=\"pln\">login</span><span class=\"pun\">&lt;</span><span class=\"str\">/a&gt; &lt;/</span><span class=\"pln\">strong</span><span class=\"pun\">&gt;</span><span class=\"pln\"> to </span><span class=\"kwd\">continue</span>\n" +
                    "<span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "<span class=\"com\">//...</span></code></pre>\n" +
                    "<p>with the following code:</p>\n" +
                    "<h3>base.dust</h3>\n" +
                    "<pre><code><span class=\"com\">//...</span>\n" +
                    "<span class=\"pun\">&lt;</span><span class=\"pln\">p </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"navbar-text navbar-right\"</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">{?</span><span class=\"pln\">profile</span><span class=\"pun\">}</span>\n" +
                    "    <span class=\"pun\">{?</span><span class=\"pln\">profile</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">}</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">img src</span><span class=\"pun\">=</span><span class=\"str\">\"{profile.image.url}\"</span><span class=\"pln\"> width</span><span class=\"pun\">=</span><span class=\"str\">\"24\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"img-circle\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">{/</span><span class=\"pln\">profile</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">}</span>\n" +
                    "    <span class=\"str\">&lt;span&gt;</span><span class=\"pun\">{</span><span class=\"pln\">profile</span><span class=\"pun\">.</span><span class=\"pln\">displayName</span><span class=\"pun\">}</span> <span class=\"pun\">&amp;</span><span class=\"pln\">nbsp</span><span class=\"pun\">;&lt;</span><span class=\"pln\">a href</span><span class=\"pun\">=</span><span class=\"str\">\"{logout}\"</span><span class=\"pun\">&gt;(</span><span class=\"pln\">logout</span><span class=\"pun\">)&lt;</span><span class=\"str\">/a&gt;&lt;/</span><span class=\"pln\">span</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">{:</span><span class=\"kwd\">else</span><span class=\"pun\">}</span>\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">a href</span><span class=\"pun\">=</span><span class=\"str\">\"{login}\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Login</span><span class=\"pun\">&lt;/</span><span class=\"pln\">a</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">{/</span><span class=\"pln\">profile</span><span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">&lt;/</span><span class=\"pln\">p</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "<span class=\"com\">//...</span>\n" +
                    "<span class=\"pun\">{?</span><span class=\"pln\">profile</span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"alert alert-success\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"typ\">Welcome</span> <span class=\"pun\">{</span><span class=\"pln\">profile</span><span class=\"pun\">.</span><span class=\"pln\">displayName</span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "<span class=\"pun\">{:</span><span class=\"kwd\">else</span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"alert alert-info\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"typ\">Please</span> <span class=\"str\">&lt;strong&gt;</span> <span class=\"pun\">&lt;</span><span class=\"pln\">a href</span><span class=\"pun\">=</span><span class=\"str\">\"{login}\"</span><span class=\"pun\">&gt;</span><span class=\"pln\">login</span><span class=\"pun\">&lt;</span><span class=\"str\">/a&gt; &lt;/</span><span class=\"pln\">strong</span><span class=\"pun\">&gt;</span><span class=\"pln\"> to </span><span class=\"kwd\">continue</span>\n" +
                    "  <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "<span class=\"pun\">{/</span><span class=\"pln\">profile</span><span class=\"pun\">}</span></code></pre>\n" +
                    "<p>Restart the node application then try and sign in.</p>\n" +
                    "<p>You should see your name and profile displayed!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you implemented an OAuth 2.0 web authentication flow and fetched the authenticated user's profile information.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will use Google Cloud Storage to upload images.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</li>\n" +
                    "</ul>");
            sec3Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec3Node6);

            Section sec4Node6 = new Section();
            sec4Node6.setOrdinalNumber(4);
            sec4Node6.setDescription("Upload images to storage");
            sec4Node6.setContent("<ul class=\"faq\">\n" +
                    "<li>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this step, you will write the code to save image in Google Cloud Storage.</p>\n" +
                    "<h3><strong>Set up Google Cloud Storage</strong></h3>\n" +
                    "<p>The default bucket uses the same project ID for name:</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>From the left navigation, click&nbsp;<strong>App Engine &gt; Settings.</strong></li>\n" +
                    "<li>Under&nbsp;<strong>Default Cloud Storage Bucket</strong>, click&nbsp;<strong>Create.</strong></li>\n" +
                    "<li>Set public-read as the default object ACLs to existing and new objects in the bucket:</li>\n" +
                    "</ol>\n" +
                    "<pre><code><span class=\"pln\">$ gsutil defacl </span><span class=\"kwd\">set</span> <span class=\"kwd\">public</span><span class=\"pun\">-</span><span class=\"pln\">read gs</span><span class=\"pun\">:</span><span class=\"com\">//&lt;your-project-id&gt;.appspot.com</span>\n" +
                    "<span class=\"typ\">Setting</span> <span class=\"kwd\">default</span> <span class=\"kwd\">object</span><span class=\"pln\"> ACL on gs</span><span class=\"pun\">:</span><span class=\"com\">//&lt;your-project-id&gt;.appspot.com/...</span></code></pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: You can also create buckets using the command:&nbsp;<code>gsutil mb gs://&lt;your-bucket-name&gt;.appspot.com</code></p>\n" +
                    "</aside>\n" +
                    "<p>Next, you'll need to install the&nbsp;<a href=\"https://github.com/GoogleCloudPlatform/gcloud-node\" target=\"_blank\">gcloud</a>&nbsp;npm package, which you will use to interact with Cloud Storage, and the node.js middleware&nbsp;<a href=\"https://github.com/expressjs/multer\" target=\"_blank\">Multer</a>&nbsp;for handling&nbsp;<code>multipart/form-data</code>&nbsp;forms for uploading files.</p>\n" +
                    "<pre><code><span class=\"pln\">$ npm install gcloud multer </span><span class=\"pun\">--</span><span class=\"pln\">save</span></code></pre>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>config.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>config.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">$ nano </span><span class=\"pun\">-</span><span class=\"pln\">m config</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Replace the placeholder value for&nbsp;<code>projectId</code>&nbsp;with the ID of the project that you created and also replace the placeholder value for&nbsp;<code>bucketName</code>&nbsp;with the name of the bucket you created:</p>\n" +
                    "<h3>config.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> projectId </span><span class=\"pun\">=</span> <span class=\"str\">'your-project-id'</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"kwd\">var</span><span class=\"pln\"> bucketName </span><span class=\"pun\">=</span> <span class=\"str\">'your-bucket-name'</span><span class=\"pun\">;</span></code></pre>\n" +
                    "<p>Now, let's register the cloud storage client.</p>\n" +
                    "<p>In the project directory, edit the&nbsp;<code>app.js</code>&nbsp;file.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>app.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m app</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Add the following code so the storage client creates a&nbsp;<a href=\"http://googlecloudplatform.github.io/gcloud-node/#/docs/v0.14.0/storage/bucket\" target=\"_blank\"><code>bucket</code></a>&nbsp;object that provides the API you will use to interact with your Google Cloud Storage bucket:</p>\n" +
                    "<h3>app.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> storageClient </span><span class=\"pun\">=</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./lib/storageClient'</span><span class=\"pun\">)(</span><span class=\"pln\">\n" +
                    "  config</span><span class=\"pun\">.</span><span class=\"pln\">gcloud</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "  config</span><span class=\"pun\">.</span><span class=\"pln\">gcloudStorageBucket\n" +
                    "</span><span class=\"pun\">);</span>\n" +
                    "\n" +
                    "<span class=\"com\">// Configure routes</span><span class=\"pln\">\n" +
                    "app</span><span class=\"pun\">.</span><span class=\"kwd\">use</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span> <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'./lib/routes'</span><span class=\"pun\">)(</span><span class=\"pln\">\n" +
                    "  storageClient\n" +
                    "</span><span class=\"pun\">));</span></code></pre>\n" +
                    "<p>To upload the image to Cloud Storage and return a publicly accessible URL for displaying the image and the object URI to be later used for the Cloud Vision API, add a 'post' function to&nbsp;<code>lib/routes.js</code>:</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>routes.js</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m lib</span><span class=\"pun\">/</span><span class=\"pln\">routes</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>2. Add the following 'post' function to&nbsp;<code>lib/routes.js</code>:</p>\n" +
                    "<h3>routes.js</h3>\n" +
                    "<pre><code><span class=\"kwd\">var</span><span class=\"pln\"> routes </span><span class=\"pun\">=</span> <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">storageClient</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"com\">//...</span><span class=\"pln\">\n" +
                    "\n" +
                    "  router</span><span class=\"pun\">.</span><span class=\"pln\">post</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> \n" +
                    "    storageClient</span><span class=\"pun\">.</span><span class=\"pln\">multer</span><span class=\"pun\">.</span><span class=\"pln\">single</span><span class=\"pun\">(</span><span class=\"str\">'image'</span><span class=\"pun\">),</span><span class=\"pln\">\n" +
                    "    storageClient</span><span class=\"pun\">.</span><span class=\"pln\">uploadToStorage</span><span class=\"pun\">,</span>\n" +
                    "    <span class=\"kwd\">function</span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "      <span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">.</span><span class=\"pln\">file </span><span class=\"pun\">&amp;&amp;</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">file</span><span class=\"pun\">.</span><span class=\"pln\">cloudStoragePublicUrl</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "        res</span><span class=\"pun\">.</span><span class=\"pln\">render</span><span class=\"pun\">(</span><span class=\"str\">'base'</span><span class=\"pun\">,</span> <span class=\"pun\">{</span><span class=\"pln\">\n" +
                    "          imageUrl</span><span class=\"pun\">:</span><span class=\"pln\"> req</span><span class=\"pun\">.</span><span class=\"pln\">file</span><span class=\"pun\">.</span><span class=\"pln\">cloudStoragePublicUrl\n" +
                    "        </span><span class=\"pun\">});</span>\n" +
                    "      <span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">});</span>\n" +
                    "\n" +
                    "  <span class=\"kwd\">return</span><span class=\"pln\"> router</span><span class=\"pun\">;</span>\n" +
                    "<span class=\"pun\">};</span></code></pre>\n" +
                    "<p>The publicly accesible URL for the image file will be&nbsp;<a href=\"https://storage.googleapis.com/\" target=\"_blank\"><code>https://storage.googleapis.com/</code></a><code>&lt;bucket-name&gt;/&lt;filename&gt;</code>&nbsp;and the Google Cloud Storage image URI will be&nbsp;<code>gs://bucket-name/object-name</code>.</p>\n" +
                    "<p>Finally, we need to change the&nbsp;<code>views/base.dust</code>&nbsp;file to display the form to upload images and to render the image using the Cloud Storage URL.</p>\n" +
                    "<p>1. Open the file in an editor. For example this command will open&nbsp;<code>base.dust</code>&nbsp;using Nano:</p>\n" +
                    "<pre><code><span class=\"pln\">nano </span><span class=\"pun\">-</span><span class=\"pln\">m views</span><span class=\"pun\">/</span><span class=\"kwd\">base</span><span class=\"pun\">.</span><span class=\"pln\">dust</span></code></pre>\n" +
                    "<p>2. Replace the current&nbsp;<code>{?profile}</code>&nbsp;block with the following lines:</p>\n" +
                    "<h3><a href=\"https://github.com/Zarmada/cloudvision-nodejs/blob/develop/step-2-upload-to-storage/views/base.dust\" target=\"_blank\">base.dust</a></h3>\n" +
                    "<pre><code><span class=\"com\">//...</span>\n" +
                    "<span class=\"str\">&lt;h3&gt;</span><span class=\"typ\">Google</span> <span class=\"typ\">Cloud</span> <span class=\"typ\">Vision</span><span class=\"pun\">&lt;/</span><span class=\"pln\">h3</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "<span class=\"pun\">{?</span><span class=\"pln\">profile</span><span class=\"pun\">}</span>\n" +
                    "  <span class=\"pun\">&lt;</span><span class=\"pln\">form action</span><span class=\"pun\">=</span><span class=\"str\">\"/\"</span><span class=\"pln\"> method</span><span class=\"pun\">=</span><span class=\"str\">\"post\"</span><span class=\"pln\"> enctype</span><span class=\"pun\">=</span><span class=\"str\">\"multipart/form-data\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-group\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">label </span><span class=\"kwd\">for</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Image</span><span class=\"pun\">&lt;/</span><span class=\"pln\">label</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">input type</span><span class=\"pun\">=</span><span class=\"str\">\"file\"</span><span class=\"pln\"> name</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"str\">\"image\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-control\"</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"form-group\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">button type</span><span class=\"pun\">=</span><span class=\"str\">\"submit\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"btn btn-success\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Submit</span><span class=\"pun\">&lt;/</span><span class=\"pln\">button</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>  \n" +
                    "  <span class=\"pun\">&lt;/</span><span class=\"pln\">form</span><span class=\"pun\">&gt;</span>\n" +
                    "\n" +
                    "  <span class=\"pun\">{?</span><span class=\"pln\">imageUrl</span><span class=\"pun\">}</span>\n" +
                    "    <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel panel-default\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">div </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-heading\"</span><span class=\"pun\">&gt;</span>\n" +
                    "        <span class=\"pun\">&lt;</span><span class=\"pln\">h3 </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-title\"</span><span class=\"pun\">&gt;</span><span class=\"typ\">Output</span><span class=\"pun\">&lt;/</span><span class=\"pln\">h3</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;</span><span class=\"pln\">div id</span><span class=\"pun\">=</span><span class=\"str\">\"panel-body\"</span> <span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"panel-body\"</span><span class=\"pun\">&gt;</span>\n" +
                    "        <span class=\"pun\">&lt;</span><span class=\"pln\">img src</span><span class=\"pun\">=</span><span class=\"str\">\"{.imageUrl}\"</span><span class=\"pln\"> height</span><span class=\"pun\">=</span><span class=\"str\">\"600\"</span><span class=\"pln\"> width</span><span class=\"pun\">=</span><span class=\"str\">\"600\"</span><span class=\"pun\">&gt;</span>\n" +
                    "      <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "    <span class=\"pun\">&lt;/</span><span class=\"pln\">div</span><span class=\"pun\">&gt;</span>\n" +
                    "  <span class=\"pun\">{/</span><span class=\"pln\">imageUrl</span><span class=\"pun\">}</span>\n" +
                    "<span class=\"pun\">{:</span><span class=\"kwd\">else</span><span class=\"pun\">}</span>\n" +
                    "<span class=\"com\">//... </span></code></pre>\n" +
                    "<p>Restart the node application and try uploading an image.</p>\n" +
                    "<p>It should work!</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you created a Google Cloud Storage bucket, uploaded images into it and rendered them using the public URL.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will set up the Google Cloud Vision API for your project.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</li>\n" +
                    "</ul>");
            sec4Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec4Node6);

            Section sec5Node6 = new Section();
            sec5Node6.setOrdinalNumber(5);
            sec5Node6.setDescription("Set up Cloud Vision API");
            sec5Node6.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this step, you will learn how to setup Stackdriver Trace and Stackdriver Debugger and configure the agents.</p>\n" +
                    "<p>Note that&nbsp;<code>server.js</code>&nbsp;contains the following code:</p>\n" +
                    "<pre><code><span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">env</span><span class=\"pun\">.</span><span class=\"pln\">NODE_ENV </span><span class=\"pun\">===</span> <span class=\"str\">\"production\"</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">\"@google/cloud-trace\"</span><span class=\"pun\">).</span><span class=\"pln\">start</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">env</span><span class=\"pun\">.</span><span class=\"pln\">GCLOUD_PROJECT</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">\"@google/cloud-debug\"</span><span class=\"pun\">).</span><span class=\"pln\">start</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>This code adds Stackdriver Trace and Stackdriver Debugger to the application, and must be the very first code that executes when the application starts. Stackdriver Trace gathers information on RPC calls happening in the application. Once the application is deployed, you can view the trace reports in the&nbsp;<a href=\"https://console.cloud.google.com/traces/overview\" target=\"_blank\">Stackdriver Trace Dashboard</a>.</p>\n" +
                    "<p>Stackdriver Debugger allows you to debug your application from the&nbsp;<a href=\"https://console.cloud.google.com/debug\" target=\"_blank\">Stackdriver Debugger Dashboard</a>. In order for remote debugging to work, you need to push the code into a&nbsp;<a href=\"https://cloud.google.com/source-repositories/\" target=\"_blank\">Cloud Source Repository</a>&nbsp;so Stackdriver Trace can reference your source code:</p>\n" +
                    "<p>1. Configure git:</p>\n" +
                    "<pre><code><span class=\"pln\">git config </span><span class=\"pun\">--</span><span class=\"kwd\">global</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">email </span><span class=\"str\">\"you@email.com\"</span><span class=\"pln\">\n" +
                    "git config </span><span class=\"pun\">--</span><span class=\"kwd\">global</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"str\">\"Your Name\"</span><span class=\"pln\">\n" +
                    "git config credential</span><span class=\"pun\">.</span><span class=\"pln\">helper gcloud</span><span class=\"pun\">.</span><span class=\"pln\">sh</span></code></pre>\n" +
                    "<p>3. Add your Cloud Source Repository as a git remote:</p>\n" +
                    "<pre><code><span class=\"pln\">git remote </span><span class=\"kwd\">add</span><span class=\"pln\"> google https</span><span class=\"pun\">:</span><span class=\"com\">//source.developers.google.com/p/YOUR_PROJECT_ID/r/default</span></code></pre>\n" +
                    "<p>replacing&nbsp;<code>YOUR_PROJECT_ID</code>&nbsp;with your project ID.</p>\n" +
                    "<p>4. Push the code into the Cloud Source Repository:</p>\n" +
                    "<pre><code><span class=\"pln\">git push </span><span class=\"pun\">--</span><span class=\"pln\">all google</span></code></pre>\n" +
                    "<p>5. Start the app again:</p>\n" +
                    "<pre><code><span class=\"pln\">npm start</span></code></pre>\n" +
                    "<h2>5. Go to the&nbsp;<a href=\"https://console.cloud.google.com/debug\" target=\"_blank\">Stackdriver Debugger Dashboard</a>. You should see something like this:</h2>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/49fb057dcadeecd.png\" /></p>\n" +
                    "<p>6. Click on line number 48 to capture a snapshot:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/ebeb35323f636660.png\" /></p>\n" +
                    "<p>7. Now visit your running app and refresh the page. Now go back to the Debugger Dashboard, you should see something like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/bc33513242009ffd.png\" /></p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step you learned how to use Stackdriver Debugger to debug your locally running application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will deploy the application to Google App Engine Flexible Environment.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec5Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec5Node6);

            Section sec6Node6 = new Section();
            sec6Node6.setOrdinalNumber(6);
            sec6Node6.setDescription("Run detection on images");
            sec6Node6.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>It's time to deploy the app.</p>\n" +
                    "<p>1. Open app.yaml for editing (using Nano or Vim, e.g.&nbsp;<code>nano app.yaml</code>) and add your API key you created earlier:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/8251cc981d854582.png\" /></p>\n" +
                    "<p>2. Enter the following command to deploy:</p>\n" +
                    "<pre><code><span class=\"pln\">gcloud app deploy </span><span class=\"pun\">--</span><span class=\"pln\">version v1</span></code></pre>\n" +
                    "<p>It takes several minutes to deploy the first time. This command uses the existing&nbsp;<code>app.yaml</code>&nbsp;file, packages the source code into remote Docker container, deploys and directs all traffic to new container labeled&nbsp;<code>v1</code>, and stops any previously running version.</p>\n" +
                    "<p>2. Visit your deployed app at&nbsp;<code>https://&lt;your-project-id&gt;.appspot.com</code></p>\n" +
                    "<p>You should see the same thing you saw when you ran it locally.</p>\n" +
                    "<p>Deployments are customizable in powerful ways to suit your development workflow and production needs.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: Read more about the&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/reference/preview/app/deploy\" target=\"_blank\"><code>deploy</code></a>&nbsp;command.</p>\n" +
                    "</aside>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step you deployed your app to App Engine Flexible Environment, and explored the&nbsp;<code>deploy</code>&nbsp;command.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Learn how to monitor and debug the deployed application in the Google Cloud Console.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec6Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec6Node6);

            Section sec7Node6 = new Section();
            sec7Node6.setOrdinalNumber(7);
            sec7Node6.setDescription("Congratulations!");
            sec7Node6.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this step, you will learn how to monitor and debug the deployed application.</p>\n" +
                    "<p>The Stackdriver Trace and Stackdriver Debugger Node.js agents are already in the app, and are initialized before anything else when the application starts.</p>\n" +
                    "<p>1. The Trace agent gathers information on RPC calls happening in the app. View the reports in the&nbsp;<a href=\"https://console.cloud.google.com/traces/overview\" target=\"_blank\">Stackdriver Trace Dashboard</a>.</p>\n" +
                    "<p>2. You've already been to the&nbsp;<a href=\"https://console.cloud.google.com/debug\" target=\"_blank\">Stackdriver Debugger Dashboard.</a>&nbsp;Go there now and repeat what you did for the debugging steps.</p>\n" +
                    "<p>3. You view the logs for the deployed application in the&nbsp;<a href=\"https://console.cloud.google.com/logs/viewer\" target=\"_blank\">Stackdriver Logging Dashboard</a>.</p>\n" +
                    "<p>4.&nbsp;<a href=\"https://console.cloud.google.com/errors\" target=\"_blank\">Stackdriver Error Reporting</a>&nbsp;helps you monitor errors that happen in your application. The demo application has a broken endpoint. Visit&nbsp;<code>https://&lt;your-project-id&gt;.appspot.com/search</code>&nbsp;to see an error, then visit the Logging and Error Reporting dashboards.</p>\n" +
                    "<p>You can use&nbsp;<a href=\"https://cloud.google.com/stackdriver/\" target=\"_blank\">Google Stackdriver</a>&nbsp;to monitor multiple projects.</p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step you learned how to monitor and debug the deployed application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you'll learn how to scale the application.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec7Node6.setLesson(nodeJsLesson6);
            nodeJsLesson6.getSections().add(sec7Node6);

            Section sec1Node7 = new Section();
            sec1Node7.setOrdinalNumber(1);
            sec1Node7.setDescription("Understanding Regions and Zones");
            sec1Node7.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<h2><strong>Self-paced environment setup</strong></h2>\n" +
                    "<p>If you don't already have a Google Account (Gmail or Google Apps), you must&nbsp;<a href=\"https://accounts.google.com/SignUp\" target=\"_blank\">create one</a>. Sign-in to Google Cloud Platform console (<a href=\"http://console.cloud.google.com/\" target=\"_blank\">console.cloud.google.com</a>) and create a new project:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/3c50189ec031c0cf.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/9c373776b1f13694.png\" /></p>\n" +
                    "<p>Remember the project ID, a unique name across all Google Cloud projects (the name above has already been taken and will not work for you, sorry!). It will be referred to later in this codelab as&nbsp;<code>PROJECT_ID</code>.</p>\n" +
                    "<p>Next, you'll need to&nbsp;<a href=\"https://console.developers.google.com/billing\" target=\"_blank\">enable billing</a>&nbsp;in the Developers Console in order to use Google Cloud resources like Cloud Datastore and Cloud Storage.</p>\n" +
                    "<p>Running through this codelab shouldn't cost you more than a few dollars, but it could be more if you decide to use more resources or if you leave them running (see \"cleanup\" section at the end of this document).</p>\n" +
                    "<p>New users of Google Cloud Platform are eligible for a&nbsp;<a href=\"https://console.developers.google.com/billing/freetrial?hl=en\" target=\"_blank\">$300 free trial</a>.</p>\n" +
                    "<h3><strong>Enable Stackdriver Error Reporting API</strong></h3>\n" +
                    "<p>Enable the Stackdriver Error Reporting API so the trace agent can function:</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>Under&nbsp;<strong>API Manager &gt;&nbsp;</strong><a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\"><strong>Google APIs</strong></a>, search for the \"<em>Stackdriver Error Reporting API</em>\"</li>\n" +
                    "<li>Click on&nbsp;<a href=\"https://console.developers.google.com/apis/api/clouderrorreporting.googleapis.com/overview\" target=\"_blank\"><strong>Stackdriver Error Reporting API</strong></a></li>\n" +
                    "<li>Click&nbsp;<strong>Enable</strong>&nbsp;if the API is not already enabled</li>\n" +
                    "</ol>\n" +
                    "<h3><strong>Enable Stackdriver Trace API</strong></h3>\n" +
                    "<p>Enable the Stackdriver Trace API so the trace agent can function:</p>\n" +
                    "<ol start=\"4\" type=\"1\">\n" +
                    "<li>Under&nbsp;<strong>API Manager &gt;&nbsp;</strong><a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\"><strong>Google APIs</strong></a>, search for the \"<em>Stackdriver Trace API</em>\"</li>\n" +
                    "<li>Click on&nbsp;<a href=\"https://console.developers.google.com/apis/api/cloudtrace.googleapis.com/overview\" target=\"_blank\"><strong>Stackdriver&nbsp;</strong><strong>Trace</strong><strong>&nbsp;API</strong></a></li>\n" +
                    "<li>Click&nbsp;<strong>Enable</strong>&nbsp;if the API is not already enabled</li>\n" +
                    "</ol>\n" +
                    "<h3><strong>Enable YouTube Data API v3</strong></h3>\n" +
                    "<p>Enable the YouTube Data API v3 so you can query for Google Cardboard videos:</p>\n" +
                    "<ol start=\"1\" type=\"1\">\n" +
                    "<li>Under&nbsp;<strong>API Manager &gt;&nbsp;</strong><a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\"><strong>Google APIs</strong></a>, search for the \"<em>YouTube Data API v3</em>\"</li>\n" +
                    "<li>Click on&nbsp;<a href=\"https://console.developers.google.com/apis/api/youtube/overview\" target=\"_blank\"><strong>YouTube Data API v3</strong></a></li>\n" +
                    "<li>Click&nbsp;<strong>Enable</strong></li>\n" +
                    "<li>You will be prompted to create credentials. Click \"Go to credentials\" to go to the&nbsp;<a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\">Credentials Dashboard</a>.</li>\n" +
                    "<li>Create an API Key for the YouTube Data API v3, which you will use later</li>\n" +
                    "</ol>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/78ad308cf326b754.png\" /><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/c3dbd224b62bcbce.png\" /></p>\n" +
                    "<h2><strong>Start Cloud Shell</strong></h2>\n" +
                    "<p>\"Build a Node.js &amp; Angular 2 Web App using Google Cloud Platform\" can be operated remotely from your laptop, but in this codelab we will be using&nbsp;<a href=\"https://cloud.google.com/cloud-shell/\" target=\"_blank\">Google Cloud Shell</a>, a command line environment running in the Cloud. This Debian-based virtual machine is loaded with all the development tools you'll need. It offers a persistent 5GB home directory, and runs on the Google Cloud, greatly enhancing network performance and authentication. This means that all you will need for this codelab is a browser (yes, it works on a Chromebook).</p>\n" +
                    "<p>To activate Google Cloud Shell, from the developer console simply click the button on the top right-hand side (it should only take a few moments to provision and connect to the environment):</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/5f504766b9b3be17.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/47093cfb58ac2d0f.png\" /></p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/9f0e51b578fecce5.png\" /></p>\n" +
                    "<p>Once connected to the cloud shell, you should see that you are already authenticated and that the project is already set to your&nbsp;<code>PROJECT_ID</code>&nbsp;:</p>\n" +
                    "<pre>$ gcloud auth list\n" +
                    "Credentialed accounts:\n" +
                    " - &lt;myaccount&gt;@&lt;mydomain&gt;.com (active)</pre>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong><code>gcloud</code>&nbsp;is the powerful and unified command-line tool for Google Cloud Platform. Full documentation is available from&nbsp;<a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">https://cloud.google.com/sdk/gcloud</a>. It comes pre-installed on CloudShell and you will surely enjoy its support for tab-completion.</p>\n" +
                    "</aside>\n" +
                    "<pre>$ gcloud config list project\n" +
                    "[core]\n" +
                    "project = &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>If for some reason the project is not set, simply issue the following command :</p>\n" +
                    "<pre>$ gcloud config set project &lt;PROJECT_ID&gt;</pre>\n" +
                    "<p>Looking for your&nbsp;<code>PROJECT_ID</code>? Check out what ID you used in the setup steps or look it up in the console dashboard :</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/e40be8c610cd41c0.png\" /></p>\n" +
                    "<p>IMPORTANT. Finally, set the default zone and project configuration:</p>\n" +
                    "<pre>$ gcloud config set compute/zone us-central1-f</pre>\n" +
                    "<p>You can pick and choose different zones too. Learn more about zones in&nbsp;<a href=\"https://cloud.google.com/compute/docs/zones\" target=\"_blank\">Regions &amp; Zones documentation</a>.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p><strong>Note:&nbsp;</strong>When you run&nbsp;<code>gcloud</code>&nbsp;on your own machine, the config settings would've been persisted across sessions. But in Cloud Shell, you will need to set this for every new session or reconnection.</p>\n" +
                    "</aside>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you created a project, enabled two APIs, created an API key and started a new session in Google Cloud Shell.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will clone the sample application.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec1Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec1Node7);

            Section sec2Node7 = new Section();
            sec2Node7.setOrdinalNumber(2);
            sec2Node7.setDescription("Create a new instance");
            sec2Node7.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this section, you will modify the code to use custom hints.</p>\n" +
                    "<p><strong>Step 1</strong></p>\n" +
                    "<p>Download a new audio file that has 44100 sample rate, and uses a relatively new word,&nbsp;<strong><em>typogram</em></strong>, that's not in the speech database yet.</p>\n" +
                    "<pre>gsutil cp gs://speechapi-demo/typograms_entities.wav ./resources</pre>\n" +
                    "<p><strong>Step 2</strong></p>\n" +
                    "<p>Modify the sample rate to 44100 in&nbsp;<em><code>syncRecognize</code></em>&nbsp;function in&nbsp;<code>recognize.js</code>:</p>\n" +
                    "<pre>nano recognize.js</pre>\n" +
                    "<p><strong>Step 3</strong></p>\n" +
                    "<p>Repeat the command with the new audio file:</p>\n" +
                    "<pre>node recognize sync ./resources/typograms_entities.wav</pre>\n" +
                    "<p>Note in the result that instead of spelling out&nbsp;<em>typograms</em>, the result recognizes it as&nbsp;<em>telegrams</em>.</p>\n" +
                    "<p><strong>Step 4</strong></p>\n" +
                    "<p>Add a custom hint to your syncRecognize function so it does a better job with the audio file by editing the function as follows:</p>\n" +
                    "<pre>function syncRecognize (filename, callback) {\n" +
                    "  // Detect speech in the audio file, e.g. \"./resources/audio.raw\"\n" +
                    "  speech.recognize(filename, {\n" +
                    "    encoding: 'LINEAR16',\n" +
                    "    speechContext: {\n" +
                    "      \"phrases\":[\"typograms\"]\n" +
                    "     },\n" +
                    "    sampleRate: 44100\n" +
                    "  }, (err, results) =&gt; {\n" +
                    "    if (err) {\n" +
                    "      callback(err);\n" +
                    "      return;\n" +
                    "    }\n" +
                    "\n" +
                    "    console.log('Results:', results);\n" +
                    "    callback();\n" +
                    "  });\n" +
                    "}</pre>\n" +
                    "<p><strong>Step 5</strong></p>\n" +
                    "<p>Run the sync command again and now take a look at how the result has changed.</p>\n" +
                    "<pre>node recognize sync ./resources/typograms_entities.wav</pre>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec2Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec2Node7);

            Section sec3Node7 = new Section();
            sec3Node7.setOrdinalNumber(3);
            sec3Node7.setDescription("Synchronous use case");
            sec3Node7.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<h2>Download the application code</h2>\n" +
                    "<p>1. Clone the sample project:</p>\n" +
                    "<pre><code><span class=\"pln\">git clone https</span><span class=\"pun\">:</span><span class=\"com\">//github.com/googlecodelabs/cloud-cardboard-viewer.git</span></code></pre>\n" +
                    "<p>2. Change into the&nbsp;<code>cloud-cardboard-viewer</code>&nbsp;directory:</p>\n" +
                    "<pre><code><span class=\"pln\">cd cloud</span><span class=\"pun\">-</span><span class=\"pln\">cardboard</span><span class=\"pun\">-</span><span class=\"pln\">viewer</span></code></pre>\n" +
                    "<p>3. Install dependencies:</p>\n" +
                    "<pre><code><span class=\"pln\">npm install</span></code></pre>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you cloned the sample application into your Google Cloud Shell session.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will use Google Cloud Shell to run and preview the sample application.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec3Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec3Node7);

            Section sec4Node7 = new Section();
            sec4Node7.setOrdinalNumber(4);
            sec4Node7.setDescription("Try custom hints");
            sec4Node7.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>The sample has the following layout:</p>\n" +
                    "<pre><code><span class=\"kwd\">public</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "  app</span><span class=\"pun\">/</span><span class=\"pln\">\n" +
                    "    about</span><span class=\"pun\">.</span><span class=\"pln\">component</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    app</span><span class=\"pun\">-</span><span class=\"pln\">routing</span><span class=\"pun\">.</span><span class=\"kwd\">module</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    app</span><span class=\"pun\">.</span><span class=\"pln\">component</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    app</span><span class=\"pun\">.</span><span class=\"kwd\">module</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    home</span><span class=\"pun\">.</span><span class=\"pln\">component</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    main</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    rxjs</span><span class=\"pun\">-</span><span class=\"pln\">extensions</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    video</span><span class=\"pun\">-</span><span class=\"pln\">card</span><span class=\"pun\">.</span><span class=\"pln\">component</span><span class=\"pun\">.</span><span class=\"pln\">ts\n" +
                    "    video</span><span class=\"pun\">-</span><span class=\"pln\">card</span><span class=\"pun\">.</span><span class=\"pln\">component</span><span class=\"pun\">.</span><span class=\"pln\">css\n" +
                    "  system</span><span class=\"pun\">.</span><span class=\"pln\">config</span><span class=\"pun\">.</span><span class=\"pln\">js\n" +
                    "  index</span><span class=\"pun\">.</span><span class=\"pln\">css\n" +
                    "  index</span><span class=\"pun\">.</span><span class=\"pln\">html\n" +
                    "</span><span class=\"kwd\">package</span><span class=\"pun\">.</span><span class=\"pln\">json\n" +
                    "server</span><span class=\"pun\">.</span><span class=\"pln\">js</span></code></pre>\n" +
                    "<p>To run the sample application, let's perform the following steps:</p>\n" +
                    "<p>1. Set the&nbsp;<code>GCLOUD_PROJECT</code>&nbsp;environment variable:</p>\n" +
                    "<pre><code><span class=\"kwd\">export</span><span class=\"pln\"> GCLOUD_PROJECT</span><span class=\"pun\">=</span><span class=\"pln\">YOUR_PROJECT_ID</span></code></pre>\n" +
                    "<p>replacing&nbsp;<code>YOUR_PROJECT_ID</code>&nbsp;with your project ID.</p>\n" +
                    "<p>2. Set the&nbsp;<code>API_KEY</code>&nbsp;environment variable:</p>\n" +
                    "<pre><code><span class=\"kwd\">export</span><span class=\"pln\"> API_KEY</span><span class=\"pun\">=</span><span class=\"pln\">YOUR_API_KEY</span></code></pre>\n" +
                    "<p>replacing&nbsp;<code>YOUR_API_KEY</code>&nbsp;with the API key you created earlier.</p>\n" +
                    "<p>3. Run&nbsp;<code>npm start</code>&nbsp;to start the node.js server:</p>\n" +
                    "<pre><code><span class=\"pln\">npm start</span></code></pre>\n" +
                    "<p>4. Click the \"Web preview\"<img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/a0c920da29c2c9e7.png\" />icon that appears at the top left side of the cloud shell window and select \"Preview on port 8080\" to see the app in a web browser.</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: Usually you would test with&nbsp;<a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080</a>&nbsp;but the Google Cloud Shell environment requires requests to be proxied)</p>\n" +
                    "</aside>\n" +
                    "<p>You will see a page that looks like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/835cd038193b18e6.png\" /></p>\n" +
                    "<p>The application displays videos from Youtube based on the search query \"Google Cardboard 3D Videos\".</p>\n" +
                    "<aside class=\"special\">\n" +
                    "<p>Note: To stop running the app, press&nbsp;<strong><code>CTRL + C</code></strong></p>\n" +
                    "</aside>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step, you set up and ran the codelab sample application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will learn how to setup Stackdriver Trace and Stackdriver Debugger and configure the agents.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec4Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec4Node7);

            Section sec5Node7 = new Section();
            sec5Node7.setOrdinalNumber(5);
            sec5Node7.setDescription("Asynchronous calls");
            sec5Node7.setContent("<div id=\"contentContainer\" class=\"style-scope app-drawer-layout\">\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-header-layout\">\n" +
                    "<div id=\"main-content\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"instructions style-scope google-codelab-step\">\n" +
                    "<div class=\"inner style-scope google-codelab-step\">\n" +
                    "<p>In this step, you will learn how to setup Stackdriver Trace and Stackdriver Debugger and configure the agents.</p>\n" +
                    "<p>Note that&nbsp;<code>server.js</code>&nbsp;contains the following code:</p>\n" +
                    "<pre><code><span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">env</span><span class=\"pun\">.</span><span class=\"pln\">NODE_ENV </span><span class=\"pun\">===</span> <span class=\"str\">\"production\"</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">\"@google/cloud-trace\"</span><span class=\"pun\">).</span><span class=\"pln\">start</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"pun\">}</span>\n" +
                    "\n" +
                    "<span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">process</span><span class=\"pun\">.</span><span class=\"pln\">env</span><span class=\"pun\">.</span><span class=\"pln\">GCLOUD_PROJECT</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n" +
                    "  <span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">\"@google/cloud-debug\"</span><span class=\"pun\">).</span><span class=\"pln\">start</span><span class=\"pun\">();</span>\n" +
                    "<span class=\"pun\">}</span></code></pre>\n" +
                    "<p>This code adds Stackdriver Trace and Stackdriver Debugger to the application, and must be the very first code that executes when the application starts. Stackdriver Trace gathers information on RPC calls happening in the application. Once the application is deployed, you can view the trace reports in the&nbsp;<a href=\"https://console.cloud.google.com/traces/overview\" target=\"_blank\">Stackdriver Trace Dashboard</a>.</p>\n" +
                    "<p>Stackdriver Debugger allows you to debug your application from the&nbsp;<a href=\"https://console.cloud.google.com/debug\" target=\"_blank\">Stackdriver Debugger Dashboard</a>. In order for remote debugging to work, you need to push the code into a&nbsp;<a href=\"https://cloud.google.com/source-repositories/\" target=\"_blank\">Cloud Source Repository</a>&nbsp;so Stackdriver Trace can reference your source code:</p>\n" +
                    "<p>1. Configure git:</p>\n" +
                    "<pre><code><span class=\"pln\">git config </span><span class=\"pun\">--</span><span class=\"kwd\">global</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">email </span><span class=\"str\">\"you@email.com\"</span><span class=\"pln\">\n" +
                    "git config </span><span class=\"pun\">--</span><span class=\"kwd\">global</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"str\">\"Your Name\"</span><span class=\"pln\">\n" +
                    "git config credential</span><span class=\"pun\">.</span><span class=\"pln\">helper gcloud</span><span class=\"pun\">.</span><span class=\"pln\">sh</span></code></pre>\n" +
                    "<p>3. Add your Cloud Source Repository as a git remote:</p>\n" +
                    "<pre><code><span class=\"pln\">git remote </span><span class=\"kwd\">add</span><span class=\"pln\"> google https</span><span class=\"pun\">:</span><span class=\"com\">//source.developers.google.com/p/YOUR_PROJECT_ID/r/default</span></code></pre>\n" +
                    "<p>replacing&nbsp;<code>YOUR_PROJECT_ID</code>&nbsp;with your project ID.</p>\n" +
                    "<p>4. Push the code into the Cloud Source Repository:</p>\n" +
                    "<pre><code><span class=\"pln\">git push </span><span class=\"pun\">--</span><span class=\"pln\">all google</span></code></pre>\n" +
                    "<p>5. Start the app again:</p>\n" +
                    "<pre><code><span class=\"pln\">npm start</span></code></pre>\n" +
                    "<h2>5. Go to the&nbsp;<a href=\"https://console.cloud.google.com/debug\" target=\"_blank\">Stackdriver Debugger Dashboard</a>. You should see something like this:</h2>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/49fb057dcadeecd.png\" /></p>\n" +
                    "<p>6. Click on line number 48 to capture a snapshot:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/ebeb35323f636660.png\" /></p>\n" +
                    "<p>7. Now visit your running app and refresh the page. Now go back to the Debugger Dashboard, you should see something like this:</p>\n" +
                    "<p><img src=\"https://codelabs.developers.google.com/codelabs/cloud-cardboard-viewer/img/bc33513242009ffd.png\" /></p>\n" +
                    "<h2><strong>Summary</strong></h2>\n" +
                    "<p>In this step you learned how to use Stackdriver Debugger to debug your locally running application.</p>\n" +
                    "<h2><strong>Next up</strong></h2>\n" +
                    "<p>Next, you will deploy the application to Google App Engine Flexible Environment.</p>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<footer id=\"controls\" class=\"style-scope google-codelab\">\n" +
                    "<div class=\"fabs layout horizontal justified style-scope google-codelab\">Back\n" +
                    "<div class=\"style-scope google-codelab\">Next</div>\n" +
                    "</div>\n" +
                    "</footer></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<div id=\"scrim\" class=\"style-scope app-drawer\">&nbsp;</div>\n" +
                    "<div id=\"contentContainer\" class=\"style-scope app-drawer\">\n" +
                    "<div class=\"drawer-content-wrapper layout vertical style-scope google-codelab\">\n" +
                    "<div class=\"flex style-scope google-codelab\">\n" +
                    "<div class=\"selectable-content style-scope paper-menu\">&nbsp;</div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "</div>");
            sec5Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec5Node7);

            Section sec6Node7 = new Section();
            sec6Node7.setOrdinalNumber(6);
            sec6Node7.setDescription("Streaming calls");
            sec6Node7.setContent("<p>Cloud Speech API also allows you to you to stream audio via rpc to do real-time speech to text, for example live news feed, or a speech enabled dictation system.</p>\n" +
                    "<p>Run the stream and listen version of the command to invoke a real-time streaming request to take input from your microphone, send it to Cloud Speech API and transcribe it:</p>\n" +
                    "<pre>node recognize stream ./resources/audio.raw\n" +
                    "\n" +
                    "node recognize listen</pre>\n" +
                    "<p>Look at the&nbsp;<em>streamingRecognize</em>&nbsp;and&nbsp;<em>streamingMicRecognize</em>&nbsp;functions to understand how the above commands work.</p>");
            sec6Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec6Node7);

            Section sec7Node7 = new Section();
            sec7Node7.setOrdinalNumber(7);
            sec7Node7.setDescription("Summary");
            sec7Node7.setContent("<p>In this lab you ran a Node.js instance to send streaming and non streaming requests to Speech API to transcribe recorded audio</p>");
            sec7Node7.setLesson(nodeJsLesson7);
            nodeJsLesson7.getSections().add(sec7Node7);

            Section sec1React1 = new Section();
            sec1React1.setOrdinalNumber(1);
            sec1React1.setDescription("Introducing JSX");
            sec1React1.setContent("<p>Consider this variable declaration:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This funny tag syntax is neither a string nor HTML.</p>\n" +
                    "<p>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.</p>\n" +
                    "<p>JSX produces React &ldquo;elements&rdquo;. We will explore rendering them to the DOM in the&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html\">next section</a>. Below, you can find the basics of JSX necessary to get you started.</p>\n" +
                    "<h3 id=\"why-jsx\">Why JSX?</h3>\n" +
                    "<p>React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.</p>\n" +
                    "<p>Instead of artificially separating&nbsp;<em>technologies</em>&nbsp;by putting markup and logic in separate files, React&nbsp;<a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separates&nbsp;<em>concerns</em></a>&nbsp;with loosely coupled units called &ldquo;components&rdquo; that contain both. We will come back to components in a&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html\">further section</a>, but if you&rsquo;re not yet comfortable putting markup in JS,&nbsp;<a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">this talk</a>&nbsp;might convince you otherwise.</p>\n" +
                    "<p>React&nbsp;<a href=\"https://reactjs.org/docs/react-without-jsx.html\">doesn&rsquo;t require</a>&nbsp;using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.</p>\n" +
                    "<p>With that out of the way, let&rsquo;s get started!</p>\n" +
                    "<h3 id=\"embedding-expressions-in-jsx\">Embedding Expressions in JSX</h3>\n" +
                    "<p>In the example below, we declare a variable called&nbsp;<code class=\"gatsby-code-text\">name</code>&nbsp;and then use it inside JSX by wrapping it in curly braces:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Josh Perez'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  element<span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You can put any valid&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">JavaScript expression</a>&nbsp;inside the curly braces in JSX. For example,&nbsp;<code class=\"gatsby-code-text\">2 + 2</code>,&nbsp;<code class=\"gatsby-code-text\">user.firstName</code>, or&nbsp;<code class=\"gatsby-code-text\">formatName(user)</code>&nbsp;are all valid JavaScript expressions.</p>\n" +
                    "<p>In the example below, we embed the result of calling a JavaScript function,&nbsp;<code class=\"gatsby-code-text\">formatName(user)</code>, into an&nbsp;<code class=\"gatsby-code-text\">&lt;h1&gt;</code>&nbsp;element.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Harper'</span><span class=\"token punctuation\">,</span>\n" +
                    "  lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Perez'</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span>\n" +
                    "</span>  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  element<span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/introducing-jsx\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>We split JSX over multiple lines for readability. While it isn&rsquo;t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of&nbsp;<a href=\"http://stackoverflow.com/q/2846283\">automatic semicolon insertion</a>.</p>\n" +
                    "<h3 id=\"jsx-is-an-expression-too\">JSX is an Expression Too</h3>\n" +
                    "<p>After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.</p>\n" +
                    "<p>This means that you can use JSX inside of&nbsp;<code class=\"gatsby-code-text\">if</code>&nbsp;statements and&nbsp;<code class=\"gatsby-code-text\">for</code>&nbsp;loops, assign it to variables, accept it as arguments, and return it from functions:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">getGreeting</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, Stranger.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"specifying-attributes-with-jsx\">Specifying Attributes with JSX</h3>\n" +
                    "<p>You may use quotes to specify string literals as attributes:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">tabIndex</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You may also use curly braces to embed a JavaScript expression in an attribute:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Don&rsquo;t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Warning:</strong></p>\n" +
                    "<p>Since JSX is closer to JavaScript than to HTML, React DOM uses&nbsp;<code class=\"gatsby-code-text\">camelCase</code>&nbsp;property naming convention instead of HTML attribute names.</p>\n" +
                    "<p>For example,&nbsp;<code class=\"gatsby-code-text\">class</code>&nbsp;becomes&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/className\"><code class=\"gatsby-code-text\">className</code></a>&nbsp;in JSX, and&nbsp;<code class=\"gatsby-code-text\">tabindex</code>&nbsp;becomes&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex\"><code class=\"gatsby-code-text\">tabIndex</code></a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"specifying-children-with-jsx\">Specifying Children with JSX</h3>\n" +
                    "<p>If a tag is empty, you may close it immediately with&nbsp;<code class=\"gatsby-code-text\">/&gt;</code>, like XML:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>JSX tags may contain children:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Good to see you here.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"jsx-prevents-injection-attacks\">JSX Prevents Injection Attacks</h3>\n" +
                    "<p>It is safe to embed user input in JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>potentiallyMaliciousInput<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token comment\">// This is safe:</span>\n" +
                    "<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>By default, React DOM&nbsp;<a href=\"http://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escapes</a>&nbsp;any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that&rsquo;s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent&nbsp;<a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a>&nbsp;attacks.</p>\n" +
                    "<h3 id=\"jsx-represents-objects\">JSX Represents Objects</h3>\n" +
                    "<p>Babel compiles JSX down to&nbsp;<code class=\"gatsby-code-text\">React.createElement()</code>&nbsp;calls.</p>\n" +
                    "<p>These two examples are identical:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1 <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "    Hello, world!\n" +
                    "  </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token string\">'Hello, world!'</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">React.createElement()</code>&nbsp;performs a few checks to help you write bug-free code but essentially it creates an object like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Note: this structure is simplified</span>\n" +
                    "<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n" +
                    "  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "    className<span class=\"token punctuation\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">,</span>\n" +
                    "    children<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello, world!'</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>These objects are called &ldquo;React elements&rdquo;. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.</p>\n" +
                    "<p>We will explore rendering React elements to the DOM in the next section.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Tip:</strong></p>\n" +
                    "<p>We recommend using the&nbsp;<a href=\"http://babeljs.io/docs/editors\">&ldquo;Babel&rdquo; language definition</a>&nbsp;for your editor of choice so that both ES6 and JSX code is properly highlighted. This website uses the&nbsp;<a href=\"https://labs.voronianski.com/oceanic-next-color-scheme/\">Oceanic Next</a>&nbsp;color scheme which is compatible with it.</p>\n" +
                    "</blockquote>");
            sec1React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec1React1);

            Section sec2React1 = new Section();
            sec2React1.setOrdinalNumber(2);
            sec2React1.setDescription("Rendering Elements");
            sec2React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Elements are the smallest building blocks of React apps.</p>\n" +
                    "<p>An element describes what you want to see on the screen:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>One might confuse elements with a more widely known concept of &ldquo;components&rdquo;. We will introduce components in the&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html\">next section</a>. Elements are what components are &ldquo;made of&rdquo;, and we encourage you to read this section before jumping ahead.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"rendering-an-element-into-the-dom\">Rendering an Element into the DOM</h2>\n" +
                    "<p>Let&rsquo;s say there is a&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;somewhere in your HTML file:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We call this a &ldquo;root&rdquo; DOM node because everything inside it will be managed by React DOM.</p>\n" +
                    "<p>Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</p>\n" +
                    "<p>To render a React element into a root DOM node, pass both to&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/render-an-element\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>It displays &ldquo;Hello, world&rdquo; on the page.</p>\n" +
                    "<h2 id=\"updating-the-rendered-element\">Updating the Rendered Element</h2>\n" +
                    "<p>React elements are&nbsp;<a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a>. Once you create an element, you can&rsquo;t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.</p>\n" +
                    "<p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>.</p>\n" +
                    "<p>Consider this ticking clock example:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>It calls&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;every second from a&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\"><code class=\"gatsby-code-text\">setInterval()</code></a>&nbsp;callback.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>In practice, most React apps only call&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;once. In the next sections we will learn how such code gets encapsulated into&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">stateful components</a>.</p>\n" +
                    "<p>We recommend that you don&rsquo;t skip topics because they build on each other.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"react-only-updates-whats-necessary\">React Only Updates What&rsquo;s Necessary</h2>\n" +
                    "<p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>\n" +
                    "<p>You can verify by inspecting the&nbsp;<a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\" target=\"_blank\" rel=\"noreferrer\">last example</a>&nbsp;with the browser tools:</p>\n" +
                    "<p><img src=\"https://reactjs.org/granular-dom-updates-c158617ed7cc0eac8f58330e49e48224.gif\" alt=\"DOM inspector showing granular updates\" /></p>\n" +
                    "<p>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents has changed gets updated by React DOM.</p>\n" +
                    "<p>In our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs.</p>\n" +
                    "</div>");
            sec2React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec2React1);

            Section sec3React1 = new Section();
            sec3React1.setOrdinalNumber(3);
            sec3React1.setDescription("Components and Props");
            sec3React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a&nbsp;<a href=\"https://reactjs.org/docs/react-component.html\">detailed component API reference here</a>.</p>\n" +
                    "<p>Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called &ldquo;props&rdquo;) and return React elements describing what should appear on the screen.</p>\n" +
                    "<h2 id=\"function-and-class-components\">Function and Class Components</h2>\n" +
                    "<p>The simplest way to define a component is to write a JavaScript function:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This function is a valid React component because it accepts a single &ldquo;props&rdquo; (which stands for properties) object argument with data and returns a React element. We call such components &ldquo;function components&rdquo; because they are literally JavaScript functions.</p>\n" +
                    "<p>You can also use an&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a>&nbsp;to define a component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The above two components are equivalent from React&rsquo;s point of view.</p>\n" +
                    "<p>Classes have some additional features that we will discuss in the&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">next sections</a>. Until then, we will use function components for their conciseness.</p>\n" +
                    "<h2 id=\"rendering-a-component\">Rendering a Component</h2>\n" +
                    "<p>Previously, we only encountered React elements that represent DOM tags:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>However, elements can also represent user-defined components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Welcome <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object. We call this object &ldquo;props&rdquo;.</p>\n" +
                    "<p>For example, this code renders &ldquo;Hello, Sara&rdquo; on the page:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Welcome <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  element<span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/rendering-a-component\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Let&rsquo;s recap what happens in this example:</p>\n" +
                    "<ol>\n" +
                    "<li>We call&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;with the&nbsp;<code class=\"gatsby-code-text\">&lt;Welcome name=\"Sara\" /&gt;</code>&nbsp;element.</li>\n" +
                    "<li>React calls the&nbsp;<code class=\"gatsby-code-text\">Welcome</code>&nbsp;component with&nbsp;<code class=\"gatsby-code-text\">{name: 'Sara'}</code>&nbsp;as the props.</li>\n" +
                    "<li>Our&nbsp;<code class=\"gatsby-code-text\">Welcome</code>&nbsp;component returns a&nbsp;<code class=\"gatsby-code-text\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>&nbsp;element as the result.</li>\n" +
                    "<li>React DOM efficiently updates the DOM to match&nbsp;<code class=\"gatsby-code-text\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>.</li>\n" +
                    "</ol>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong>&nbsp;Always start component names with a capital letter.</p>\n" +
                    "<p>React treats components starting with lowercase letters as DOM tags. For example,&nbsp;<code class=\"gatsby-code-text\">&lt;div /&gt;</code>represents an HTML div tag, but&nbsp;<code class=\"gatsby-code-text\">&lt;Welcome /&gt;</code>&nbsp;represents a component and requires&nbsp;<code class=\"gatsby-code-text\">Welcome</code>to be in scope.</p>\n" +
                    "<p>You can read more about the reasoning behind this convention&nbsp;<a href=\"https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized\">here.</a></p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"composing-components\">Composing Components</h2>\n" +
                    "<p>Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.</p>\n" +
                    "<p>For example, we can create an&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;component that renders&nbsp;<code class=\"gatsby-code-text\">Welcome</code>&nbsp;many times:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Welcome <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Welcome <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Cahal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Welcome <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Edite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/composing-components\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Typically, new React apps have a single&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like&nbsp;<code class=\"gatsby-code-text\">Button</code>&nbsp;and gradually work your way to the top of the view hierarchy.</p>\n" +
                    "<h2 id=\"extracting-components\">Extracting Components</h2>\n" +
                    "<p>Don&rsquo;t be afraid to split components into smaller components.</p>\n" +
                    "<p>For example, consider this&nbsp;<code class=\"gatsby-code-text\">Comment</code>&nbsp;component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span>\n" +
                    "          <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span>\n" +
                    "          <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n" +
                    "        <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>It accepts&nbsp;<code class=\"gatsby-code-text\">author</code>&nbsp;(an object),&nbsp;<code class=\"gatsby-code-text\">text</code>&nbsp;(a string), and&nbsp;<code class=\"gatsby-code-text\">date</code>&nbsp;(a date) as props, and describes a comment on a social media website.</p>\n" +
                    "<p>This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let&rsquo;s extract a few components from it.</p>\n" +
                    "<p>First, we will extract&nbsp;<code class=\"gatsby-code-text\">Avatar</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span>\n" +
                    "</span>      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n" +
                    "    <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;doesn&rsquo;t need to know that it is being rendered inside a&nbsp;<code class=\"gatsby-code-text\">Comment</code>. This is why we have given its prop a more generic name:&nbsp;<code class=\"gatsby-code-text\">user</code>&nbsp;rather than&nbsp;<code class=\"gatsby-code-text\">author</code>.</p>\n" +
                    "<p>We recommend naming props from the component&rsquo;s own point of view rather than the context in which it is being used.</p>\n" +
                    "<p>We can now simplify&nbsp;<code class=\"gatsby-code-text\">Comment</code>&nbsp;a tiny bit:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Avatar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Next, we will extract a&nbsp;<code class=\"gatsby-code-text\">UserInfo</code>&nbsp;component that renders an&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;next to the user&rsquo;s name:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserInfo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Avatar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This lets us simplify&nbsp;<code class=\"gatsby-code-text\">Comment</code>&nbsp;even further:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UserInfo <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components-continued\" target=\"_blank\" rel=\"noreferrer\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Extracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (<code class=\"gatsby-code-text\">Button</code>,&nbsp;<code class=\"gatsby-code-text\">Panel</code>,&nbsp;<code class=\"gatsby-code-text\">Avatar</code>), or is complex enough on its own (<code class=\"gatsby-code-text\">App</code>,&nbsp;<code class=\"gatsby-code-text\">FeedStory</code>,&nbsp;<code class=\"gatsby-code-text\">Comment</code>), it is a good candidate to be a reusable component.</p>\n" +
                    "<h2 id=\"props-are-read-only\">Props are Read-Only</h2>\n" +
                    "<p>Whether you declare a component&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#function-and-class-components\">as a function or a class</a>, it must never modify its own props. Consider this&nbsp;<code class=\"gatsby-code-text\">sum</code>&nbsp;function:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Such functions are called&nbsp;<a href=\"https://en.wikipedia.org/wiki/Pure_function\">&ldquo;pure&rdquo;</a>&nbsp;because they do not attempt to change their inputs, and always return the same result for the same inputs.</p>\n" +
                    "<p>In contrast, this function is impure because it changes its own input:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  account<span class=\"token punctuation\">.</span>total <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React is pretty flexible but it has a single strict rule:</p>\n" +
                    "<p><strong>All React components must act like pure functions with respect to their props.</strong></p>\n" +
                    "<p>Of course, application UIs are dynamic and change over time. In the&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">next section</a>, we will introduce a new concept of &ldquo;state&rdquo;. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.</p>\n" +
                    "</div>");
            sec3React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec3React1);

            Section sec4React1 = new Section();
            sec4React1.setOrdinalNumber(4);
            sec4React1.setDescription("State and Lifecycle");
            sec4React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>This page introduces the concept of state and lifecycle in a React component. You can find a&nbsp;<a href=\"https://reactjs.org/docs/react-component.html\">detailed component API reference here</a>.</p>\n" +
                    "<p>Consider the ticking clock example from&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html#updating-the-rendered-element\">one of the previous sections</a>. In&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom\">Rendering Elements</a>, we have only learned one way to update the UI. We call&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;to change the rendered output:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    element<span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/gwoJZk?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>In this section, we will learn how to make the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component truly reusable and encapsulated. It will set up its own timer and update itself every second.</p>\n" +
                    "<p>We can start by encapsulating how the clock looks:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/dpdoYR?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>However, it misses a crucial requirement: the fact that the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;sets up a timer and updates the UI every second should be an implementation detail of the&nbsp;<code class=\"gatsby-code-text\">Clock</code>.</p>\n" +
                    "<p>Ideally we want to write this once and have the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;update itself:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>To implement this, we need to add &ldquo;state&rdquo; to the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component.</p>\n" +
                    "<p>State is similar to props, but it is private and fully controlled by the component.</p>\n" +
                    "<p>We&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">mentioned before</a>&nbsp;that components defined as classes have some additional features. Local state is exactly that: a feature available only to classes.</p>\n" +
                    "<h2 id=\"converting-a-function-to-a-class\">Converting a Function to a Class</h2>\n" +
                    "<p>You can convert a function component like&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;to a class in five steps:</p>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p>Create an&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a>, with the same name, that extends&nbsp;<code class=\"gatsby-code-text\">React.Component</code>.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Add a single empty method to it called&nbsp;<code class=\"gatsby-code-text\">render()</code>.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Move the body of the function into the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Replace&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;with&nbsp;<code class=\"gatsby-code-text\">this.props</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;body.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Delete the remaining empty function declaration.</p>\n" +
                    "</li>\n" +
                    "</ol>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/zKRGpo?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p><code class=\"gatsby-code-text\">Clock</code>&nbsp;is now defined as a class rather than a function.</p>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method will be called each time an update happens, but as long as we render&nbsp;<code class=\"gatsby-code-text\">&lt;Clock /&gt;</code>&nbsp;into the same DOM node, only a single instance of the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;class will be used. This lets us use additional features such as local state and lifecycle methods.</p>\n" +
                    "<h2 id=\"adding-local-state-to-a-class\">Adding Local State to a Class</h2>\n" +
                    "<p>We will move the&nbsp;<code class=\"gatsby-code-text\">date</code>&nbsp;from props to state in three steps:</p>\n" +
                    "<ol>\n" +
                    "<li>Replace&nbsp;<code class=\"gatsby-code-text\">this.props.date</code>&nbsp;with&nbsp;<code class=\"gatsby-code-text\">this.state.date</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method:</li>\n" +
                    "</ol>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<ol start=\"2\">\n" +
                    "<li>Add a&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor\">class constructor</a>&nbsp;that assigns the initial&nbsp;<code class=\"gatsby-code-text\">this.state</code>:</li>\n" +
                    "</ol>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note how we pass&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;to the base constructor:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Class components should always call the base constructor with&nbsp;<code class=\"gatsby-code-text\">props</code>.</p>\n" +
                    "<ol start=\"3\">\n" +
                    "<li>Remove the&nbsp;<code class=\"gatsby-code-text\">date</code>&nbsp;prop from the&nbsp;<code class=\"gatsby-code-text\">&lt;Clock /&gt;</code>&nbsp;element:</li>\n" +
                    "</ol>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We will later add the timer code back to the component itself.</p>\n" +
                    "<p>The result looks like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/KgQpJd?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Next, we&rsquo;ll make the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;set up its own timer and update itself every second.</p>\n" +
                    "<h2 id=\"adding-lifecycle-methods-to-a-class\">Adding Lifecycle Methods to a Class</h2>\n" +
                    "<p>In applications with many components, it&rsquo;s very important to free up resources taken by the components when they are destroyed.</p>\n" +
                    "<p>We want to&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">set up a timer</a>&nbsp;whenever the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;is rendered to the DOM for the first time. This is called &ldquo;mounting&rdquo; in React.</p>\n" +
                    "<p>We also want to&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval\">clear that timer</a>&nbsp;whenever the DOM produced by the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;is removed. This is called &ldquo;unmounting&rdquo; in React.</p>\n" +
                    "<p>We can declare special methods on the component class to run some code when a component mounts and unmounts:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>These methods are called &ldquo;lifecycle methods&rdquo;.</p>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">componentDidMount()</code>&nbsp;method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token number\">1000</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note how we save the timer ID right on&nbsp;<code class=\"gatsby-code-text\">this</code>.</p>\n" +
                    "<p>While&nbsp;<code class=\"gatsby-code-text\">this.props</code>&nbsp;is set up by React itself and&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;has a special meaning, you are free to add additional fields to the class manually if you need to store something that doesn&rsquo;t participate in the data flow (like a timer ID).</p>\n" +
                    "<p>We will tear down the timer in the&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount()</code>&nbsp;lifecycle method:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Finally, we will implement a method called&nbsp;<code class=\"gatsby-code-text\">tick()</code>&nbsp;that the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component will run every second.</p>\n" +
                    "<p>It will use&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>&nbsp;to schedule updates to the component local state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n" +
                    "      <span class=\"token number\">1000</span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/amqdNA?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Now the clock ticks every second.</p>\n" +
                    "<p>Let&rsquo;s quickly recap what&rsquo;s going on and the order in which the methods are called:</p>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p>When&nbsp;<code class=\"gatsby-code-text\">&lt;Clock /&gt;</code>&nbsp;is passed to&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>, React calls the constructor of the&nbsp;<code class=\"gatsby-code-text\">Clock</code>component. Since&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;needs to display the current time, it initializes&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;with an object including the current time. We will later update this state.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>React then calls the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component&rsquo;s&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&rsquo;s render output.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>When the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;output is inserted in the DOM, React calls the&nbsp;<code class=\"gatsby-code-text\">componentDidMount()</code>&nbsp;lifecycle method. Inside it, the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component asks the browser to set up a timer to call the component&rsquo;s&nbsp;<code class=\"gatsby-code-text\">tick()</code>&nbsp;method once a second.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Every second the browser calls the&nbsp;<code class=\"gatsby-code-text\">tick()</code>&nbsp;method. Inside it, the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component schedules a UI update by calling&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;with an object containing the current time. Thanks to the&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;call, React knows the state has changed, and calls the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method again to learn what should be on the screen. This time,&nbsp;<code class=\"gatsby-code-text\">this.state.date</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>If the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;component is ever removed from the DOM, React calls the&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount()</code>&nbsp;lifecycle method so the timer is stopped.</p>\n" +
                    "</li>\n" +
                    "</ol>\n" +
                    "<h2 id=\"using-state-correctly\">Using State Correctly</h2>\n" +
                    "<p>There are three things you should know about&nbsp;<code class=\"gatsby-code-text\">setState()</code>.</p>\n" +
                    "<h3 id=\"do-not-modify-state-directly\">Do Not Modify State Directly</h3>\n" +
                    "<p>For example, this will not re-render a component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Wrong</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Instead, use&nbsp;<code class=\"gatsby-code-text\">setState()</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Correct</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The only place where you can assign&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;is the constructor.</p>\n" +
                    "<h3 id=\"state-updates-may-be-asynchronous\">State Updates May Be Asynchronous</h3>\n" +
                    "<p>React may batch multiple&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;calls into a single update for performance.</p>\n" +
                    "<p>Because&nbsp;<code class=\"gatsby-code-text\">this.props</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;may be updated asynchronously, you should not rely on their values for calculating the next state.</p>\n" +
                    "<p>For example, this code may fail to update the counter:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Wrong</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  counter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>To fix it, use a second form of&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Correct</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  counter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We used an&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a>&nbsp;above, but it also works with regular functions:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Correct</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n" +
                    "    counter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"state-updates-are-merged\">State Updates are Merged</h3>\n" +
                    "<p>When you call&nbsp;<code class=\"gatsby-code-text\">setState()</code>, React merges the object you provide into the current state.</p>\n" +
                    "<p>For example, your state may contain several independent variables:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      posts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      comments<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n" +
                    "</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Then you can update them independently with separate&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;calls:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        posts<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>posts\n" +
                    "</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">fetchComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        comments<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>comments\n" +
                    "</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The merging is shallow, so&nbsp;<code class=\"gatsby-code-text\">this.setState({comments})</code>&nbsp;leaves&nbsp;<code class=\"gatsby-code-text\">this.state.posts</code>&nbsp;intact, but completely replaces&nbsp;<code class=\"gatsby-code-text\">this.state.comments</code>.</p>\n" +
                    "<h2 id=\"the-data-flows-down\">The Data Flows Down</h2>\n" +
                    "<p>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn&rsquo;t care whether it is defined as a function or a class.</p>\n" +
                    "<p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>\n" +
                    "<p>A component may choose to pass its state down as props to its child components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This also works for user-defined components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FormattedDate <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">FormattedDate</code>&nbsp;component would receive the&nbsp;<code class=\"gatsby-code-text\">date</code>&nbsp;in its props and wouldn&rsquo;t know whether it came from the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&rsquo;s state, from the&nbsp;<code class=\"gatsby-code-text\">Clock</code>&rsquo;s props, or was typed by hand:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormattedDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/zKRqNB?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>This is commonly called a &ldquo;top-down&rdquo; or &ldquo;unidirectional&rdquo; data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components &ldquo;below&rdquo; them in the tree.</p>\n" +
                    "<p>If you imagine a component tree as a waterfall of props, each component&rsquo;s state is like an additional water source that joins it at an arbitrary point but also flows down.</p>\n" +
                    "<p>To show that all components are truly isolated, we can create an&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;component that renders three&nbsp;<code class=\"gatsby-code-text\">&lt;Clock&gt;</code>s:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Clock <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/vXdGmd?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Each&nbsp;<code class=\"gatsby-code-text\">Clock</code>&nbsp;sets up its own timer and updates independently.</p>\n" +
                    "<p>In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.</p>\n" +
                    "</div>");
            sec4React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec4React1);

            Section sec5React1 = new Section();
            sec5React1.setOrdinalNumber(5);
            sec5React1.setDescription("Handling Events");
            sec5React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences:</p>\n" +
                    "<ul>\n" +
                    "<li>React events are named using camelCase, rather than lowercase.</li>\n" +
                    "<li>With JSX you pass a function as the event handler, rather than a string.</li>\n" +
                    "</ul>\n" +
                    "<p>For example, the HTML:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>activateLasers()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  Activate Lasers\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>is slightly different in React:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>activateLasers<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">  Activate Lasers</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Another difference is that you cannot return&nbsp;<code class=\"gatsby-code-text\">false</code>&nbsp;to prevent default behavior in React. You must call&nbsp;<code class=\"gatsby-code-text\">preventDefault</code>&nbsp;explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>console.log(<span class=\"token punctuation\">'</span>The link was clicked.<span class=\"token punctuation\">'</span>); return false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  Click me\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In React, this could instead be:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ActionLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The link was clicked.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">      Click me</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Here,&nbsp;<code class=\"gatsby-code-text\">e</code>&nbsp;is a synthetic event. React defines these synthetic events according to the&nbsp;<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">W3C spec</a>, so you don&rsquo;t need to worry about cross-browser compatibility. See the&nbsp;<a href=\"https://reactjs.org/docs/events.html\"><code class=\"gatsby-code-text\">SyntheticEvent</code></a>reference guide to learn more.</p>\n" +
                    "<p>When using React you should generally not need to call&nbsp;<code class=\"gatsby-code-text\">addEventListener</code>&nbsp;to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.</p>\n" +
                    "<p>When you define a component using an&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a>, a common pattern is for an event handler to be a method on the class. For example, this&nbsp;<code class=\"gatsby-code-text\">Toggle</code>&nbsp;component renders a button that lets the user toggle between &ldquo;ON&rdquo; and &ldquo;OFF&rdquo; states:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isToggleOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// This binding is necessary to make `this` work in the callback</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      isToggleOn<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>isToggleOn\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isToggleOn <span class=\"token operator\">?</span> <span class=\"token string\">'ON'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'OFF'</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toggle <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/xEmzGg?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>You have to be careful about the meaning of&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;in JSX callbacks. In JavaScript, class methods are not&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">bound</a>&nbsp;by default. If you forget to bind&nbsp;<code class=\"gatsby-code-text\">this.handleClick</code>&nbsp;and pass it to&nbsp;<code class=\"gatsby-code-text\">onClick</code>,&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;will be&nbsp;<code class=\"gatsby-code-text\">undefined</code>&nbsp;when the function is actually called.</p>\n" +
                    "<p>This is not React-specific behavior; it is a part of&nbsp;<a href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\">how functions work in JavaScript</a>. Generally, if you refer to a method without&nbsp;<code class=\"gatsby-code-text\">()</code>&nbsp;after it, such as&nbsp;<code class=\"gatsby-code-text\">onClick={this.handleClick}</code>, you should bind that method.</p>\n" +
                    "<p>If calling&nbsp;<code class=\"gatsby-code-text\">bind</code>&nbsp;annoys you, there are two ways you can get around this. If you are using the experimental&nbsp;<a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">public class fields syntax</a>, you can use class fields to correctly bind callbacks:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// This syntax ensures `this` is bound within handleClick.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Warning: this is *experimental* syntax.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">        Click me</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This syntax is enabled by default in&nbsp;<a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>.</p>\n" +
                    "<p>If you aren&rsquo;t using class fields syntax, you can use an&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a>&nbsp;in the callback:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// This syntax ensures `this` is bound within handleClick</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">        Click me</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The problem with this syntax is that a different callback is created each time the&nbsp;<code class=\"gatsby-code-text\">LoggingButton</code>&nbsp;renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.</p>\n" +
                    "<h2 id=\"passing-arguments-to-event-handlers\">Passing Arguments to Event Handlers</h2>\n" +
                    "<p>Inside a loop it is common to want to pass an extra parameter to an event handler. For example, if&nbsp;<code class=\"gatsby-code-text\">id</code>&nbsp;is the row ID, either of the following would work:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Delete Row</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deleteRow<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Delete Row</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The above two lines are equivalent, and use&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a>&nbsp;and&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"><code class=\"gatsby-code-text\">Function.prototype.bind</code></a>respectively.</p>\n" +
                    "<p>In both cases, the&nbsp;<code class=\"gatsby-code-text\">e</code>&nbsp;argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with&nbsp;<code class=\"gatsby-code-text\">bind</code>&nbsp;any further arguments are automatically forwarded.</p>\n" +
                    "</div>");
            sec5React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec5React1);

            Section sec6React1 = new Section();
            sec6React1.setOrdinalNumber(6);
            sec6React1.setDescription("Conditional Rendering");
            sec6React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.</p>\n" +
                    "<p>Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code class=\"gatsby-code-text\">if</code></a>&nbsp;or the&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional operator</a>&nbsp;to create elements representing the current state, and let React update the UI to match them.</p>\n" +
                    "<p>Consider these two components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserGreeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Welcome back!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">GuestGreeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Please sign up.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We&rsquo;ll create a&nbsp;<code class=\"gatsby-code-text\">Greeting</code>&nbsp;component that displays either of these components depending on whether a user is logged in:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UserGreeting <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GuestGreeting <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token comment\">// Try changing to isLoggedIn={true}:</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Greeting <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>This example renders a different greeting depending on the value of&nbsp;<code class=\"gatsby-code-text\">isLoggedIn</code>&nbsp;prop.</p>\n" +
                    "<h3 id=\"element-variables\">Element Variables</h3>\n" +
                    "<p>You can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn&rsquo;t change.</p>\n" +
                    "<p>Consider these two new components representing Logout and Login buttons:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">LoginButton</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "      Login\n" +
                    "    </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">LogoutButton</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "      Logout\n" +
                    "    </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In the example below, we will create a&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class\">stateful component</a>&nbsp;called&nbsp;<code class=\"gatsby-code-text\">LoginControl</code>.</p>\n" +
                    "<p>It will render either&nbsp;<code class=\"gatsby-code-text\">&lt;LoginButton /&gt;</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">&lt;LogoutButton /&gt;</code>&nbsp;depending on its current state. It will also render a&nbsp;<code class=\"gatsby-code-text\">&lt;Greeting /&gt;</code>&nbsp;from the previous example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginControl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">let</span> button<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogoutButton <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginButton <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Greeting <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>button<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginControl <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>While declaring a variable and using an&nbsp;<code class=\"gatsby-code-text\">if</code>&nbsp;statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.</p>\n" +
                    "<h3 id=\"inline-if-with-logical--operator\">Inline If with Logical &amp;&amp; Operator</h3>\n" +
                    "<p>You may&nbsp;<a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">embed any expressions in JSX</a>&nbsp;by wrapping them in curly braces. This includes the JavaScript logical&nbsp;<code class=\"gatsby-code-text\">&amp;&amp;</code>&nbsp;operator. It can be handy for conditionally including an element:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Mailbox</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> unreadMessages <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>unreadMessages<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          You have </span><span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> unread messages.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re: React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re:Re: React'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mailbox <span class=\"token attr-name\">unreadMessages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>It works because in JavaScript,&nbsp;<code class=\"gatsby-code-text\">true &amp;&amp; expression</code>&nbsp;always evaluates to&nbsp;<code class=\"gatsby-code-text\">expression</code>, and&nbsp;<code class=\"gatsby-code-text\">false &amp;&amp; expression</code>&nbsp;always evaluates to&nbsp;<code class=\"gatsby-code-text\">false</code>.</p>\n" +
                    "<p>Therefore, if the condition is&nbsp;<code class=\"gatsby-code-text\">true</code>, the element right after&nbsp;<code class=\"gatsby-code-text\">&amp;&amp;</code>&nbsp;will appear in the output. If it is&nbsp;<code class=\"gatsby-code-text\">false</code>, React will ignore and skip it.</p>\n" +
                    "<h3 id=\"inline-if-else-with-conditional-operator\">Inline If-Else with Conditional Operator</h3>\n" +
                    "<p>Another method for conditionally rendering elements inline is to use the JavaScript conditional operator&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"><code class=\"gatsby-code-text\">condition ? true : false</code></a>.</p>\n" +
                    "<p>In the example below, we use it to conditionally render a small block of text.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      The user is </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token string\">'currently'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'not'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> logged in.</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>It can also be used for larger expressions although it is less obvious what&rsquo;s going on:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogoutButton <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginButton <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Just like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract a component</a>.</p>\n" +
                    "<h3 id=\"preventing-component-from-rendering\">Preventing Component from Rendering</h3>\n" +
                    "<p>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;instead of its render output.</p>\n" +
                    "<p>In the example below, the&nbsp;<code class=\"gatsby-code-text\">&lt;WarningBanner /&gt;</code>&nbsp;is rendered depending on the value of the prop called&nbsp;<code class=\"gatsby-code-text\">warn</code>. If the value of the prop is&nbsp;<code class=\"gatsby-code-text\">false</code>, then the component does not render:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">WarningBanner</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">      Warning!</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>showWarning<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      showWarning<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>showWarning\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WarningBanner <span class=\"token attr-name\">warn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning <span class=\"token operator\">?</span> <span class=\"token string\">'Hide'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Show'</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Returning&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;from a component&rsquo;s&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method does not affect the firing of the component&rsquo;s lifecycle methods. For instance&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>&nbsp;will still be called.</p>\n" +
                    "</div>");
            sec6React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec6React1);

            Section sec7React1 = new Section();
            sec7React1.setOrdinalNumber(7);
            sec7React1.setDescription("Lists and Keys");
            sec7React1.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>First, let&rsquo;s review how you transform lists in JavaScript.</p>\n" +
                    "<p>Given the code below, we use the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"gatsby-code-text\">map()</code></a>&nbsp;function to take an array of&nbsp;<code class=\"gatsby-code-text\">numbers</code>&nbsp;and double their values. We assign the new array returned by&nbsp;<code class=\"gatsby-code-text\">map()</code>&nbsp;to the variable&nbsp;<code class=\"gatsby-code-text\">doubled</code>&nbsp;and log it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This code logs&nbsp;<code class=\"gatsby-code-text\">[2, 4, 6, 8, 10]</code>&nbsp;to the console.</p>\n" +
                    "<p>In React, transforming arrays into lists of&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html\">elements</a>&nbsp;is nearly identical.</p>\n" +
                    "<h3 id=\"rendering-multiple-components\">Rendering Multiple Components</h3>\n" +
                    "<p>You can build collections of elements and&nbsp;<a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">include them in JSX</a>&nbsp;using curly braces&nbsp;<code class=\"gatsby-code-text\">{}</code>.</p>\n" +
                    "<p>Below, we loop through the&nbsp;<code class=\"gatsby-code-text\">numbers</code>&nbsp;array using the JavaScript&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"gatsby-code-text\">map()</code></a>&nbsp;function. We return a&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;</code>&nbsp;element for each item. Finally, we assign the resulting array of elements to&nbsp;<code class=\"gatsby-code-text\">listItems</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We include the entire&nbsp;<code class=\"gatsby-code-text\">listItems</code>&nbsp;array inside a&nbsp;<code class=\"gatsby-code-text\">&lt;ul&gt;</code>&nbsp;element, and&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom\">render it to the DOM</a>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/GjPyQr?editors=0011\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>This code displays a bullet list of numbers between 1 and 5.</p>\n" +
                    "<h3 id=\"basic-list-component\">Basic List Component</h3>\n" +
                    "<p>Usually you would render lists inside a&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html\">component</a>.</p>\n" +
                    "<p>We can refactor the previous example into a component that accepts an array of&nbsp;<code class=\"gatsby-code-text\">numbers</code>&nbsp;and outputs an unordered list of elements.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NumberList <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When you run this code, you&rsquo;ll be given a warning that a key should be provided for list items. A &ldquo;key&rdquo; is a special string attribute you need to include when creating lists of elements. We&rsquo;ll discuss why it&rsquo;s important in the next section.</p>\n" +
                    "<p>Let&rsquo;s assign a&nbsp;<code class=\"gatsby-code-text\">key</code>&nbsp;to our list items inside&nbsp;<code class=\"gatsby-code-text\">numbers.map()</code>&nbsp;and fix the missing key issue.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NumberList <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<h2 id=\"keys\">Keys</h2>\n" +
                    "<p>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When you don&rsquo;t have stable IDs for rendered items, you may use the item index as a key as a last resort:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Only do this if items have no stable IDs</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We don&rsquo;t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny&rsquo;s article for an&nbsp;<a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\">in-depth explanation on the negative impacts of using an index as a key</a>. If you choose not to assign an explicit key to list items then React will default to using indexes as keys.</p>\n" +
                    "<p>Here is an&nbsp;<a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\">in-depth explanation about why keys are necessary</a>&nbsp;if you&rsquo;re interested in learning more.</p>\n" +
                    "<h3 id=\"extracting-components-with-keys\">Extracting Components with Keys</h3>\n" +
                    "<p>Keys only make sense in the context of the surrounding array.</p>\n" +
                    "<p>For example, if you&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract</a>&nbsp;a&nbsp;<code class=\"gatsby-code-text\">ListItem</code>&nbsp;component, you should keep the key on the&nbsp;<code class=\"gatsby-code-text\">&lt;ListItem /&gt;</code>&nbsp;elements in the array rather than on the&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;</code>&nbsp;element in the&nbsp;<code class=\"gatsby-code-text\">ListItem</code>&nbsp;itself.</p>\n" +
                    "<p><strong>Example: Incorrect Key Usage</strong></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Wrong! There is no need to specify the key here:</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Wrong! The key should have been specified here:</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListItem <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NumberList <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>Example: Correct Key Usage</strong></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correct! There is no need to specify the key here:</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Correct! Key should be specified inside the array.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListItem <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n" +
                    "</span>              <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NumberList <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>A good rule of thumb is that elements inside the&nbsp;<code class=\"gatsby-code-text\">map()</code>&nbsp;call need keys.</p>\n" +
                    "<h3 id=\"keys-must-only-be-unique-among-siblings\">Keys Must Only Be Unique Among Siblings</h3>\n" +
                    "<p>Keys used within arrays should be unique among their siblings. However they don&rsquo;t need to be globally unique. We can use the same keys when we produce two different arrays:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> sidebar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>          <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n" +
                    "  <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'Welcome to learning React!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Installation'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'You can install React from npm.'</span><span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Blog <span class=\"token attr-name\">posts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Keys serve as a hint to React but they don&rsquo;t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Post\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>    <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>With the example above, the&nbsp;<code class=\"gatsby-code-text\">Post</code>&nbsp;component can read&nbsp;<code class=\"gatsby-code-text\">props.id</code>, but not&nbsp;<code class=\"gatsby-code-text\">props.key</code>.</p>\n" +
                    "<h3 id=\"embedding-map-in-jsx\">Embedding map() in JSX</h3>\n" +
                    "<p>In the examples above we declared a separate&nbsp;<code class=\"gatsby-code-text\">listItems</code>&nbsp;variable and included it in JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListItem <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n" +
                    "</span>              <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>JSX allows&nbsp;<a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">embedding any expression</a>&nbsp;in curly braces so we could inline the&nbsp;<code class=\"gatsby-code-text\">map()</code>&nbsp;result:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListItem <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n" +
                    "</span>                  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Sometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the&nbsp;<code class=\"gatsby-code-text\">map()</code>&nbsp;body is too nested, it might be a good time to&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract a component</a>.</p>\n" +
                    "</div>");
            sec7React1.setLesson(reactJsLesson1);
            reactJsLesson1.getSections().add(sec7React1);

            Section sec1React2 = new Section();
            sec1React2.setOrdinalNumber(1);
            sec1React2.setDescription("Accessibility");
            sec1React2.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"why-accessibility\">Why Accessibility?</h2>\n" +
                    "<p>Web accessibility (also referred to as&nbsp;<a href=\"https://en.wiktionary.org/wiki/a11y\"><strong>a11y</strong></a>) is the design and creation of websites that can be used by everyone. Accessibility support is necessary to allow assistive technology to interpret web pages.</p>\n" +
                    "<p>React fully supports building accessible websites, often by using standard HTML techniques.</p>\n" +
                    "<h2 id=\"standards-and-guidelines\">Standards and Guidelines</h2>\n" +
                    "<h3 id=\"wcag\">WCAG</h3>\n" +
                    "<p>The&nbsp;<a href=\"https://www.w3.org/WAI/intro/wcag\">Web Content Accessibility Guidelines</a>&nbsp;provides guidelines for creating accessible web sites.</p>\n" +
                    "<p>The following WCAG checklists provide an overview:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.wuhcag.com/wcag-checklist/\">WCAG checklist from Wuhcag</a></li>\n" +
                    "<li><a href=\"http://webaim.org/standards/wcag/checklist\">WCAG checklist from WebAIM</a></li>\n" +
                    "<li><a href=\"http://a11yproject.com/checklist.html\">Checklist from The A11Y Project</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"wai-aria\">WAI-ARIA</h3>\n" +
                    "<p>The&nbsp;<a href=\"https://www.w3.org/WAI/intro/aria\">Web Accessibility Initiative - Accessible Rich Internet Applications</a>&nbsp;document contains techniques for building fully accessible JavaScript widgets.</p>\n" +
                    "<p>Note that all&nbsp;<code class=\"gatsby-code-text\">aria-*</code>&nbsp;HTML attributes are fully supported in JSX. Whereas most DOM properties and attributes in React are camelCased, these attributes should be hyphen-cased (also known as kebab-case, lisp-case, etc) as they are in plain HTML:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>labelText<span class=\"token punctuation\">}</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n" +
                    "</span>  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onchangeHandler<span class=\"token punctuation\">}</span></span>\n" +
                    "  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span></span>\n" +
                    "  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"semantic-html\">Semantic HTML</h2>\n" +
                    "<p>Semantic HTML is the foundation of accessibility in a web application. Using the various HTML elements to reinforce the meaning of information in our websites will often give us accessibility for free.</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">MDN HTML elements reference</a></li>\n" +
                    "</ul>\n" +
                    "<p>Sometimes we break HTML semantics when we add&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;elements to our JSX to make our React code work, especially when working with lists (<code class=\"gatsby-code-text\">&lt;ol&gt;</code>,&nbsp;<code class=\"gatsby-code-text\">&lt;ul&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;dl&gt;</code>) and the HTML&nbsp;<code class=\"gatsby-code-text\">&lt;table&gt;</code>. In these cases we should rather use&nbsp;<a href=\"https://reactjs.org/docs/fragments.html\">React Fragments</a>&nbsp;to group together multiple elements.</p>\n" +
                    "<p>For example,</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListItem <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You can map a collection of items to an array of fragments as you would any other type of element as well:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token comment\">// Fragments should also have a `key` prop when mapping collections</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Fragment <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When you don&rsquo;t need any props on the Fragment tag you can use the&nbsp;<a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">short syntax</a>, if your tooling supports it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>For more info, see&nbsp;<a href=\"https://reactjs.org/docs/fragments.html\">the Fragments documentation</a>.</p>\n" +
                    "<h2 id=\"accessible-forms\">Accessible Forms</h2>\n" +
                    "<h3 id=\"labeling\">Labeling</h3>\n" +
                    "<p>Every HTML form control, such as&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>, needs to be labeled accessibly. We need to provide descriptive labels that are also exposed to screen readers.</p>\n" +
                    "<p>The following resources show us how to do this:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.w3.org/WAI/tutorials/forms/labels/\">The W3C shows us how to label elements</a></li>\n" +
                    "<li><a href=\"http://webaim.org/techniques/forms/controls\">WebAIM shows us how to label elements</a></li>\n" +
                    "<li><a href=\"https://www.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\">The Paciello Group explains accessible names</a></li>\n" +
                    "</ul>\n" +
                    "<p>Although these standard HTML practices can be directly used in React, note that the&nbsp;<code class=\"gatsby-code-text\">for</code>attribute is written as&nbsp;<code class=\"gatsby-code-text\">htmlFor</code>&nbsp;in JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Name:</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"notifying-the-user-of-errors\">Notifying the user of errors</h3>\n" +
                    "<p>Error situations need to be understood by all users. The following link shows us how to expose error texts to screen readers as well:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\">The W3C demonstrates user notifications</a></li>\n" +
                    "<li><a href=\"http://webaim.org/techniques/formvalidation/\">WebAIM looks at form validation</a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"focus-control\">Focus Control</h2>\n" +
                    "<p>Ensure that your web application can be fully operated with the keyboard only:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/techniques/keyboard/\">WebAIM talks about keyboard accessibility</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"keyboard-focus-and-focus-outline\">Keyboard focus and focus outline</h3>\n" +
                    "<p>Keyboard focus refers to the current element in the DOM that is selected to accept input from the keyboard. We see it everywhere as a focus outline similar to that shown in the following image:</p>\n" +
                    "<a class=\"gatsby-resp-image-link\" href=\"https://reactjs.org/static/keyboard-focus-dec0e6bcc1f882baf76ebc860d4f04e5-9d63d.png\" target=\"_blank\" rel=\"noopener\"><span class=\"gatsby-resp-image-wrapper\"><span class=\"gatsby-resp-image-background-image\"><img class=\"gatsby-resp-image-image\" title=\"\" src=\"https://reactjs.org/static/keyboard-focus-dec0e6bcc1f882baf76ebc860d4f04e5-9d63d.png\" sizes=\"(max-width: 146px) 100vw, 146px\" srcset=\"/static/keyboard-focus-dec0e6bcc1f882baf76ebc860d4f04e5-9d63d.png 146w\" alt=\"Blue keyboard focus outline around a selected link.\" /></span></span></a>\n" +
                    "<p>Only ever use CSS that removes this outline, for example by setting&nbsp;<code class=\"gatsby-code-text\">outline: 0</code>, if you are replacing it with another focus outline implementation.</p>\n" +
                    "<h3 id=\"mechanisms-to-skip-to-desired-content\">Mechanisms to skip to desired content</h3>\n" +
                    "<p>Provide a mechanism to allow users to skip past navigation sections in your application as this assists and speeds up keyboard navigation.</p>\n" +
                    "<p>Skiplinks or Skip Navigation Links are hidden navigation links that only become visible when keyboard users interact with the page. They are very easy to implement with internal page anchors and some styling:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/techniques/skipnav/\">WebAIM - Skip Navigation Links</a></li>\n" +
                    "</ul>\n" +
                    "<p>Also use landmark elements and roles, such as&nbsp;<code class=\"gatsby-code-text\">&lt;main&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;aside&gt;</code>, to demarcate page regions as assistive technology allow the user to quickly navigate to these sections.</p>\n" +
                    "<p>Read more about the use of these elements to enhance accessibility here:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://www.scottohara.me/blog/2018/03/03/landmarks.html\">Accessible Landmarks</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"programmatically-managing-focus\">Programmatically managing focus</h3>\n" +
                    "<p>Our React applications continuously modify the HTML DOM during runtime, sometimes leading to keyboard focus being lost or set to an unexpected element. In order to repair this, we need to programmatically nudge the keyboard focus in the right direction. For example, by resetting keyboard focus to a button that opened a modal window after that modal window is closed.</p>\n" +
                    "<p>MDN Web Docs takes a look at this and describes how we can build&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">keyboard-navigable JavaScript widgets</a>.</p>\n" +
                    "<p>To set focus in React, we can use&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs to DOM elements</a>.</p>\n" +
                    "<p>Using this, we first create a ref to an element in the JSX of a component class:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Create a ref to store the textInput DOM element</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Use the `ref` callback to store a reference to the text input DOM</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// element in an instance field (for example, this.textInput).</span>\n" +
                    "</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>      <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Then we can focus it elsewhere in our component when needed:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Explicitly focus the text input using the raw DOM API</span>\n" +
                    "  <span class=\"token comment\">// Note: we're accessing \"current\" to get the DOM node</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Sometimes a parent component needs to set focus to an element in a child component. We can do this by&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html#exposing-dom-refs-to-parent-components\">exposing DOM refs to parent components</a>&nbsp;through a special prop on the child component that forwards the parent&rsquo;s ref to the child&rsquo;s DOM node.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CustomTextInput <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// Now you can set focus when required.</span>\n" +
                    "<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When using a HOC to extend components, it is recommended to&nbsp;<a href=\"https://reactjs.org/docs/forwarding-refs.html\">forward the ref</a>&nbsp;to the wrapped component using the&nbsp;<code class=\"gatsby-code-text\">forwardRef</code>&nbsp;function of React. If a third party HOC does not implement ref forwarding, the above pattern can still be used as a fallback.</p>\n" +
                    "<p>A great focus management example is the&nbsp;<a href=\"https://github.com/davidtheclark/react-aria-modal\">react-aria-modal</a>. This is a relatively rare example of a fully accessible modal window. Not only does it set initial focus on the cancel button (preventing the keyboard user from accidentally activating the success action) and trap keyboard focus inside the modal, it also resets focus back to the element that initially triggered the modal.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>While this is a very important accessibility feature, it is also a technique that should be used judiciously. Use it to repair the keyboard focus flow when it is disturbed, not to try and anticipate how users want to use applications.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"mouse-and-pointer-events\">Mouse and pointer events</h2>\n" +
                    "<p>Ensure that all functionality exposed through a mouse or pointer event can also be accessed using the keyboard alone. Depending only on the pointer device will lead to many cases where keyboard users cannot use your application.</p>\n" +
                    "<p>To illustrate this, let&rsquo;s look at a prolific example of broken accessibility caused by click events. This is the outside click pattern, where a user can disable an opened popover by clicking outside the element.</p>\n" +
                    "<img src=\"https://reactjs.org/outerclick-with-mouse-5523b05b22210c5a2fa0bd1f01339cb3.gif\" alt=\"A toggle button opening a popover list implemented with the click outside pattern and operated with a mouse showing that the close action works.\" />\n" +
                    "<p>This is typically implemented by attaching a&nbsp;<code class=\"gatsby-code-text\">click</code>&nbsp;event to the&nbsp;<code class=\"gatsby-code-text\">window</code>&nbsp;object that closes the popover:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClickExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>currentState <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      isOpen<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Select an option</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This may work fine for users with pointer devices, such as a mouse, but operating this with the keyboard alone leads to broken functionality when tabbing to the next element as the&nbsp;<code class=\"gatsby-code-text\">window</code>object never receives a&nbsp;<code class=\"gatsby-code-text\">click</code>&nbsp;event. This can lead to obscured functionality which blocks users from using your application.</p>\n" +
                    "<img src=\"https://reactjs.org/outerclick-with-keyboard-eca0ca825c8c5e2aa609cee72ef47e27.gif\" alt=\"A toggle button opening a popover list implemented with the click outside pattern and operated with the keyboard showing the popover not being closed on blur and it obscuring other screen elements.\" />\n" +
                    "<p>The same functionality can be achieved by using an appropriate event handlers instead, such as&nbsp;<code class=\"gatsby-code-text\">onBlur</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">onFocus</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlurExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>currentState <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      isOpen<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// We close the popover on the next tick by using setTimeout.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// This is necessary because we need to first check if</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// another child of the element has received focus as</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// the blur event fires prior to the new focus event.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        isOpen<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// If a child receives focus, do not close the popover.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// React assists us by bubbling the blur and</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// focus events to the parent.</span>\n" +
                    "</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>           <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span>\n" +
                    "                <span class=\"token attr-name\">aria-haspopup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n" +
                    "                <span class=\"token attr-name\">aria-expanded</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Select an option</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This code exposes the functionality to both pointer device and keyboard users. Also note the added&nbsp;<code class=\"gatsby-code-text\">aria-*</code>&nbsp;props to support screen-reader users. For simplicity&rsquo;s sake the keyboard events to enable&nbsp;<code class=\"gatsby-code-text\">arrow key</code>&nbsp;interaction of the popover options have not been implemented.</p>\n" +
                    "<img src=\"https://reactjs.org/blur-popover-close-28ce2067489843caf05fe7ce22494542.gif\" alt=\"A popover list correctly closing for both mouse and keyboard users.\" />\n" +
                    "<p>This is one example of many cases where depending on only pointer and mouse events will break functionality for keyboard users. Always testing with the keyboard will immediately highlight the problem areas which can then be fixed by using keyboard aware event handlers.</p>\n" +
                    "<h2 id=\"more-complex-widgets\">More Complex Widgets</h2>\n" +
                    "<p>A more complex user experience should not mean a less accessible one. Whereas accessibility is most easily achieved by coding as close to HTML as possible, even the most complex widget can be coded accessibly.</p>\n" +
                    "<p>Here we require knowledge of&nbsp;<a href=\"https://www.w3.org/TR/wai-aria/#roles\">ARIA Roles</a>&nbsp;as well as&nbsp;<a href=\"https://www.w3.org/TR/wai-aria/#states_and_properties\">ARIA States and Properties</a>. These are toolboxes filled with HTML attributes that are fully supported in JSX and enable us to construct fully accessible, highly functional React components.</p>\n" +
                    "<p>Each type of widget has a specific design pattern and is expected to function in a certain way by users and user agents alike:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.w3.org/TR/wai-aria-practices/#aria_ex\">WAI-ARIA Authoring Practices - Design Patterns and Widgets</a></li>\n" +
                    "<li><a href=\"http://heydonworks.com/practical_aria_examples/\">Heydon Pickering - ARIA Examples</a></li>\n" +
                    "<li><a href=\"https://inclusive-components.design/\">Inclusive Components</a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"other-points-for-consideration\">Other Points for Consideration</h2>\n" +
                    "<h3 id=\"setting-the-language\">Setting the language</h3>\n" +
                    "<p>Indicate the human language of page texts as screen reader software uses this to select the correct voice settings:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/techniques/screenreader/#language\">WebAIM - Document Language</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"setting-the-document-title\">Setting the document title</h3>\n" +
                    "<p>Set the document&nbsp;<code class=\"gatsby-code-text\">&lt;title&gt;</code>&nbsp;to correctly describe the current page content as this ensures that the user remains aware of the current page context:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-title.html\">WCAG - Understanding the Document Title Requirement</a></li>\n" +
                    "</ul>\n" +
                    "<p>We can set this in React using the&nbsp;<a href=\"https://github.com/gaearon/react-document-title\">React Document Title Component</a>.</p>\n" +
                    "<h3 id=\"color-contrast\">Color contrast</h3>\n" +
                    "<p>Ensure that all readable text on your website has sufficient color contrast to remain maximally readable by users with low vision:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\">WCAG - Understanding the Color Contrast Requirement</a></li>\n" +
                    "<li><a href=\"https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/\">Everything About Color Contrast And Why You Should Rethink It</a></li>\n" +
                    "<li><a href=\"http://a11yproject.com/posts/what-is-color-contrast/\">A11yProject - What is Color Contrast</a></li>\n" +
                    "</ul>\n" +
                    "<p>It can be tedious to manually calculate the proper color combinations for all cases in your website so instead, you can&nbsp;<a href=\"http://jxnblk.com/colorable/\">calculate an entire accessible color palette with Colorable</a>.</p>\n" +
                    "<p>Both the aXe and WAVE tools mentioned below also include color contrast tests and will report on contrast errors.</p>\n" +
                    "<p>If you want to extend your contrast testing abilities you can use these tools:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/resources/contrastchecker/\">WebAIM - Color Contrast Checker</a></li>\n" +
                    "<li><a href=\"https://www.paciellogroup.com/resources/contrastanalyser/\">The Paciello Group - Color Contrast Analyzer</a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"development-and-testing-tools\">Development and Testing Tools</h2>\n" +
                    "<p>There are a number of tools we can use to assist in the creation of accessible web applications.</p>\n" +
                    "<h3 id=\"the-keyboard\">The keyboard</h3>\n" +
                    "<p>By far the easiest and also one of the most important checks is to test if your entire website can be reached and used with the keyboard alone. Do this by:</p>\n" +
                    "<ol>\n" +
                    "<li>Plugging out your mouse.</li>\n" +
                    "<li>Using&nbsp;<code class=\"gatsby-code-text\">Tab</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">Shift+Tab</code>&nbsp;to browse.</li>\n" +
                    "<li>Using&nbsp;<code class=\"gatsby-code-text\">Enter</code>&nbsp;to activate elements.</li>\n" +
                    "<li>Where required, using your keyboard arrow keys to interact with some elements, such as menus and dropdowns.</li>\n" +
                    "</ol>\n" +
                    "<h3 id=\"development-assistance\">Development assistance</h3>\n" +
                    "<p>We can check some accessibility features directly in our JSX code. Often intellisense checks are already provided in JSX aware IDE&rsquo;s for the ARIA roles, states and properties. We also have access to the following tool:</p>\n" +
                    "<h4 id=\"eslint-plugin-jsx-a11y\">eslint-plugin-jsx-a11y</h4>\n" +
                    "<p>The&nbsp;<a href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y\">eslint-plugin-jsx-a11y</a>&nbsp;plugin for ESLint provides AST linting feedback regarding accessibility issues in your JSX. Many IDE&rsquo;s allow you to integrate these findings directly into code analysis and source code windows.</p>\n" +
                    "<p><a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>&nbsp;has this plugin with a subset of rules activated. If you want to enable even more accessibility rules, you can create an&nbsp;<code class=\"gatsby-code-text\">.eslintrc</code>&nbsp;file in the root of your project with this content:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsxon\">\n" +
                    "<pre class=\"gatsby-code-jsxon\"><code class=\"gatsby-code-jsxon\">{\n" +
                    "  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n" +
                    "  \"plugins\": [\"jsx-a11y\"]\n" +
                    "}</code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"testing-accessibility-in-the-browser\">Testing accessibility in the browser</h3>\n" +
                    "<p>A number of tools exist that can run accessibility audits on web pages in your browser. Please use them in combination with other accessibility checks mentioned here as they can only test the technical accessibility of your HTML.</p>\n" +
                    "<h4 id=\"axe-axe-core-and-react-axe\">aXe, aXe-core and react-axe</h4>\n" +
                    "<p>Deque Systems offers&nbsp;<a href=\"https://github.com/dequelabs/axe-core\">aXe-core</a>&nbsp;for automated and end-to-end accessibility tests of your applications. This module includes integrations for Selenium.</p>\n" +
                    "<p><a href=\"https://www.deque.com/products/axe/\">The Accessibility Engine</a>&nbsp;or aXe, is an accessibility inspector browser extension built on&nbsp;<code class=\"gatsby-code-text\">aXe-core</code>.</p>\n" +
                    "<p>You can also use the&nbsp;<a href=\"https://github.com/dylanb/react-axe\">react-axe</a>&nbsp;module to report these accessibility findings directly to the console while developing and debugging.</p>\n" +
                    "<h4 id=\"webaim-wave\">WebAIM WAVE</h4>\n" +
                    "<p>The&nbsp;<a href=\"http://wave.webaim.org/extension/\">Web Accessibility Evaluation Tool</a>&nbsp;is another accessibility browser extension.</p>\n" +
                    "<h4 id=\"accessibility-inspectors-and-the-accessibility-tree\">Accessibility inspectors and the Accessibility Tree</h4>\n" +
                    "<p><a href=\"https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/\">The Accessibility Tree</a>&nbsp;is a subset of the DOM tree that contains accessible objects for every DOM element that should be exposed to assistive technology, such as screen readers.</p>\n" +
                    "<p>In some browsers we can easily view the accessibility information for each element in the accessibility tree:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://gist.github.com/marcysutton/0a42f815878c159517a55e6652e3b23a\">Activate the Accessibility Inspector in Chrome</a></li>\n" +
                    "<li><a href=\"https://developer.apple.com/library/content/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXTestingApps.html\">Using the Accessibility Inspector in OS X Safari</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"screen-readers\">Screen readers</h3>\n" +
                    "<p>Testing with a screen reader should form part of your accessibility tests.</p>\n" +
                    "<p>Please note that browser / screen reader combinations matter. It is recommended that you test your application in the browser best suited to your screen reader of choice.</p>\n" +
                    "<h3 id=\"commonly-used-screen-readers\">Commonly Used Screen Readers</h3>\n" +
                    "<h4 id=\"nvda-in-firefox\">NVDA in Firefox</h4>\n" +
                    "<p><a href=\"https://www.nvaccess.org/\">NonVisual Desktop Access</a>&nbsp;or NVDA is an open source Windows screen reader that is widely used.</p>\n" +
                    "<p>Refer to the following guides on how to best use NVDA:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/articles/nvda/\">WebAIM - Using NVDA to Evaluate Web Accessibility</a></li>\n" +
                    "<li><a href=\"https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts\">Deque - NVDA Keyboard Shortcuts</a></li>\n" +
                    "</ul>\n" +
                    "<h4 id=\"voiceover-in-safari\">VoiceOver in Safari</h4>\n" +
                    "<p>VoiceOver is an integrated screen reader on Apple devices.</p>\n" +
                    "<p>Refer to the following guides on how activate and use VoiceOver:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/articles/voiceover/\">WebAIM - Using VoiceOver to Evaluate Web Accessibility</a></li>\n" +
                    "<li><a href=\"https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts\">Deque - VoiceOver for OS X Keyboard Shortcuts</a></li>\n" +
                    "<li><a href=\"https://dequeuniversity.com/screenreaders/voiceover-ios-shortcuts\">Deque - VoiceOver for iOS Shortcuts</a></li>\n" +
                    "</ul>\n" +
                    "<h4 id=\"jaws-in-internet-explorer\">JAWS in Internet Explorer</h4>\n" +
                    "<p><a href=\"http://www.freedomscientific.com/Products/Blindness/JAWS\">Job Access With Speech</a>&nbsp;or JAWS, is a prolifically used screen reader on Windows.</p>\n" +
                    "<p>Refer to the following guides on how to best use JAWS:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"http://webaim.org/articles/jaws/\">WebAIM - Using JAWS to Evaluate Web Accessibility</a></li>\n" +
                    "<li><a href=\"https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts\">Deque - JAWS Keyboard Shortcuts</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"other-screen-readers\">Other Screen Readers</h3>\n" +
                    "<h4 id=\"chromevox-in-google-chrome\">ChromeVox in Google Chrome</h4>\n" +
                    "<p><a href=\"http://www.chromevox.com/\">ChromeVox</a>&nbsp;is an integrated screen reader on Chromebooks and is available&nbsp;<a href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en\">as an extension</a>&nbsp;for Google Chrome.</p>\n" +
                    "<p>Refer to the following guides on how best to use ChromeVox:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://support.google.com/chromebook/answer/7031755?hl=en\">Google Chromebook Help - Use the Built-in Screen Reader</a></li>\n" +
                    "<li><a href=\"http://www.chromevox.com/keyboard_shortcuts.html\">ChromeVox Classic Keyboard Shortcuts Reference</a></li>\n" +
                    "</ul>\n" +
                    "</div>");
            sec1React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec1React2);

            Section sec2React2 = new Section();
            sec2React2.setOrdinalNumber(2);
            sec2React2.setDescription("Context");
            sec2React2.setContent("<p>Context is designed to share data that can be considered &ldquo;global&rdquo; for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a &ldquo;theme&rdquo; prop in order to style the Button component:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toolbar <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The Toolbar component must take an extra \"theme\" prop</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// and pass it to the ThemedButton. This can become painful</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// if every single button in the app needs to know the theme</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// because it would have to be passed through all components.</span>\n" +
                    "</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemedButton <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>Using context, we can avoid passing props through intermediate elements:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Context lets us pass a value deep into the component tree</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// without explicitly threading it through every component.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Create a context for the current theme (with \"light\" as the default).</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Use a Provider to pass the current theme to the tree below.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Any component can read it, no matter how deep it is.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// In this example, we're passing \"dark\" as the current value.</span>\n" +
                    "</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemeContext.Provider <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toolbar <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ThemeContext.Provider<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// A component in the middle doesn't have to</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// pass the theme down explicitly anymore.</span>\n" +
                    "</span><span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemedButton <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Assign a contextType to read the current theme context.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// React will find the closest theme Provider above and use its value.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// In this example, the current theme is \"dark\".</span>\n" +
                    "</span>  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<h2 id=\"before-you-use-context\">Before You Use Context</h2>\n" +
                    "<p>Context is primarily used when some data needs to be accessible by&nbsp;<em>many</em>&nbsp;components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.</p>\n" +
                    "<p><strong>If you only want to avoid passing some props through many levels,&nbsp;<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html\">component composition</a>&nbsp;is often a simpler solution than context.</strong></p>\n" +
                    "<p>For example, consider a&nbsp;<code class=\"gatsby-code-text\">Page</code>&nbsp;component that passes a&nbsp;<code class=\"gatsby-code-text\">user</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">avatarSize</code>&nbsp;prop several levels down so that deeply nested&nbsp;<code class=\"gatsby-code-text\">Link</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;components can read it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PageLayout <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NavigationBar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Avatar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>It might feel redundant to pass down the&nbsp;<code class=\"gatsby-code-text\">user</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">avatarSize</code>&nbsp;props through many levels if in the end only the&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;component really needs it. It&rsquo;s also annoying that whenever the&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;component needs more props from the top, you have to add them at all the intermediate levels too.</p>\n" +
                    "<p>One way to solve this issue&nbsp;<strong>without context</strong>&nbsp;is to&nbsp;<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html#containment\">pass down the&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;component itself</a>&nbsp;so that the intermediate components don&rsquo;t need to know about the&nbsp;<code class=\"gatsby-code-text\">user</code>&nbsp;prop:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> userLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Avatar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PageLayout <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>userLink<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// Now, we have:</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PageLayout <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NavigationBar <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token comment\">// ... which renders ...</span>\n" +
                    "<span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>userLink<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>With this change, only the top-most Page component needs to know about the&nbsp;<code class=\"gatsby-code-text\">Link</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">Avatar</code>&nbsp;components&rsquo; use of&nbsp;<code class=\"gatsby-code-text\">user</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">avatarSize</code>.</p>\n" +
                    "<p>This&nbsp;<em>inversion of control</em>&nbsp;can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. However, this isn&rsquo;t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.</p>\n" +
                    "<p>You&rsquo;re not limited to a single child for a component. You may pass multiple children, or even have multiple separate &ldquo;slots&rdquo; for children,&nbsp;<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html#containment\">as documented here</a>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Feed <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> topBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NavigationBar<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Avatar <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NavigationBar<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PageLayout\n" +
                    "      <span class=\"token attr-name\">topBar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topBar<span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span>\n" +
                    "    <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This pattern is sufficient for many cases when you need to decouple a child from its immediate parents. You can take it even further with&nbsp;<a href=\"https://reactjs.org/docs/render-props.html\">render props</a>&nbsp;if the child needs to communicate with the parent before rendering.</p>\n" +
                    "<p>However, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you &ldquo;broadcast&rdquo; such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.</p>");
            sec2React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec2React2);

            Section sec3React2 = new Section();
            sec3React2.setOrdinalNumber(3);
            sec3React2.setDescription("Error Boundaries");
            sec3React2.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>In the past, JavaScript errors inside components used to corrupt React&rsquo;s internal state and cause it to&nbsp;<a href=\"https://github.com/facebook/react/issues/4026\">emit</a>&nbsp;<a href=\"https://github.com/facebook/react/issues/6895\">cryptic</a>&nbsp;<a href=\"https://github.com/facebook/react/issues/8579\">errors</a>&nbsp;on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.</p>\n" +
                    "<h2 id=\"introducing-error-boundaries\">Introducing Error Boundaries</h2>\n" +
                    "<p>A JavaScript error in a part of the UI shouldn&rsquo;t break the whole app. To solve this problem for React users, React 16 introduces a new concept of an &ldquo;error boundary&rdquo;.</p>\n" +
                    "<p>Error boundaries are React components that&nbsp;<strong>catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI</strong>&nbsp;instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>Error boundaries do&nbsp;<strong>not</strong>&nbsp;catch errors for:</p>\n" +
                    "<ul>\n" +
                    "<li>Event handlers (<a href=\"https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers\">learn more</a>)</li>\n" +
                    "<li>Asynchronous code (e.g.&nbsp;<code class=\"gatsby-code-text\">setTimeout</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">requestAnimationFrame</code>&nbsp;callbacks)</li>\n" +
                    "<li>Server side rendering</li>\n" +
                    "<li>Errors thrown in the error boundary itself (rather than its children)</li>\n" +
                    "</ul>\n" +
                    "</blockquote>\n" +
                    "<p>A class component becomes an error boundary if it defines either (or both) of the lifecycle methods&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#static-getderivedstatefromerror\"><code class=\"gatsby-code-text\">static getDerivedStateFromError()</code></a>&nbsp;or&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#componentdidcatch\"><code class=\"gatsby-code-text\">componentDidCatch()</code></a>. Use&nbsp;<code class=\"gatsby-code-text\">static getDerivedStateFromError()</code>&nbsp;to render a fallback UI after an error has been thrown. Use&nbsp;<code class=\"gatsby-code-text\">componentDidCatch()</code>&nbsp;to log error information.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Update state so the next render will show the fallback UI.</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// You can also log the error to an error reporting service</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// You can render any custom fallback UI</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span> \n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Then you can use it as a regular component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ErrorBoundary<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyWidget <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ErrorBoundary<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Error boundaries work like a JavaScript&nbsp;<code class=\"gatsby-code-text\">catch {}</code>&nbsp;block, but for components. Only class components can be error boundaries. In practice, most of the time you&rsquo;ll want to declare an error boundary component once and use it throughout your application.</p>\n" +
                    "<p>Note that&nbsp;<strong>error boundaries only catch errors in the components below them in the tree</strong>. An error boundary can&rsquo;t catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it. This, too, is similar to how catch {} block works in JavaScript.</p>\n" +
                    "<h2 id=\"live-demo\">Live Demo</h2>\n" +
                    "<p>Check out&nbsp;<a href=\"https://codepen.io/gaearon/pen/wqvxGa?editors=0010\">this example of declaring and using an error boundary</a>&nbsp;with&nbsp;<a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\">React 16</a>.</p>\n" +
                    "<h2 id=\"where-to-place-error-boundaries\">Where to Place Error Boundaries</h2>\n" +
                    "<p>The granularity of error boundaries is up to you. You may wrap top-level route components to display a &ldquo;Something went wrong&rdquo; message to the user, just like server-side frameworks often handle crashes. You may also wrap individual widgets in an error boundary to protect them from crashing the rest of the application.</p>\n" +
                    "<h2 id=\"new-behavior-for-uncaught-errors\">New Behavior for Uncaught Errors</h2>\n" +
                    "<p>This change has an important implication.&nbsp;<strong>As of React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree.</strong></p>\n" +
                    "<p>We debated this decision, but in our experience it is worse to leave corrupted UI in place than to completely remove it. For example, in a product like Messenger leaving the broken UI visible could lead to somebody sending a message to the wrong person. Similarly, it is worse for a payments app to display a wrong amount than to render nothing.</p>\n" +
                    "<p>This change means that as you migrate to React 16, you will likely uncover existing crashes in your application that have been unnoticed before. Adding error boundaries lets you provide better user experience when something goes wrong.</p>\n" +
                    "<p>For example, Facebook Messenger wraps content of the sidebar, the info panel, the conversation log, and the message input into separate error boundaries. If some component in one of these UI areas crashes, the rest of them remain interactive.</p>\n" +
                    "<p>We also encourage you to use JS error reporting services (or build your own) so that you can learn about unhandled exceptions as they happen in production, and fix them.</p>\n" +
                    "<h2 id=\"component-stack-traces\">Component Stack Traces</h2>\n" +
                    "<p>React 16 prints all errors that occurred during rendering to the console in development, even if the application accidentally swallows them. In addition to the error message and the JavaScript stack, it also provides component stack traces. Now you can see where exactly in the component tree the failure has happened:</p>\n" +
                    "<a class=\"gatsby-resp-image-link\" href=\"https://reactjs.org/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-71000.png\" target=\"_blank\" rel=\"noopener\"><span class=\"gatsby-resp-image-wrapper\"><span class=\"gatsby-resp-image-background-image\"><img class=\"gatsby-resp-image-image\" title=\"\" src=\"https://reactjs.org/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-acf85.png\" sizes=\"(max-width: 840px) 100vw, 840px\" srcset=\"/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-c1418.png 210w,\n" +
                    "/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-5d5d8.png 420w,\n" +
                    "/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-acf85.png 840w,\n" +
                    "/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-de0cd.png 1260w,\n" +
                    "/static/error-boundaries-stack-trace-f1276837b03821b43358d44c14072945-71000.png 1601w\" alt=\"Error caught by Error Boundary component\" /></span></span></a>\n" +
                    "<p>You can also see the filenames and line numbers in the component stack trace. This works by default in&nbsp;<a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>&nbsp;projects:</p>\n" +
                    "<a class=\"gatsby-resp-image-link\" href=\"https://reactjs.org/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-4e7a0.png\" target=\"_blank\" rel=\"noopener\"><span class=\"gatsby-resp-image-wrapper\"><span class=\"gatsby-resp-image-background-image\"><img class=\"gatsby-resp-image-image\" title=\"\" src=\"https://reactjs.org/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-acf85.png\" sizes=\"(max-width: 840px) 100vw, 840px\" srcset=\"/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-c1418.png 210w,\n" +
                    "/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-5d5d8.png 420w,\n" +
                    "/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-acf85.png 840w,\n" +
                    "/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-de0cd.png 1260w,\n" +
                    "/static/error-boundaries-stack-trace-line-numbers-45611d4fdbd152829b28ae2348d6dcba-4e7a0.png 1597w\" alt=\"Error caught by Error Boundary component with line numbers\" /></span></span></a>\n" +
                    "<p>If you don&rsquo;t use Create React App, you can add&nbsp;<a href=\"https://www.npmjs.com/package/babel-plugin-transform-react-jsx-source\">this plugin</a>&nbsp;manually to your Babel configuration. Note that it&rsquo;s intended only for development and&nbsp;<strong>must be disabled in production</strong>.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>Component names displayed in the stack traces depend on the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code class=\"gatsby-code-text\">Function.name</code></a>&nbsp;property. If you support older browsers and devices which may not yet provide this natively (e.g. IE 11), consider including a&nbsp;<code class=\"gatsby-code-text\">Function.name</code>&nbsp;polyfill in your bundled application, such as&nbsp;<a href=\"https://github.com/JamesMGreene/Function.name\"><code class=\"gatsby-code-text\">function.name-polyfill</code></a>. Alternatively, you may explicitly set the&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#displayname\"><code class=\"gatsby-code-text\">displayName</code></a>&nbsp;property on all your components.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"how-about-trycatch\">How About try/catch?</h2>\n" +
                    "<p><code class=\"gatsby-code-text\">try</code>&nbsp;/&nbsp;<code class=\"gatsby-code-text\">catch</code>&nbsp;is great but it only works for imperative code:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">showButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>However, React components are declarative and specify&nbsp;<em>what</em>&nbsp;should be rendered:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Error boundaries preserve the declarative nature of React, and behave as you would expect. For example, even if an error occurs in a&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>&nbsp;method caused by a&nbsp;<code class=\"gatsby-code-text\">setState</code>somewhere deep in the tree, it will still correctly propagate to the closest error boundary.</p>\n" +
                    "<h2 id=\"how-about-event-handlers\">How About Event Handlers?</h2>\n" +
                    "<p>Error boundaries&nbsp;<strong>do not</strong>&nbsp;catch errors inside event handlers.</p>\n" +
                    "<p>React doesn&rsquo;t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don&rsquo;t happen during rendering. So if they throw, React still knows what to display on the screen.</p>\n" +
                    "<p>If you need to catch an error inside event handler, use the regular JavaScript&nbsp;<code class=\"gatsby-code-text\">try</code>&nbsp;/&nbsp;<code class=\"gatsby-code-text\">catch</code>statement:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Do something that could throw</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Caught an error.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that the above example is demonstrating regular JavaScript behavior and doesn&rsquo;t use error boundaries.</p>\n" +
                    "<h2 id=\"naming-changes-from-react-15\">Naming Changes from React 15</h2>\n" +
                    "<p>React 15 included a very limited support for error boundaries under a different method name:&nbsp;<code class=\"gatsby-code-text\">unstable_handleError</code>. This method no longer works, and you will need to change it to&nbsp;<code class=\"gatsby-code-text\">componentDidCatch</code>&nbsp;in your code starting from the first 16 beta release.</p>\n" +
                    "<p>For this change, we&rsquo;ve provided a&nbsp;<a href=\"https://github.com/reactjs/react-codemod#error-boundaries\">codemod</a>&nbsp;to automatically migrate your code.</p>\n" +
                    "</div>");
            sec3React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec3React2);

            Section sec4React2 = new Section();
            sec4React2.setOrdinalNumber(4);
            sec4React2.setDescription("Forwarding Refs");
            sec4React2.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Ref forwarding is a technique for automatically passing a&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">ref</a>&nbsp;through a component to one of its children. This is typically not necessary for most components in the application. However, it can be useful for some kinds of components, especially in reusable component libraries. The most common scenarios are described below.</p>\n" +
                    "<h2 id=\"forwarding-refs-to-dom-components\">Forwarding refs to DOM components</h2>\n" +
                    "<p>Consider a&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;component that renders the native&nbsp;<code class=\"gatsby-code-text\">button</code>&nbsp;DOM element:</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">FancyButton</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>React components hide their implementation details, including their rendered output. Other components using&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;<strong>usually will not need to</strong>&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">obtain a ref</a>&nbsp;to the inner&nbsp;<code class=\"gatsby-code-text\">button</code>DOM element. This is good because it prevents components from relying on each other&rsquo;s DOM structure too much.</p>\n" +
                    "<p>Although such encapsulation is desirable for application-level components like&nbsp;<code class=\"gatsby-code-text\">FeedStory</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">Comment</code>, it can be inconvenient for highly reusable &ldquo;leaf&rdquo; components like&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">MyTextInput</code>. These components tend to be used throughout the application in a similar manner as a regular DOM&nbsp;<code class=\"gatsby-code-text\">button</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">input</code>, and accessing their DOM nodes may be unavoidable for managing focus, selection, or animations.</p>\n" +
                    "<p><strong>Ref forwarding is an opt-in feature that lets some components take a&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;they receive, and pass it further down (in other words, &ldquo;forward&rdquo; it) to a child.</strong></p>\n" +
                    "<p>In the example below,&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;uses&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;to obtain the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;passed to it, and then forward it to the DOM&nbsp;<code class=\"gatsby-code-text\">button</code>&nbsp;that it renders:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// You can now get a ref directly to the DOM button:</span>\n" +
                    "<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyButton <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FancyButton<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>This way, components using&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;can get a ref to the underlying&nbsp;<code class=\"gatsby-code-text\">button</code>&nbsp;DOM node and access it if necessary&mdash;just like if they used a DOM&nbsp;<code class=\"gatsby-code-text\">button</code>&nbsp;directly.</p>\n" +
                    "<p>Here is a step-by-step explanation of what happens in the above example:</p>\n" +
                    "<ol>\n" +
                    "<li>We create a&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">React ref</a>&nbsp;by calling&nbsp;<code class=\"gatsby-code-text\">React.createRef</code>&nbsp;and assign it to a&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;variable.</li>\n" +
                    "<li>We pass our&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;down to&nbsp;<code class=\"gatsby-code-text\">&lt;FancyButton ref={ref}&gt;</code>&nbsp;by specifying it as a JSX attribute.</li>\n" +
                    "<li>React passes the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;to the&nbsp;<code class=\"gatsby-code-text\">(props, ref) =&gt; ...</code>&nbsp;function inside&nbsp;<code class=\"gatsby-code-text\">forwardRef</code>&nbsp;as a second argument.</li>\n" +
                    "<li>We forward this&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;argument down to&nbsp;<code class=\"gatsby-code-text\">&lt;button ref={ref}&gt;</code>&nbsp;by specifying it as a JSX attribute.</li>\n" +
                    "<li>When the ref is attached,&nbsp;<code class=\"gatsby-code-text\">ref.current</code>&nbsp;will point to the&nbsp;<code class=\"gatsby-code-text\">&lt;button&gt;</code>&nbsp;DOM node.</li>\n" +
                    "</ol>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>The second&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;argument only exists when you define a component with&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>call. Regular function or class components don&rsquo;t receive the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;argument, and ref is not available in props either.</p>\n" +
                    "<p>Ref forwarding is not limited to DOM components. You can forward refs to class component instances, too.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"note-for-component-library-maintainers\">Note for component library maintainers</h2>\n" +
                    "<p><strong>When you start using&nbsp;<code class=\"gatsby-code-text\">forwardRef</code>&nbsp;in a component library, you should treat it as a breaking change and release a new major version of your library.</strong>&nbsp;This is because your library likely has an observably different behavior (such as what refs get assigned to, and what types are exported), and this can break apps and other libraries that depend on the old behavior.</p>\n" +
                    "<p>Conditionally applying&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;when it exists is also not recommended for the same reasons: it changes how your library behaves and can break your users&rsquo; apps when they upgrade React itself.</p>\n" +
                    "<h2 id=\"forwarding-refs-in-higher-order-components\">Forwarding refs in higher-order components</h2>\n" +
                    "<p>This technique can also be particularly useful with&nbsp;<a href=\"https://reactjs.org/docs/higher-order-components.html\">higher-order components</a>&nbsp;(also known as HOCs). Let&rsquo;s start with an example HOC that logs component props to the console:</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WrappedComponent <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> LogProps<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>The &ldquo;logProps&rdquo;&nbsp;HOC passes all&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;through to the component it wraps, so the rendered output will be the same. For example, we can use this HOC to log all props that get passed to our &ldquo;fancy button&rdquo; component:</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// Rather than exporting FancyButton, we export LogProps.</span>\n" +
                    "<span class=\"token comment\">// It will render a FancyButton though.</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>FancyButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>There is one caveat to the above example: refs will not get passed through. That&rsquo;s because&nbsp;<code class=\"gatsby-code-text\">ref</code>is not a prop. Like&nbsp;<code class=\"gatsby-code-text\">key</code>, it&rsquo;s handled differently by React. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component.</p>\n" +
                    "<p>This means that refs intended for our&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;component will actually be attached to the&nbsp;<code class=\"gatsby-code-text\">LogProps</code>&nbsp;component:</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">import</span> FancyButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./FancyButton'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token comment\">// The FancyButton component we imported is the LogProps HOC.</span>\n" +
                    "<span class=\"token comment\">// Even though the rendered output will be the same,</span>\n" +
                    "<span class=\"token comment\">// Our ref will point to LogProps instead of the inner FancyButton component!</span>\n" +
                    "<span class=\"token comment\">// This means we can't call e.g. ref.current.focus()</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyButton\n" +
                    "  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span>\n" +
                    "  <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span>\n" +
                    "</span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>Fortunately, we can explicitly forward refs to the inner&nbsp;<code class=\"gatsby-code-text\">FancyButton</code>&nbsp;component using the&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;API.&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;accepts a render function that receives&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;parameters and returns a React node. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "      <span class=\"token comment\">// Assign the custom prop \"forwardedRef\" as a ref</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Component <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">rest</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Note the second param \"ref\" provided by React.forwardRef.</span>\n" +
                    "  <span class=\"token comment\">// We can pass it along to LogProps as a regular prop, e.g. \"forwardedRef\"</span>\n" +
                    "  <span class=\"token comment\">// And it can then be attached to the Component.</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogProps <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<h2 id=\"displaying-a-custom-name-in-devtools\">Displaying a custom name in DevTools</h2>\n" +
                    "<p><code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;accepts a render function. React DevTools uses this function to determine what to display for the ref forwarding component.</p>\n" +
                    "<p>For example, the following component will appear as &rdquo;<em>ForwardRef</em>&rdquo; in the DevTools:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogProps <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>If you name the render function, DevTools will also include its name (e.g. &rdquo;<em>ForwardRef(myFunction)</em>&rdquo;):</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogProps <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>You can even set the function&rsquo;s&nbsp;<code class=\"gatsby-code-text\">displayName</code>&nbsp;property to include the component you&rsquo;re wrapping:</p>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<div class=\"gatsby-highlight\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogProps <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Give this component a more helpful display name in DevTools.</span>\n" +
                    "  <span class=\"token comment\">// e.g. \"ForwardRef(logProps(MyComponent))\"</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> Component<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  forwardRef<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`logProps(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "</div>");
            sec4React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec4React2);

            Section sec5React2 = new Section();
            sec5React2.setOrdinalNumber(5);
            sec5React2.setDescription("Fragments");
            sec5React2.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildA <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildB <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildC <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>There is also a new&nbsp;<a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">short syntax</a>&nbsp;for declaring them, but it isn&rsquo;t supported by all popular tools yet.</p>\n" +
                    "<h2 id=\"motivation\">Motivation</h2>\n" +
                    "<p>A common pattern is for a component to return a list of children. Take this example React snippet:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Table</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Columns <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">&lt;Columns /&gt;</code>&nbsp;would need to return multiple&nbsp;<code class=\"gatsby-code-text\">&lt;td&gt;</code>&nbsp;elements in order for the rendered HTML to be valid. If a parent div was used inside the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;of&nbsp;<code class=\"gatsby-code-text\">&lt;Columns /&gt;</code>, then the resulting HTML will be invalid.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>results in a&nbsp;<code class=\"gatsby-code-text\">&lt;Table /&gt;</code>&nbsp;output of:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>So, we introduce&nbsp;<code class=\"gatsby-code-text\">Fragment</code>s.</p>\n" +
                    "<h2 id=\"usage\">Usage</h2>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>which results in a correct&nbsp;<code class=\"gatsby-code-text\">&lt;Table /&gt;</code>&nbsp;output of:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"short-syntax\">Short Syntax</h3>\n" +
                    "<p>There is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You can use&nbsp;<code class=\"gatsby-code-text\">&lt;&gt;&lt;/&gt;</code>&nbsp;the same way you&rsquo;d use any other element except that it doesn&rsquo;t support keys or attributes.</p>\n" +
                    "<p>Note that&nbsp;<strong><a href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html#support-for-fragment-syntax\">many tools don&rsquo;t support it yet</a></strong>&nbsp;so you might want to explicitly write&nbsp;<code class=\"gatsby-code-text\">&lt;React.Fragment&gt;</code>&nbsp;until the tooling catches up.</p>\n" +
                    "<h3 id=\"keyed-fragments\">Keyed Fragments</h3>\n" +
                    "<p>Fragments declared with the explicit&nbsp;<code class=\"gatsby-code-text\">&lt;React.Fragment&gt;</code>&nbsp;syntax may have keys. A use case for this is mapping a collection to an array of fragments &mdash; for example, to create a description list:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token comment\">// Without the `key`, React will fire a key warning</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.Fragment <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.Fragment<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">key</code>&nbsp;is the only attribute that can be passed to&nbsp;<code class=\"gatsby-code-text\">Fragment</code>. In the future, we may add support for additional attributes, such as event handlers.</p>\n" +
                    "<h3 id=\"live-demo\">Live Demo</h3>\n" +
                    "<p>You can try out the new JSX fragment syntax with this&nbsp;<a href=\"https://codepen.io/reactjs/pen/VrEbjE?editors=1000\">CodePen</a>.</p>\n" +
                    "</div>");
            sec5React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec5React2);

            Section sec6React2 = new Section();
            sec6React2.setOrdinalNumber(6);
            sec6React2.setDescription("Higher-Order Components");
            sec6React2.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React&rsquo;s compositional nature.</p>\n" +
                    "<p>Concretely,&nbsp;<strong>a higher-order component is a function that takes a component and returns a new component.</strong></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Whereas a component transforms props into UI, a higher-order component transforms a component into another component.</p>\n" +
                    "<p>HOCs are common in third-party React libraries, such as Redux&rsquo;s&nbsp;<a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\"><code class=\"gatsby-code-text\">connect</code></a>&nbsp;and Relay&rsquo;s&nbsp;<a href=\"http://facebook.github.io/relay/docs/en/fragment-container.html\"><code class=\"gatsby-code-text\">createFragmentContainer</code></a>.</p>\n" +
                    "<p>In this document, we&rsquo;ll discuss why higher-order components are useful, and how to write your own.</p>\n" +
                    "<h2 id=\"use-hocs-for-cross-cutting-concerns\">Use HOCs For Cross-Cutting Concerns</h2>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note</strong></p>\n" +
                    "<p>We previously recommended mixins as a way to handle cross-cutting concerns. We&rsquo;ve since realized that mixins create more trouble than they are worth.&nbsp;<a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">Read more</a>&nbsp;about why we&rsquo;ve moved away from mixins and how you can transition your existing components.</p>\n" +
                    "</blockquote>\n" +
                    "<p>Components are the primary unit of code reuse in React. However, you&rsquo;ll find that some patterns aren&rsquo;t a straightforward fit for traditional components.</p>\n" +
                    "<p>For example, say you have a&nbsp;<code class=\"gatsby-code-text\">CommentList</code>&nbsp;component that subscribes to an external data source to render a list of comments:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token comment\">// \"DataSource\" is some global data source</span>\n" +
                    "      comments<span class=\"token punctuation\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Subscribe to changes</span>\n" +
                    "    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Clean up listener</span>\n" +
                    "    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Update component state whenever the data source changes</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      comments<span class=\"token punctuation\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Comment <span class=\"token attr-name\">comment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Later, you write a component for subscribing to a single blog post, which follows a similar pattern:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      blogPost<span class=\"token punctuation\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      blogPost<span class=\"token punctuation\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextBlock <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>blogPost<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">CommentList</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">BlogPost</code>&nbsp;aren&rsquo;t identical &mdash; they call different methods on&nbsp;<code class=\"gatsby-code-text\">DataSource</code>, and they render different output. But much of their implementation is the same:</p>\n" +
                    "<ul>\n" +
                    "<li>On mount, add a change listener to&nbsp;<code class=\"gatsby-code-text\">DataSource</code>.</li>\n" +
                    "<li>Inside the listener, call&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;whenever the data source changes.</li>\n" +
                    "<li>On unmount, remove the change listener.</li>\n" +
                    "</ul>\n" +
                    "<p>You can imagine that in a large app, this same pattern of subscribing to&nbsp;<code class=\"gatsby-code-text\">DataSource</code>&nbsp;and calling&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel.</p>\n" +
                    "<p>We can write a function that creates components, like&nbsp;<code class=\"gatsby-code-text\">CommentList</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">BlogPost</code>, that subscribe to&nbsp;<code class=\"gatsby-code-text\">DataSource</code>. The function will accept as one of its arguments a child component that receives the subscribed data as a prop. Let&rsquo;s call the function&nbsp;<code class=\"gatsby-code-text\">withSubscription</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> CommentListWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n" +
                    "  CommentList<span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> BlogPostWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n" +
                    "  BlogPost<span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The first parameter is the wrapped component. The second parameter retrieves the data we&rsquo;re interested in, given a&nbsp;<code class=\"gatsby-code-text\">DataSource</code>&nbsp;and the current props.</p>\n" +
                    "<p>When&nbsp;<code class=\"gatsby-code-text\">CommentListWithSubscription</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">BlogPostWithSubscription</code>&nbsp;are rendered,&nbsp;<code class=\"gatsby-code-text\">CommentList</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">BlogPost</code>&nbsp;will be passed a&nbsp;<code class=\"gatsby-code-text\">data</code>&nbsp;prop with the most current data retrieved from&nbsp;<code class=\"gatsby-code-text\">DataSource</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// This function takes a component...</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">,</span> selectData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...and returns another component...</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "        data<span class=\"token punctuation\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n" +
                    "      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token comment\">// ... that takes care of the subscription...</span>\n" +
                    "      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "        data<span class=\"token punctuation\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n" +
                    "      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token comment\">// ... and renders the wrapped component with the fresh data!</span>\n" +
                    "      <span class=\"token comment\">// Notice that we pass through any additional props</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WrappedComponent <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that a HOC doesn&rsquo;t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC&nbsp;<em>composes</em>&nbsp;the original component by&nbsp;<em>wrapping</em>&nbsp;it in a container component. A HOC is a pure function with zero side-effects.</p>\n" +
                    "<p>And that&rsquo;s it! The wrapped component receives all the props of the container, along with a new prop,&nbsp;<code class=\"gatsby-code-text\">data</code>, which it uses to render its output. The HOC isn&rsquo;t concerned with how or why the data is used, and the wrapped component isn&rsquo;t concerned with where the data came from.</p>\n" +
                    "<p>Because&nbsp;<code class=\"gatsby-code-text\">withSubscription</code>&nbsp;is a normal function, you can add as many or as few arguments as you like. For example, you may want to make the name of the&nbsp;<code class=\"gatsby-code-text\">data</code>&nbsp;prop configurable, to further isolate the HOC from the wrapped component. Or you could accept an argument that configures&nbsp;<code class=\"gatsby-code-text\">shouldComponentUpdate</code>, or one that configures the data source. These are all possible because the HOC has full control over how the component is defined.</p>\n" +
                    "<p>Like components, the contract between&nbsp;<code class=\"gatsby-code-text\">withSubscription</code>&nbsp;and the wrapped component is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example.</p>\n" +
                    "<h2 id=\"dont-mutate-the-original-component-use-composition\">Don&rsquo;t Mutate the Original Component. Use Composition.</h2>\n" +
                    "<p>Resist the temptation to modify a component&rsquo;s prototype (or otherwise mutate it) inside a HOC.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  InputComponent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">componentWillReceiveProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Next props: '</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token comment\">// The fact that we're returning the original input is a hint that it has</span>\n" +
                    "  <span class=\"token comment\">// been mutated.</span>\n" +
                    "  <span class=\"token keyword\">return</span> InputComponent<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// EnhancedComponent will log whenever props are received</span>\n" +
                    "<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>There are a few problems with this. One is that the input component cannot be reused separately from the enhanced component. More crucially, if you apply another HOC to&nbsp;<code class=\"gatsby-code-text\">EnhancedComponent</code>&nbsp;that&nbsp;<em>also</em>&nbsp;mutates&nbsp;<code class=\"gatsby-code-text\">componentWillReceiveProps</code>, the first HOC&rsquo;s functionality will be overridden! This HOC also won&rsquo;t work with function components, which do not have lifecycle methods.</p>\n" +
                    "<p>Mutating HOCs are a leaky abstraction&mdash;the consumer must know how they are implemented in order to avoid conflicts with other HOCs.</p>\n" +
                    "<p>Instead of mutation, HOCs should use composition, by wrapping the input component in a container component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Next props: '</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token comment\">// Wraps the input component in a container, without mutating it. Good!</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WrappedComponent <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This HOC has the same functionality as the mutating version while avoiding the potential for clashes. It works equally well with class and function components. And because it&rsquo;s a pure function, it&rsquo;s composable with other HOCs, or even with itself.</p>\n" +
                    "<p>You may have noticed similarities between HOCs and a pattern called&nbsp;<strong>container components</strong>. Container components are part of a strategy of separating responsibility between high-level and low-level concerns. Containers manage things like subscriptions and state, and pass props to components that handle things like rendering UI. HOCs use containers as part of their implementation. You can think of HOCs as parameterized container component definitions.</p>\n" +
                    "<h2 id=\"convention-pass-unrelated-props-through-to-the-wrapped-component\">Convention: Pass Unrelated Props Through to the Wrapped Component</h2>\n" +
                    "<p>HOCs add features to a component. They shouldn&rsquo;t drastically alter its contract. It&rsquo;s expected that the component returned from a HOC has a similar interface to the wrapped component.</p>\n" +
                    "<p>HOCs should pass through props that are unrelated to its specific concern. Most HOCs contain a render method that looks something like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Filter out extra props that are specific to this HOC and shouldn't be</span>\n" +
                    "  <span class=\"token comment\">// passed through</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> extraProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>passThroughProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Inject props into the wrapped component. These are usually state values or</span>\n" +
                    "  <span class=\"token comment\">// instance methods.</span>\n" +
                    "  <span class=\"token keyword\">const</span> injectedProp <span class=\"token operator\">=</span> someStateOrInstanceMethod<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Pass props to wrapped component</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WrappedComponent\n" +
                    "      <span class=\"token attr-name\">injectedProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>injectedProp<span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">passThroughProps</span><span class=\"token punctuation\">}</span></span>\n" +
                    "    <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This convention helps ensure that HOCs are as flexible and reusable as possible.</p>\n" +
                    "<h2 id=\"convention-maximizing-composability\">Convention: Maximizing Composability</h2>\n" +
                    "<p>Not all HOCs look the same. Sometimes they accept only a single argument, the wrapped component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> NavbarWithRouter <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Navbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Usually, HOCs accept additional arguments. In this example from Relay, a config object is used to specify a component&rsquo;s data dependencies:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> CommentWithRelay <span class=\"token operator\">=</span> Relay<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The most common signature for HOCs looks like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// React Redux's `connect`</span>\n" +
                    "<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">,</span> commentActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><em>What?!</em>&nbsp;If you break it apart, it&rsquo;s easier to see what&rsquo;s going on.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// connect is a function that returns another function</span>\n" +
                    "<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentListSelector<span class=\"token punctuation\">,</span> commentListActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token comment\">// The returned function is a HOC, which returns a component that is connected</span>\n" +
                    "<span class=\"token comment\">// to the Redux store</span>\n" +
                    "<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In other words,&nbsp;<code class=\"gatsby-code-text\">connect</code>&nbsp;is a higher-order function that returns a higher-order component!</p>\n" +
                    "<p>This form may seem confusing or unnecessary, but it has a useful property. Single-argument HOCs like the one returned by the&nbsp;<code class=\"gatsby-code-text\">connect</code>&nbsp;function have the signature&nbsp;<code class=\"gatsby-code-text\">Component =&gt; Component</code>. Functions whose output type is the same as its input type are really easy to compose together.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Instead of doing this...</span>\n" +
                    "<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// ... you can use a function composition utility</span>\n" +
                    "<span class=\"token comment\">// compose(f, g, h) is the same as (...args) =&gt; f(g(h(...args)))</span>\n" +
                    "<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token comment\">// These are both single-argument HOCs</span>\n" +
                    "  withRouter<span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>(This same property also allows&nbsp;<code class=\"gatsby-code-text\">connect</code>&nbsp;and other enhancer-style HOCs to be used as decorators, an experimental JavaScript proposal.)</p>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">compose</code>&nbsp;utility function is provided by many third-party libraries including lodash (as&nbsp;<a href=\"https://lodash.com/docs/#flowRight\"><code class=\"gatsby-code-text\">lodash.flowRight</code></a>),&nbsp;<a href=\"http://redux.js.org/docs/api/compose.html\">Redux</a>, and&nbsp;<a href=\"http://ramdajs.com/docs/#compose\">Ramda</a>.</p>\n" +
                    "<h2 id=\"convention-wrap-the-display-name-for-easy-debugging\">Convention: Wrap the Display Name for Easy Debugging</h2>\n" +
                    "<p>The container components created by HOCs show up in the&nbsp;<a href=\"https://github.com/facebook/react-devtools\">React Developer Tools</a>&nbsp;like any other component. To ease debugging, choose a display name that communicates that it&rsquo;s the result of a HOC.</p>\n" +
                    "<p>The most common technique is to wrap the display name of the wrapped component. So if your higher-order component is named&nbsp;<code class=\"gatsby-code-text\">withSubscription</code>, and the wrapped component&rsquo;s display name is&nbsp;<code class=\"gatsby-code-text\">CommentList</code>, use the display name&nbsp;<code class=\"gatsby-code-text\">WithSubscription(CommentList)</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithSubscription</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n" +
                    "  WithSubscription<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`WithSubscription(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> WithSubscription<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'Component'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"caveats\">Caveats</h2>\n" +
                    "<p>Higher-order components come with a few caveats that aren&rsquo;t immediately obvious if you&rsquo;re new to React.</p>\n" +
                    "<h3 id=\"dont-use-hocs-inside-the-render-method\">Don&rsquo;t Use HOCs Inside the render Method</h3>\n" +
                    "<p>React&rsquo;s diffing algorithm (called reconciliation) uses component identity to determine whether it should update the existing subtree or throw it away and mount a new one. If the component returned from&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;is identical (<code class=\"gatsby-code-text\">===</code>) to the component from the previous render, React recursively updates the subtree by diffing it with the new one. If they&rsquo;re not equal, the previous subtree is unmounted completely.</p>\n" +
                    "<p>Normally, you shouldn&rsquo;t need to think about this. But it matters for HOCs because it means you can&rsquo;t apply a HOC to a component within the render method of a component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// A new version of EnhancedComponent is created on every render</span>\n" +
                    "  <span class=\"token comment\">// EnhancedComponent1 !== EnhancedComponent2</span>\n" +
                    "  <span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token comment\">// That causes the entire subtree to unmount/remount each time!</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnhancedComponent <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The problem here isn&rsquo;t just about performance &mdash; remounting a component causes the state of that component and all of its children to be lost.</p>\n" +
                    "<p>Instead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.</p>\n" +
                    "<p>In those rare cases where you need to apply a HOC dynamically, you can also do it inside a component&rsquo;s lifecycle methods or its constructor.</p>\n" +
                    "<h3 id=\"static-methods-must-be-copied-over\">Static Methods Must Be Copied Over</h3>\n" +
                    "<p>Sometimes it&rsquo;s useful to define a static method on a React component. For example, Relay containers expose a static method&nbsp;<code class=\"gatsby-code-text\">getFragment</code>&nbsp;to facilitate the composition of GraphQL fragments.</p>\n" +
                    "<p>When you apply a HOC to a component, though, the original component is wrapped with a container component. That means the new component does not have any of the static methods of the original component.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Define a static method</span>\n" +
                    "WrappedComponent<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token comment\">// Now apply a HOC</span>\n" +
                    "<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// The enhanced component has no static method</span>\n" +
                    "<span class=\"token keyword\">typeof</span> EnhancedComponent<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token comment\">// true</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>To solve this, you could copy the methods onto the container before returning it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token comment\">// Must know exactly which method(s) to copy :(</span>\n" +
                    "  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>However, this requires you to know exactly which methods need to be copied. You can use&nbsp;<a href=\"https://github.com/mridgway/hoist-non-react-statics\">hoist-non-react-statics</a>&nbsp;to automatically copy all non-React static methods:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Another possible solution is to export the static method separately from the component itself.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Instead of...</span>\n" +
                    "MyComponent<span class=\"token punctuation\">.</span>someFunction <span class=\"token operator\">=</span> someFunction<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyComponent<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// ...export the method separately...</span>\n" +
                    "<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// ...and in the consuming module, import both</span>\n" +
                    "<span class=\"token keyword\">import</span> MyComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyComponent.js'</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"refs-arent-passed-through\">Refs Aren&rsquo;t Passed Through</h3>\n" +
                    "<p>While the convention for higher-order components is to pass through all props to the wrapped component, this does not work for refs. That&rsquo;s because&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;is not really a prop &mdash; like&nbsp;<code class=\"gatsby-code-text\">key</code>, it&rsquo;s handled specially by React. If you add a ref to an element whose component is the result of a HOC, the ref refers to an instance of the outermost container component, not the wrapped component.</p>\n" +
                    "<p>The solution for this problem is to use the&nbsp;<code class=\"gatsby-code-text\">React.forwardRef</code>&nbsp;API (introduced with React 16.3).&nbsp;<a href=\"https://reactjs.org/docs/forwarding-refs.html\">Learn more about it in the forwarding refs section</a>.</p>\n" +
                    "</div>");
            sec6React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec6React2);

            Section sec7React2 = new Section();
            sec7React2.setOrdinalNumber(7);
            sec7React2.setDescription("Integrating with Other Libraries");
            sec7React2.setContent("<h3 id=\"how-to-approach-the-problem\">How to Approach the Problem</h3>\n" +
                    "<p>To demonstrate this, let&rsquo;s sketch out a wrapper for a generic jQuery plugin.</p>\n" +
                    "<p>We will attach a&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">ref</a>&nbsp;to the root DOM element. Inside&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>, we will get a reference to it so we can pass it to the jQuery plugin.</p>\n" +
                    "<p>To prevent React from touching the DOM after mounting, we will return an empty&nbsp;<code class=\"gatsby-code-text\">&lt;div /&gt;</code>from the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method. The&nbsp;<code class=\"gatsby-code-text\">&lt;div /&gt;</code>&nbsp;element has no properties or children, so React has no reason to update it, leaving the jQuery plugin free to manage that part of the DOM:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that we defined both&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount</code>&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\">lifecycle methods</a>. Many jQuery plugins attach event listeners to the DOM so it&rsquo;s important to detach them in&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount</code>. If the plugin does not provide a method for cleanup, you will probably have to provide your own, remembering to remove any event listeners the plugin registered to prevent memory leaks.</p>\n" +
                    "<h3 id=\"integrating-with-jquery-chosen-plugin\">Integrating with jQuery Chosen Plugin</h3>\n" +
                    "<p>For a more concrete example of these concepts, let&rsquo;s write a minimal wrapper for the plugin&nbsp;<a href=\"https://harvesthq.github.io/chosen/\">Chosen</a>, which augments&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;inputs.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>Just because it&rsquo;s possible, doesn&rsquo;t mean that it&rsquo;s the best approach for React apps. We encourage you to use React components when you can. React components are easier to reuse in React applications, and often provide more control over their behavior and appearance.</p>\n" +
                    "</blockquote>\n" +
                    "<p>First, let&rsquo;s look at what Chosen does to the DOM.</p>\n" +
                    "<p>If you call it on a&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;DOM node, it reads the attributes off of the original DOM node, hides it with an inline style, and then appends a separate DOM node with its own visual representation right after the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>. Then it fires jQuery events to notify us about the changes.</p>\n" +
                    "<p>Let&rsquo;s say that this is the API we&rsquo;re striving for with our&nbsp;<code class=\"gatsby-code-text\">&lt;Chosen&gt;</code>&nbsp;wrapper React component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Chosen <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">vanilla</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">chocolate</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">strawberry</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Chosen<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We will implement it as an&nbsp;<a href=\"https://reactjs.org/docs/uncontrolled-components.html\">uncontrolled component</a>&nbsp;for simplicity.</p>\n" +
                    "<p>First, we will create an empty component with a&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method where we return&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>wrapped in a&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Notice how we wrapped&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;in an extra&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>. This is necessary because Chosen will append another DOM element right after the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;node we passed to it. However, as far as React is concerned,&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;always only has a single child. This is how we ensure that React updates won&rsquo;t conflict with the extra DOM node appended by Chosen. It is important that if you modify the DOM outside of React flow, you must ensure React doesn&rsquo;t have a reason to touch those DOM nodes.</p>\n" +
                    "<p>Next, we will implement the lifecycle methods. We need to initialize Chosen with the ref to the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;node in&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>, and tear it down in&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/qmqeQx?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Note that React assigns no special meaning to the&nbsp;<code class=\"gatsby-code-text\">this.el</code>&nbsp;field. It only works because we have previously assigned this field from a&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This is enough to get our component to render, but we also want to be notified about the value changes. To do this, we will subscribe to the jQuery&nbsp;<code class=\"gatsby-code-text\">change</code>&nbsp;event on the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>managed by Chosen.</p>\n" +
                    "<p>We won&rsquo;t pass&nbsp;<code class=\"gatsby-code-text\">this.props.onChange</code>&nbsp;directly to Chosen because component&rsquo;s props might change over time, and that includes event handlers. Instead, we will declare a&nbsp;<code class=\"gatsby-code-text\">handleChange()</code>method that calls&nbsp;<code class=\"gatsby-code-text\">this.props.onChange</code>, and subscribe it to the jQuery&nbsp;<code class=\"gatsby-code-text\">change</code>&nbsp;event:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span>\n" +
                    "</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/bWgbeE?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Finally, there is one more thing left to do. In React, props can change over time. For example, the&nbsp;<code class=\"gatsby-code-text\">&lt;Chosen&gt;</code>&nbsp;component can get different children if parent component&rsquo;s state changes. This means that at integration points it is important that we manually update the DOM in response to prop updates, since we no longer let React manage the DOM for us.</p>\n" +
                    "<p>Chosen&rsquo;s documentation suggests that we can use jQuery&nbsp;<code class=\"gatsby-code-text\">trigger()</code>&nbsp;API to notify it about changes to the original DOM element. We will let React take care of updating&nbsp;<code class=\"gatsby-code-text\">this.props.children</code>&nbsp;inside&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>, but we will also add a&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate()</code>lifecycle method that notifies Chosen about changes in the children list:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This way, Chosen will know to update its DOM element when the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;children managed by React change.</p>\n" +
                    "<p>The complete implementation of the&nbsp;<code class=\"gatsby-code-text\">Chosen</code>&nbsp;component looks like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  \n" +
                    "  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  \n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"http://codepen.io/gaearon/pen/xdgKOz?editors=0010\"><strong>Try it on CodePen</strong></a></p>");
            sec7React2.setLesson(reactJsLesson2);
            reactJsLesson2.getSections().add(sec7React2);

            Section sec1React3 = new Section();
            sec1React3.setOrdinalNumber(1);
            sec1React3.setDescription("ReactDOM");
            sec1React3.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"overview\">Overview</h2>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">react-dom</code>&nbsp;package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside of the React model if you need to. Most of your components should not need to use this module.</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom.html#render\"><code class=\"gatsby-code-text\">render()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">hydrate()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom.html#unmountcomponentatnode\"><code class=\"gatsby-code-text\">unmountComponentAtNode()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom.html#finddomnode\"><code class=\"gatsby-code-text\">findDOMNode()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom.html#createportal\"><code class=\"gatsby-code-text\">createPortal()</code></a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"browser-support\">Browser Support</h3>\n" +
                    "<p>React supports all popular browsers, including Internet Explorer 9 and above, although&nbsp;<a href=\"https://reactjs.org/docs/javascript-environment-requirements.html\">some polyfills are required</a>&nbsp;for older browsers such as IE 9 and IE 10.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>We don&rsquo;t support older browsers that don&rsquo;t support ES5 methods, but you may find that your apps do work in older browsers if polyfills such as&nbsp;<a href=\"https://github.com/es-shims/es5-shim\">es5-shim and es5-sham</a>&nbsp;are included in the page. You&rsquo;re on your own if you choose to take this path.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h3 id=\"render\"><code class=\"gatsby-code-text\">render()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Render a React element into the DOM in the supplied&nbsp;<code class=\"gatsby-code-text\">container</code>&nbsp;and return a&nbsp;<a href=\"https://reactjs.org/docs/more-about-refs.html\">reference</a>&nbsp;to the component (or returns&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;for&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">stateless components</a>).</p>\n" +
                    "<p>If the React element was previously rendered into&nbsp;<code class=\"gatsby-code-text\">container</code>, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.</p>\n" +
                    "<p>If the optional callback is provided, it will be executed after the component is rendered or updated.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p><code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React&rsquo;s DOM diffing algorithm for efficient updates.</p>\n" +
                    "<p><code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.</p>\n" +
                    "<p><code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;currently returns a reference to the root&nbsp;<code class=\"gatsby-code-text\">ReactComponent</code>&nbsp;instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root&nbsp;<code class=\"gatsby-code-text\">ReactComponent</code>&nbsp;instance, the preferred solution is to attach a&nbsp;<a href=\"https://reactjs.org/docs/more-about-refs.html#the-ref-callback-attribute\">callback ref</a>&nbsp;to the root element.</p>\n" +
                    "<p>Using&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;to hydrate a server-rendered container is deprecated and will be removed in React 17. Use&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">hydrate()</code></a>&nbsp;instead.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"hydrate\"><code class=\"gatsby-code-text\">hydrate()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Same as&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#render\"><code class=\"gatsby-code-text\">render()</code></a>, but is used to hydrate a container whose HTML contents were rendered by&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html\"><code class=\"gatsby-code-text\">ReactDOMServer</code></a>. React will attempt to attach event listeners to the existing markup.</p>\n" +
                    "<p>React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.</p>\n" +
                    "<p>If a single element&rsquo;s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding&nbsp;<code class=\"gatsby-code-text\">suppressHydrationWarning={true}</code>&nbsp;to the element. It only works one level deep, and is intended to be an escape hatch. Don&rsquo;t overuse it. Unless it&rsquo;s text content, React still won&rsquo;t attempt to patch it up, so it may remain inconsistent until future updates.</p>\n" +
                    "<p>If you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like&nbsp;<code class=\"gatsby-code-text\">this.state.isClient</code>, which you can set to&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;in&nbsp;<code class=\"gatsby-code-text\">componentDidMount()</code>. This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.</p>\n" +
                    "<p>Remember to be mindful of user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so if you render something different in the client-only pass, the transition can be jarring. However, if executed well, it may be beneficial to render a &ldquo;shell&rdquo; of the application on the server, and only show some of the extra widgets on the client. To learn how to do this without getting the markup mismatch issues, refer to the explanation in the previous paragraph.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"unmountcomponentatnode\"><code class=\"gatsby-code-text\">unmountComponentAtNode()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if a component was unmounted and&nbsp;<code class=\"gatsby-code-text\">false</code>&nbsp;if there was no component to unmount.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"finddomnode\"><code class=\"gatsby-code-text\">findDOMNode()</code></h3>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p><code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction.&nbsp;<a href=\"https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\">It has been deprecated in&nbsp;<code class=\"gatsby-code-text\">StrictMode</code>.</a></p>\n" +
                    "</blockquote>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements.&nbsp;<strong>In most cases, you can attach a ref to the DOM node and avoid using&nbsp;<code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;at all.</strong></p>\n" +
                    "<p>When a component renders to&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">false</code>,&nbsp;<code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;returns&nbsp;<code class=\"gatsby-code-text\">null</code>. When a component renders to a string,&nbsp;<code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;returns a text DOM node containing that value. As of React 16, a component may return a fragment with multiple children, in which case&nbsp;<code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;will return the DOM node corresponding to the first non-empty child.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p><code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling&nbsp;<code class=\"gatsby-code-text\">findDOMNode()</code>&nbsp;in&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;on a component that has yet to be created) an exception will be thrown.</p>\n" +
                    "<p><code class=\"gatsby-code-text\">findDOMNode</code>&nbsp;cannot be used on function components.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"createportal\"><code class=\"gatsby-code-text\">createPortal()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Creates a portal. Portals provide a way to&nbsp;<a href=\"https://reactjs.org/docs/portals.html\">render children into a DOM node that exists outside the hierarchy of the DOM component</a>.</p>\n" +
                    "</div>");
            sec1React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec1React3);

            Section sec2React3 = new Section();
            sec2React3.setOrdinalNumber(2);
            sec2React3.setDescription("ReactDOMServer");
            sec2React3.setContent("<h2 id=\"overview\">Overview</h2>\n" +
                    "<p>The following methods can be used in both the server and browser environments:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"gatsby-code-text\">renderToString()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\"><code class=\"gatsby-code-text\">renderToStaticMarkup()</code></a></li>\n" +
                    "</ul>\n" +
                    "<p>These additional methods depend on a package (<code class=\"gatsby-code-text\">stream</code>) that is&nbsp;<strong>only available on the server</strong>, and won&rsquo;t work in the browser.</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom-server.html#rendertonodestream\"><code class=\"gatsby-code-text\">renderToNodeStream()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostaticnodestream\"><code class=\"gatsby-code-text\">renderToStaticNodeStream()</code></a></li>\n" +
                    "</ul>\n" +
                    "<hr />\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h3 id=\"rendertostring\"><code class=\"gatsby-code-text\">renderToString()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</p>\n" +
                    "<p>If you call&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">ReactDOM.hydrate()</code></a>&nbsp;on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"rendertostaticmarkup\"><code class=\"gatsby-code-text\">renderToStaticMarkup()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Similar to&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"gatsby-code-text\">renderToString</code></a>, except this doesn&rsquo;t create extra DOM attributes that React uses internally, such as&nbsp;<code class=\"gatsby-code-text\">data-reactroot</code>. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.</p>\n" +
                    "<p>If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"gatsby-code-text\">renderToString</code></a>&nbsp;on the server and&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">ReactDOM.hydrate()</code></a>&nbsp;on the client.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"rendertonodestream\"><code class=\"gatsby-code-text\">renderToNodeStream()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Render a React element to its initial HTML. Returns a&nbsp;<a href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Readable stream</a>&nbsp;that outputs an HTML string. The HTML output by this stream is exactly equal to what&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"gatsby-code-text\">ReactDOMServer.renderToString</code></a>&nbsp;would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</p>\n" +
                    "<p>If you call&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">ReactDOM.hydrate()</code></a>&nbsp;on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>Server-only. This API is not available in the browser.</p>\n" +
                    "<p>The stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like&nbsp;<a href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, which provides transform streams for transcoding text.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"rendertostaticnodestream\"><code class=\"gatsby-code-text\">renderToStaticNodeStream()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Similar to&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertonodestream\"><code class=\"gatsby-code-text\">renderToNodeStream</code></a>, except this doesn&rsquo;t create extra DOM attributes that React uses internally, such as&nbsp;<code class=\"gatsby-code-text\">data-reactroot</code>. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.</p>\n" +
                    "<p>The HTML output by this stream is exactly equal to what&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\"><code class=\"gatsby-code-text\">ReactDOMServer.renderToStaticMarkup</code></a>&nbsp;would return.</p>\n" +
                    "<p>If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use&nbsp;<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertonodestream\"><code class=\"gatsby-code-text\">renderToNodeStream</code></a>&nbsp;on the server and&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">ReactDOM.hydrate()</code></a>&nbsp;on the client.</p>");
            sec2React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec2React3);

            Section sec3React3 = new Section();
            sec3React3.setOrdinalNumber(3);
            sec3React3.setDescription("DOM Elements");
            sec3React3.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"differences-in-attributes\">Differences In Attributes</h2>\n" +
                    "<p>There are a number of attributes that work differently between React and HTML:</p>\n" +
                    "<h3 id=\"checked\">checked</h3>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">checked</code>&nbsp;attribute is supported by&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>&nbsp;components of type&nbsp;<code class=\"gatsby-code-text\">checkbox</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">radio</code>. You can use it to set whether the component is checked. This is useful for building controlled components.&nbsp;<code class=\"gatsby-code-text\">defaultChecked</code>&nbsp;is the uncontrolled equivalent, which sets whether the component is checked when it is first mounted.</p>\n" +
                    "<h3 id=\"classname\">className</h3>\n" +
                    "<p>To specify a CSS class, use the&nbsp;<code class=\"gatsby-code-text\">className</code>&nbsp;attribute. This applies to all regular DOM and SVG elements like&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>,&nbsp;<code class=\"gatsby-code-text\">&lt;a&gt;</code>, and others.</p>\n" +
                    "<p>If you use React with Web Components (which is uncommon), use the&nbsp;<code class=\"gatsby-code-text\">class</code>&nbsp;attribute instead.</p>\n" +
                    "<h3 id=\"dangerouslysetinnerhtml\">dangerouslySetInnerHTML</h3>\n" +
                    "<p><code class=\"gatsby-code-text\">dangerouslySetInnerHTML</code>&nbsp;is React&rsquo;s replacement for using&nbsp;<code class=\"gatsby-code-text\">innerHTML</code>&nbsp;in the browser DOM. In general, setting HTML from code is risky because it&rsquo;s easy to inadvertently expose your users to a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting (XSS)</a>&nbsp;attack. So, you can set HTML directly from React, but you have to type out&nbsp;<code class=\"gatsby-code-text\">dangerouslySetInnerHTML</code>&nbsp;and pass an object with a&nbsp;<code class=\"gatsby-code-text\">__html</code>&nbsp;key, to remind yourself that it&rsquo;s dangerous. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>__html<span class=\"token punctuation\">:</span> <span class=\"token string\">'First &amp;middot; Second'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"htmlfor\">htmlFor</h3>\n" +
                    "<p>Since&nbsp;<code class=\"gatsby-code-text\">for</code>&nbsp;is a reserved word in JavaScript, React elements use&nbsp;<code class=\"gatsby-code-text\">htmlFor</code>&nbsp;instead.</p>\n" +
                    "<h3 id=\"onchange\">onChange</h3>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;event behaves as you would expect it to: whenever a form field is changed, this event is fired. We intentionally do not use the existing browser behavior because&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;is a misnomer for its behavior and React relies on this event to handle user input in real time.</p>\n" +
                    "<h3 id=\"selected\">selected</h3>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">selected</code>&nbsp;attribute is supported by&nbsp;<code class=\"gatsby-code-text\">&lt;option&gt;</code>&nbsp;components. You can use it to set whether the component is selected. This is useful for building controlled components.</p>\n" +
                    "<h3 id=\"style\">style</h3>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>Some examples in the documentation use&nbsp;<code class=\"gatsby-code-text\">style</code>&nbsp;for convenience, but&nbsp;<strong>using the&nbsp;<code class=\"gatsby-code-text\">style</code>attribute as the primary means of styling elements is generally not recommended.</strong>&nbsp;In most cases,&nbsp;<a href=\"https://reactjs.org/docs/dom-elements.html#classname\"><code class=\"gatsby-code-text\">className</code></a>&nbsp;should be used to reference classes defined in an external CSS stylesheet.&nbsp;<code class=\"gatsby-code-text\">style</code>&nbsp;is most often used in React applications to add dynamically-computed styles at render time. See also&nbsp;<a href=\"https://reactjs.org/docs/faq-styling.html\">FAQ: Styling and CSS</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">style</code>&nbsp;attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM&nbsp;<code class=\"gatsby-code-text\">style</code>&nbsp;JavaScript property, is more efficient, and prevents XSS security holes. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n" +
                    "  backgroundImage<span class=\"token punctuation\">:</span> <span class=\"token string\">'url('</span> <span class=\"token operator\">+</span> imgUrl <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that styles are not autoprefixed. To support older browsers, you need to supply corresponding style properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  WebkitTransition<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// note the capital 'W' here</span>\n" +
                    "  msTransition<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span> <span class=\"token comment\">// 'ms' is the only lowercase vendor prefix</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentWithTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">This should work cross-browser</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes from JS (e.g.&nbsp;<code class=\"gatsby-code-text\">node.style.backgroundImage</code>). Vendor prefixes&nbsp;<a href=\"http://www.andismith.com/blog/2012/02/modernizr-prefixed/\">other than&nbsp;<code class=\"gatsby-code-text\">ms</code></a>&nbsp;should begin with a capital letter. This is why&nbsp;<code class=\"gatsby-code-text\">WebkitTransition</code>&nbsp;has an uppercase &ldquo;W&rdquo;.</p>\n" +
                    "<p>React will automatically append a &ldquo;px&rdquo; suffix to certain numeric inline style properties. If you want to use units other than &ldquo;px&rdquo;, specify the value as a string with the desired unit. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Result style: '10px'</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "  Hello World!\n" +
                    "</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// Result style: '10%'</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'10%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "  Hello World!\n" +
                    "</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Not all style properties are converted to pixel strings though. Certain ones remain unitless (eg&nbsp;<code class=\"gatsby-code-text\">zoom</code>,&nbsp;<code class=\"gatsby-code-text\">order</code>,&nbsp;<code class=\"gatsby-code-text\">flex</code>). A complete list of unitless properties can be seen&nbsp;<a href=\"https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59\">here</a>.</p>\n" +
                    "<h3 id=\"suppresscontenteditablewarning\">suppressContentEditableWarning</h3>\n" +
                    "<p>Normally, there is a warning when an element with children is also marked as&nbsp;<code class=\"gatsby-code-text\">contentEditable</code>, because it won&rsquo;t work. This attribute suppresses that warning. Don&rsquo;t use this unless you are building a library like&nbsp;<a href=\"https://facebook.github.io/draft-js/\">Draft.js</a>&nbsp;that manages&nbsp;<code class=\"gatsby-code-text\">contentEditable</code>&nbsp;manually.</p>\n" +
                    "<h3 id=\"suppresshydrationwarning\">suppressHydrationWarning</h3>\n" +
                    "<p>If you use server-side React rendering, normally there is a warning when the server and the client render different content. However, in some rare cases, it is very hard or impossible to guarantee an exact match. For example, timestamps are expected to differ on the server and on the client.</p>\n" +
                    "<p>If you set&nbsp;<code class=\"gatsby-code-text\">suppressHydrationWarning</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">true</code>, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don&rsquo;t overuse it. You can read more about hydration in the&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\"><code class=\"gatsby-code-text\">ReactDOM.hydrate()</code>&nbsp;documentation</a>.</p>\n" +
                    "<h3 id=\"value\">value</h3>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute is supported by&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>&nbsp;components. You can use it to set the value of the component. This is useful for building controlled components.&nbsp;<code class=\"gatsby-code-text\">defaultValue</code>&nbsp;is the uncontrolled equivalent, which sets the value of the component when it is first mounted.</p>\n" +
                    "<h2 id=\"all-supported-html-attributes\">All Supported HTML Attributes</h2>\n" +
                    "<p>As of React 16, any standard&nbsp;<a href=\"https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html\">or custom</a>&nbsp;DOM attributes are fully supported.</p>\n" +
                    "<p>React has always provided a JavaScript-centric API to the DOM. Since React components often take both custom and DOM-related props, React uses the&nbsp;<code class=\"gatsby-code-text\">camelCase</code>&nbsp;convention just like the DOM APIs:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">tabIndex</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>      <span class=\"token comment\">// Just like node.tabIndex DOM API</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">// Just like node.className DOM API</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">readOnly</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>  <span class=\"token comment\">// Just like node.readOnly DOM API</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>These props work similarly to the corresponding HTML attributes, with the exception of the special cases documented above.</p>\n" +
                    "<p>Some of the DOM attributes supported by React include:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">accept acceptCharset accessKey action allowFullScreen alt async autoComplete\n" +
                    "autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked\n" +
                    "cite classID className colSpan cols content contentEditable contextMenu controls\n" +
                    "controlsList coords crossOrigin data dateTime default defer dir disabled\n" +
                    "download draggable encType form formAction formEncType formMethod formNoValidate\n" +
                    "formTarget frameBorder headers height hidden high href hrefLang htmlFor\n" +
                    "httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list\n" +
                    "loop low manifest marginHeight marginWidth max maxLength media mediaGroup method\n" +
                    "min minLength multiple muted name noValidate nonce open optimum pattern\n" +
                    "placeholder poster preload profile radioGroup readOnly rel required reversed\n" +
                    "role rowSpan rows sandbox scope scoped scrolling seamless selected shape size\n" +
                    "sizes span spellCheck src srcDoc srcLang srcSet start step style summary\n" +
                    "tabIndex target title type useMap value width wmode wrap</code></pre>\n" +
                    "</div>\n" +
                    "<p>Similarly, all SVG attributes are fully supported:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">accentHeight accumulate additive alignmentBaseline allowReorder alphabetic\n" +
                    "amplitude arabicForm ascent attributeName attributeType autoReverse azimuth\n" +
                    "baseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight\n" +
                    "clip clipPath clipPathUnits clipRule colorInterpolation\n" +
                    "colorInterpolationFilters colorProfile colorRendering contentScriptType\n" +
                    "contentStyleType cursor cx cy d decelerate descent diffuseConstant direction\n" +
                    "display divisor dominantBaseline dur dx dy edgeMode elevation enableBackground\n" +
                    "end exponent externalResourcesRequired fill fillOpacity fillRule filter\n" +
                    "filterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize\n" +
                    "fontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy\n" +
                    "g1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef\n" +
                    "gradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic\n" +
                    "imageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength\n" +
                    "kerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor\n" +
                    "limitingConeAngle local markerEnd markerHeight markerMid markerStart\n" +
                    "markerUnits markerWidth mask maskContentUnits maskUnits mathematical mode\n" +
                    "numOctaves offset opacity operator order orient orientation origin overflow\n" +
                    "overlinePosition overlineThickness paintOrder panose1 pathLength\n" +
                    "patternContentUnits patternTransform patternUnits pointerEvents points\n" +
                    "pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits\n" +
                    "r radius refX refY renderingIntent repeatCount repeatDur requiredExtensions\n" +
                    "requiredFeatures restart result rotate rx ry scale seed shapeRendering slope\n" +
                    "spacing specularConstant specularExponent speed spreadMethod startOffset\n" +
                    "stdDeviation stemh stemv stitchTiles stopColor stopOpacity\n" +
                    "strikethroughPosition strikethroughThickness string stroke strokeDasharray\n" +
                    "strokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity\n" +
                    "strokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor\n" +
                    "textDecoration textLength textRendering to transform u1 u2 underlinePosition\n" +
                    "underlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic\n" +
                    "vHanging vIdeographic vMathematical values vectorEffect version vertAdvY\n" +
                    "vertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing\n" +
                    "writingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole\n" +
                    "xlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase\n" +
                    "xmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan</code></pre>\n" +
                    "</div>\n" +
                    "<p>You may also use custom attributes as long as they&rsquo;re fully lowercase.</p>\n" +
                    "</div>");
            sec3React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec3React3);

            Section sec4React3 = new Section();
            sec4React3.setOrdinalNumber(4);
            sec4React3.setDescription("SyntheticEvent");
            sec4React3.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"overview\">Overview</h2>\n" +
                    "<p>Your event handlers will be passed instances of&nbsp;<code class=\"gatsby-code-text\">SyntheticEvent</code>, a cross-browser wrapper around the browser&rsquo;s native event. It has the same interface as the browser&rsquo;s native event, including&nbsp;<code class=\"gatsby-code-text\">stopPropagation()</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">preventDefault()</code>, except the events work identically across all browsers.</p>\n" +
                    "<p>If you find that you need the underlying browser event for some reason, simply use the&nbsp;<code class=\"gatsby-code-text\">nativeEvent</code>&nbsp;attribute to get it. Every&nbsp;<code class=\"gatsby-code-text\">SyntheticEvent</code>&nbsp;object has the following attributes:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">boolean bubbles\n" +
                    "boolean cancelable\n" +
                    "DOMEventTarget currentTarget\n" +
                    "boolean defaultPrevented\n" +
                    "number eventPhase\n" +
                    "boolean isTrusted\n" +
                    "DOMEvent nativeEvent\n" +
                    "<span class=\"token keyword\">void</span> <span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "boolean <span class=\"token function\">isDefaultPrevented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token keyword\">void</span> <span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "boolean <span class=\"token function\">isPropagationStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n" +
                    "DOMEventTarget target\n" +
                    "number timeStamp\n" +
                    "string type</code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>As of v0.14, returning&nbsp;<code class=\"gatsby-code-text\">false</code>&nbsp;from an event handler will no longer stop event propagation. Instead,&nbsp;<code class=\"gatsby-code-text\">e.stopPropagation()</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">e.preventDefault()</code>&nbsp;should be triggered manually, as appropriate.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"event-pooling\">Event Pooling</h3>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">SyntheticEvent</code>&nbsp;is pooled. This means that the&nbsp;<code class=\"gatsby-code-text\">SyntheticEvent</code>&nbsp;object will be reused and all properties will be nullified after the event callback has been invoked. This is for performance reasons. As such, you cannot access the event in an asynchronous way.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; nullified object.</span>\n" +
                    "  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; \"click\"</span>\n" +
                    "  <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; \"click\"</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; null</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; \"click\"</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Won't work. this.state.clickEvent will only contain null values.</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>clickEvent<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// You can still export event properties.</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>eventType<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>If you want to access the event properties in an asynchronous way, you should call&nbsp;<code class=\"gatsby-code-text\">event.persist()</code>&nbsp;on the event, which will remove the synthetic event from the pool and allow references to the event to be retained by user code.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"supported-events\">Supported Events</h2>\n" +
                    "<p>React normalizes events so that they have consistent properties across different browsers.</p>\n" +
                    "<p>The event handlers below are triggered by an event in the bubbling phase. To register an event handler for the capture phase, append&nbsp;<code class=\"gatsby-code-text\">Capture</code>&nbsp;to the event name; for example, instead of using&nbsp;<code class=\"gatsby-code-text\">onClick</code>, you would use&nbsp;<code class=\"gatsby-code-text\">onClickCapture</code>&nbsp;to handle the click event in the capture phase.</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#clipboard-events\">Clipboard Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#composition-events\">Composition Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#keyboard-events\">Keyboard Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#focus-events\">Focus Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#form-events\">Form Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#mouse-events\">Mouse Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#pointer-events\">Pointer Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#selection-events\">Selection Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#touch-events\">Touch Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#ui-events\">UI Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#wheel-events\">Wheel Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#media-events\">Media Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#image-events\">Image Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#animation-events\">Animation Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#transition-events\">Transition Events</a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/events.html#other-events\">Other Events</a></li>\n" +
                    "</ul>\n" +
                    "<hr />\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h3 id=\"clipboard-events\">Clipboard Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onCopy onCut onPaste</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">DOMDataTransfer clipboardData</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"composition-events\">Composition Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onCompositionEnd onCompositionStart onCompositionUpdate</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">string data</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"keyboard-events\">Keyboard Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onKeyDown onKeyPress onKeyUp</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">boolean altKey\n" +
                    "number charCode\n" +
                    "boolean ctrlKey\n" +
                    "boolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n" +
                    "string key\n" +
                    "number keyCode\n" +
                    "string locale\n" +
                    "number location\n" +
                    "boolean metaKey\n" +
                    "boolean repeat\n" +
                    "boolean shiftKey\n" +
                    "number which</code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">key</code>&nbsp;property can take any of the values documented in the&nbsp;<a href=\"https://www.w3.org/TR/uievents-key/#named-key-attribute-values\">DOM Level 3 Events spec</a>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"focus-events\">Focus Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onFocus onBlur</code></pre>\n" +
                    "</div>\n" +
                    "<p>These focus events work on all elements in the React DOM, not just form elements.</p>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">DOMEventTarget relatedTarget</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"form-events\">Form Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onChange onInput onInvalid onSubmit</code></pre>\n" +
                    "</div>\n" +
                    "<p>For more information about the onChange event, see&nbsp;<a href=\"https://reactjs.org/docs/forms.html\">Forms</a>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"mouse-events\">Mouse Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\n" +
                    "onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\n" +
                    "onMouseMove onMouseOut onMouseOver onMouseUp</code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">onMouseEnter</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">onMouseLeave</code>&nbsp;events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.</p>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">boolean altKey\n" +
                    "number button\n" +
                    "number buttons\n" +
                    "number clientX\n" +
                    "number clientY\n" +
                    "boolean ctrlKey\n" +
                    "boolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n" +
                    "boolean metaKey\n" +
                    "number pageX\n" +
                    "number pageY\n" +
                    "DOMEventTarget relatedTarget\n" +
                    "number screenX\n" +
                    "number screenY\n" +
                    "boolean shiftKey</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"pointer-events\">Pointer Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\n" +
                    "onLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut</code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">onPointerEnter</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">onPointerLeave</code>&nbsp;events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.</p>\n" +
                    "<p>Properties:</p>\n" +
                    "<p>As defined in the&nbsp;<a href=\"https://www.w3.org/TR/pointerevents/\">W3 spec</a>, pointer events extend&nbsp;<a href=\"https://reactjs.org/docs/events.html#mouse-events\">Mouse Events</a>&nbsp;with the following properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">number pointerId\n" +
                    "number width\n" +
                    "number height\n" +
                    "number pressure\n" +
                    "number tangentialPressure\n" +
                    "number tiltX\n" +
                    "number tiltY\n" +
                    "number twist\n" +
                    "string pointerType\n" +
                    "boolean isPrimary</code></pre>\n" +
                    "</div>\n" +
                    "<p>A note on cross-browser support:</p>\n" +
                    "<p>Pointer events are not yet supported in every browser (at the time of writing this article, supported browsers include: Chrome, Firefox, Edge, and Internet Explorer). React deliberately does not polyfill support for other browsers because a standard-conform polyfill would significantly increase the bundle size of&nbsp;<code class=\"gatsby-code-text\">react-dom</code>.</p>\n" +
                    "<p>If your application requires pointer events, we recommend adding a third party pointer event polyfill.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"selection-events\">Selection Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onSelect</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"touch-events\">Touch Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onTouchCancel onTouchEnd onTouchMove onTouchStart</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">boolean altKey\n" +
                    "DOMTouchList changedTouches\n" +
                    "boolean ctrlKey\n" +
                    "boolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n" +
                    "boolean metaKey\n" +
                    "boolean shiftKey\n" +
                    "DOMTouchList targetTouches\n" +
                    "DOMTouchList touches</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"ui-events\">UI Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onScroll</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">number detail\n" +
                    "DOMAbstractView view</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"wheel-events\">Wheel Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onWheel</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">number deltaMode\n" +
                    "number deltaX\n" +
                    "number deltaY\n" +
                    "number deltaZ</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"media-events\">Media Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\n" +
                    "onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\n" +
                    "onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\n" +
                    "onTimeUpdate onVolumeChange onWaiting</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"image-events\">Image Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onLoad onError</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"animation-events\">Animation Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onAnimationStart onAnimationEnd onAnimationIteration</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">string animationName\n" +
                    "string pseudoElement\n" +
                    "float elapsedTime</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"transition-events\">Transition Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onTransitionEnd</code></pre>\n" +
                    "</div>\n" +
                    "<p>Properties:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">string propertyName\n" +
                    "string pseudoElement\n" +
                    "float elapsedTime</code></pre>\n" +
                    "</div>\n" +
                    "<hr />\n" +
                    "<h3 id=\"other-events\">Other Events</h3>\n" +
                    "<p>Event names:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">onToggle</code></pre>\n" +
                    "</div>\n" +
                    "</div>");
            sec4React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec4React3);

            Section sec5React3 = new Section();
            sec5React3.setOrdinalNumber(5);
            sec5React3.setDescription("Test Utilities");
            sec5React3.setContent("<h2 id=\"overview\">Overview</h2>\n" +
                    "<p><code class=\"gatsby-code-text\">ReactTestUtils</code>&nbsp;makes it easy to test React components in the testing framework of your choice. At Facebook we use&nbsp;<a href=\"https://facebook.github.io/jest/\">Jest</a>&nbsp;for painless JavaScript testing. Learn how to get started with Jest through the Jest website&rsquo;s&nbsp;<a href=\"http://facebook.github.io/jest/docs/en/tutorial-react.html#content\">React Tutorial</a>.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>Airbnb has released a testing utility called Enzyme, which makes it easy to assert, manipulate, and traverse your React Components&rsquo; output. If you&rsquo;re deciding on a unit testing utility to use together with Jest, or any other test runner, it&rsquo;s worth checking out:&nbsp;<a href=\"http://airbnb.io/enzyme/\">http://airbnb.io/enzyme/</a></p>\n" +
                    "<p>Alternatively, there is another testing utility called react-testing-library designed to enable and encourage writing tests that use your components as the end users use them. It also works with any test runner:&nbsp;<a href=\"https://git.io/react-testing-library\">https://git.io/react-testing-library</a></p>\n" +
                    "</blockquote>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#simulate\"><code class=\"gatsby-code-text\">Simulate</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#renderintodocument\"><code class=\"gatsby-code-text\">renderIntoDocument()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#mockcomponent\"><code class=\"gatsby-code-text\">mockComponent()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#iselement\"><code class=\"gatsby-code-text\">isElement()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#iselementoftype\"><code class=\"gatsby-code-text\">isElementOfType()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#isdomcomponent\"><code class=\"gatsby-code-text\">isDOMComponent()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#iscompositecomponent\"><code class=\"gatsby-code-text\">isCompositeComponent()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#iscompositecomponentwithtype\"><code class=\"gatsby-code-text\">isCompositeComponentWithType()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#findallinrenderedtree\"><code class=\"gatsby-code-text\">findAllInRenderedTree()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#scryrendereddomcomponentswithclass\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithClass()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#findrendereddomcomponentwithclass\"><code class=\"gatsby-code-text\">findRenderedDOMComponentWithClass()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#scryrendereddomcomponentswithtag\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithTag()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#findrendereddomcomponentwithtag\"><code class=\"gatsby-code-text\">findRenderedDOMComponentWithTag()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#scryrenderedcomponentswithtype\"><code class=\"gatsby-code-text\">scryRenderedComponentsWithType()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-utils.html#findrenderedcomponentwithtype\"><code class=\"gatsby-code-text\">findRenderedComponentWithType()</code></a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h2 id=\"shallow-rendering\">Shallow Rendering</h2>\n" +
                    "<p>When writing unit tests for React, shallow rendering can be helpful. Shallow rendering lets you render a component &ldquo;one level deep&rdquo; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. This does not require a DOM.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>The shallow renderer has moved to&nbsp;<code class=\"gatsby-code-text\">react-test-renderer/shallow</code>.<br /><a href=\"https://reactjs.org/docs/shallow-renderer.html\">Learn more about shallow rendering on its reference page.</a></p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"other-utilities\">Other Utilities</h2>\n" +
                    "<h3 id=\"simulate\"><code class=\"gatsby-code-text\">Simulate</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">Simulate<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>eventName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n" +
                    "  element<span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">[</span>eventData<span class=\"token punctuation\">]</span>\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Simulate an event dispatch on a DOM node with optional&nbsp;<code class=\"gatsby-code-text\">eventData</code>&nbsp;event data.</p>\n" +
                    "<p><code class=\"gatsby-code-text\">Simulate</code>&nbsp;has a method for&nbsp;<a href=\"https://reactjs.org/docs/events.html#supported-events\">every event that React understands</a>.</p>\n" +
                    "<p><strong>Clicking an element</strong></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// &lt;button ref={(node) =&gt; this.button = node}&gt;...&lt;/button&gt;</span>\n" +
                    "<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\n" +
                    "ReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>Changing the value of an input field and then pressing ENTER.</strong></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// &lt;input ref={(node) =&gt; this.textInput = node} /&gt;</span>\n" +
                    "<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">;</span>\n" +
                    "node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'giraffe'</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "ReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Enter\"</span><span class=\"token punctuation\">,</span> keyCode<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>You will have to provide any event property that you&rsquo;re using in your component (e.g. keyCode, which, etc&hellip;) as React is not creating any of these for you.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"renderintodocument\"><code class=\"gatsby-code-text\">renderIntoDocument()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">renderIntoDocument</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Render a React element into a detached DOM node in the document.&nbsp;<strong>This function requires a DOM.</strong></p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>You will need to have&nbsp;<code class=\"gatsby-code-text\">window</code>,&nbsp;<code class=\"gatsby-code-text\">window.document</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">window.document.createElement</code>globally available&nbsp;<strong>before</strong>&nbsp;you import&nbsp;<code class=\"gatsby-code-text\">React</code>. Otherwise React will think it can&rsquo;t access the DOM and methods like&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;won&rsquo;t work.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"mockcomponent\"><code class=\"gatsby-code-text\">mockComponent()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">mockComponent</span><span class=\"token punctuation\">(</span>\n" +
                    "  componentClass<span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">[</span>mockTagName<span class=\"token punctuation\">]</span>\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;(or other tag if&nbsp;<code class=\"gatsby-code-text\">mockTagName</code>&nbsp;is provided) containing any provided children.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p><code class=\"gatsby-code-text\">mockComponent()</code>&nbsp;is a legacy API. We recommend using&nbsp;<a href=\"https://reactjs.org/docs/test-utils.html#shallow-rendering\">shallow rendering</a>&nbsp;or&nbsp;<a href=\"https://facebook.github.io/jest/docs/en/tutorial-react-native.html#mock-native-modules-using-jestmock\"><code class=\"gatsby-code-text\">jest.mock()</code></a>instead.</p>\n" +
                    "</blockquote>\n" +
                    "<hr />\n" +
                    "<h3 id=\"iselement\"><code class=\"gatsby-code-text\">isElement()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">isElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if&nbsp;<code class=\"gatsby-code-text\">element</code>&nbsp;is any React element.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"iselementoftype\"><code class=\"gatsby-code-text\">isElementOfType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">isElementOfType</span><span class=\"token punctuation\">(</span>\n" +
                    "  element<span class=\"token punctuation\">,</span>\n" +
                    "  componentClass\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if&nbsp;<code class=\"gatsby-code-text\">element</code>&nbsp;is a React element whose type is of a React&nbsp;<code class=\"gatsby-code-text\">componentClass</code>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"isdomcomponent\"><code class=\"gatsby-code-text\">isDOMComponent()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">isDOMComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if&nbsp;<code class=\"gatsby-code-text\">instance</code>&nbsp;is a DOM component (such as a&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">&lt;span&gt;</code>).</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"iscompositecomponent\"><code class=\"gatsby-code-text\">isCompositeComponent()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">isCompositeComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if&nbsp;<code class=\"gatsby-code-text\">instance</code>&nbsp;is a user-defined component, such as a class or a function.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"iscompositecomponentwithtype\"><code class=\"gatsby-code-text\">isCompositeComponentWithType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">isCompositeComponentWithType</span><span class=\"token punctuation\">(</span>\n" +
                    "  instance<span class=\"token punctuation\">,</span>\n" +
                    "  componentClass\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;if&nbsp;<code class=\"gatsby-code-text\">instance</code>&nbsp;is a component whose type is of a React&nbsp;<code class=\"gatsby-code-text\">componentClass</code>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"findallinrenderedtree\"><code class=\"gatsby-code-text\">findAllInRenderedTree()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">findAllInRenderedTree</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  test\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Traverse all components in&nbsp;<code class=\"gatsby-code-text\">tree</code>&nbsp;and accumulate all components where&nbsp;<code class=\"gatsby-code-text\">test(component)</code>&nbsp;is&nbsp;<code class=\"gatsby-code-text\">true</code>. This is not that useful on its own, but it&rsquo;s used as a primitive for other test utils.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"scryrendereddomcomponentswithclass\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithClass()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">scryRenderedDOMComponentsWithClass</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  className\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching&nbsp;<code class=\"gatsby-code-text\">className</code>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"findrendereddomcomponentwithclass\"><code class=\"gatsby-code-text\">findRenderedDOMComponentWithClass()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">findRenderedDOMComponentWithClass</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  className\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Like&nbsp;<a href=\"https://reactjs.org/docs/test-utils.html#scryrendereddomcomponentswithclass\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithClass()</code></a>&nbsp;but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"scryrendereddomcomponentswithtag\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithTag()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">scryRenderedDOMComponentsWithTag</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  tagName\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching&nbsp;<code class=\"gatsby-code-text\">tagName</code>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"findrendereddomcomponentwithtag\"><code class=\"gatsby-code-text\">findRenderedDOMComponentWithTag()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">findRenderedDOMComponentWithTag</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  tagName\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Like&nbsp;<a href=\"https://reactjs.org/docs/test-utils.html#scryrendereddomcomponentswithtag\"><code class=\"gatsby-code-text\">scryRenderedDOMComponentsWithTag()</code></a>&nbsp;but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"scryrenderedcomponentswithtype\"><code class=\"gatsby-code-text\">scryRenderedComponentsWithType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">scryRenderedComponentsWithType</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  componentClass\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Finds all instances of components with type equal to&nbsp;<code class=\"gatsby-code-text\">componentClass</code>.</p>\n" +
                    "<hr />\n" +
                    "<h3 id=\"findrenderedcomponentwithtype\"><code class=\"gatsby-code-text\">findRenderedComponentWithType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">findRenderedComponentWithType</span><span class=\"token punctuation\">(</span>\n" +
                    "  tree<span class=\"token punctuation\">,</span>\n" +
                    "  componentClass\n" +
                    "<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Same as&nbsp;<a href=\"https://reactjs.org/docs/test-utils.html#scryrenderedcomponentswithtype\"><code class=\"gatsby-code-text\">scryRenderedComponentsWithType()</code></a>&nbsp;but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.</p>");
            sec5React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec5React3);

            Section sec6React3 = new Section();
            sec6React3.setOrdinalNumber(6);
            sec6React3.setDescription("Shallow Renderer");
            sec6React3.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"overview\">Overview</h2>\n" +
                    "<p>When writing unit tests for React, shallow rendering can be helpful. Shallow rendering lets you render a component &ldquo;one level deep&rdquo; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. This does not require a DOM.</p>\n" +
                    "<p>For example, if you have the following component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Title</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Subcomponent <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Then you can assert:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> ShallowRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer/shallow'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// in your test:</span>\n" +
                    "<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShallowRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyComponent <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">getRenderOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Title</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Subcomponent <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Shallow testing currently has some limitations, namely not supporting refs.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>We also recommend checking out Enzyme&rsquo;s&nbsp;<a href=\"http://airbnb.io/enzyme/docs/api/shallow.html\">Shallow Rendering API</a>. It provides a nicer higher-level API over the same functionality.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h3 id=\"shallowrendererrender\"><code class=\"gatsby-code-text\">shallowRenderer.render()</code></h3>\n" +
                    "<p>You can think of the shallowRenderer as a &ldquo;place&rdquo; to render the component you&rsquo;re testing, and from which you can extract the component&rsquo;s output.</p>\n" +
                    "<p><code class=\"gatsby-code-text\">shallowRenderer.render()</code>&nbsp;is similar to&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#render\"><code class=\"gatsby-code-text\">ReactDOM.render()</code></a>&nbsp;but it doesn&rsquo;t require DOM and only renders a single level deep. This means you can test components isolated from how their children are implemented.</p>\n" +
                    "<h3 id=\"shallowrenderergetrenderoutput\"><code class=\"gatsby-code-text\">shallowRenderer.getRenderOutput()</code></h3>\n" +
                    "<p>After&nbsp;<code class=\"gatsby-code-text\">shallowRenderer.render()</code>&nbsp;has been called, you can use&nbsp;<code class=\"gatsby-code-text\">shallowRenderer.getRenderOutput()</code>&nbsp;to get the shallowly rendered output.</p>\n" +
                    "<p>You can then begin to assert facts about the output.</p>\n" +
                    "</div>");
            sec6React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec6React3);

            Section sec7React3 = new Section();
            sec7React3.setOrdinalNumber(7);
            sec7React3.setDescription("Test Renderer");
            sec7React3.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h2 id=\"overview\">Overview</h2>\n" +
                    "<p>This package provides a React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.</p>\n" +
                    "<p>Essentially, this package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a React DOM or React Native component without using a browser or&nbsp;<a href=\"https://github.com/tmpvar/jsdom\">jsdom</a>.</p>\n" +
                    "<p>Example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Link</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link <span class=\"token attr-name\">page</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.facebook.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Facebook</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token comment\">// { type: 'a',</span>\n" +
                    "<span class=\"token comment\">//   props: { href: 'https://www.facebook.com/' },</span>\n" +
                    "<span class=\"token comment\">//   children: [ 'Facebook' ] }</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You can use Jest&rsquo;s snapshot testing feature to automatically save a copy of the JSON tree to a file and check in your tests that it hasn&rsquo;t changed:&nbsp;<a href=\"http://facebook.github.io/jest/blog/2016/07/27/jest-14.html\">Learn more about it</a>.</p>\n" +
                    "<p>You can also traverse the output to find specific nodes and make assertions about them.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SubComponent <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>my<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">SubComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sub</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyComponent <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">const</span> testInstance <span class=\"token operator\">=</span> testRenderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>SubComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">:</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Sub'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"testrenderer\">TestRenderer</h3>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrenderercreate\"><code class=\"gatsby-code-text\">TestRenderer.create()</code></a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"testrenderer-instance\">TestRenderer instance</h3>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrenderertojson\"><code class=\"gatsby-code-text\">testRenderer.toJSON()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrenderertotree\"><code class=\"gatsby-code-text\">testRenderer.toTree()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrendererupdate\"><code class=\"gatsby-code-text\">testRenderer.update()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrendererunmount\"><code class=\"gatsby-code-text\">testRenderer.unmount()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrenderergetinstance\"><code class=\"gatsby-code-text\">testRenderer.getInstance()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testrendererroot\"><code class=\"gatsby-code-text\">testRenderer.root</code></a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"testinstance\">TestInstance</h3>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefind\"><code class=\"gatsby-code-text\">testInstance.find()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefindbytype\"><code class=\"gatsby-code-text\">testInstance.findByType()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefindbyprops\"><code class=\"gatsby-code-text\">testInstance.findByProps()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefindall\"><code class=\"gatsby-code-text\">testInstance.findAll()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefindallbytype\"><code class=\"gatsby-code-text\">testInstance.findAllByType()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancefindallbyprops\"><code class=\"gatsby-code-text\">testInstance.findAllByProps()</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstanceinstance\"><code class=\"gatsby-code-text\">testInstance.instance</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancetype\"><code class=\"gatsby-code-text\">testInstance.type</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstanceprops\"><code class=\"gatsby-code-text\">testInstance.props</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstanceparent\"><code class=\"gatsby-code-text\">testInstance.parent</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/test-renderer.html#testinstancechildren\"><code class=\"gatsby-code-text\">testInstance.children</code></a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"reference\">Reference</h2>\n" +
                    "<h3 id=\"testrenderercreate\"><code class=\"gatsby-code-text\">TestRenderer.create()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Create a&nbsp;<code class=\"gatsby-code-text\">TestRenderer</code>&nbsp;instance with the passed React element. It doesn&rsquo;t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. The returned instance has the following methods and properties.</p>\n" +
                    "<h3 id=\"testrenderertojson\"><code class=\"gatsby-code-text\">testRenderer.toJSON()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Return an object representing the rendered tree. This tree only contains the platform-specific nodes like&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">&lt;View&gt;</code>&nbsp;and their props, but doesn&rsquo;t contain any user-written components. This is handy for&nbsp;<a href=\"http://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest\">snapshot testing</a>.</p>\n" +
                    "<h3 id=\"testrenderertotree\"><code class=\"gatsby-code-text\">testRenderer.toTree()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Return an object representing the rendered tree. Unlike&nbsp;<code class=\"gatsby-code-text\">toJSON()</code>, the representation is more detailed than the one provided by&nbsp;<code class=\"gatsby-code-text\">toJSON()</code>, and includes the user-written components. You probably don&rsquo;t need this method unless you&rsquo;re writing your own assertion library on top of the test rendererer.</p>\n" +
                    "<h3 id=\"testrendererupdate\"><code class=\"gatsby-code-text\">testRenderer.update()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.</p>\n" +
                    "<h3 id=\"testrendererunmount\"><code class=\"gatsby-code-text\">testRenderer.unmount()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Unmount the in-memory tree, triggering the appropriate lifecycle events.</p>\n" +
                    "<h3 id=\"testrenderergetinstance\"><code class=\"gatsby-code-text\">testRenderer.getInstance()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Return the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don&rsquo;t have instances.</p>\n" +
                    "<h3 id=\"testrendererroot\"><code class=\"gatsby-code-text\">testRenderer.root</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testRenderer<span class=\"token punctuation\">.</span>root</code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns the root &ldquo;test instance&rdquo; object that is useful for making assertions about specific nodes in the tree. You can use it to find other &ldquo;test instances&rdquo; deeper below.</p>\n" +
                    "<h3 id=\"testinstancefind\"><code class=\"gatsby-code-text\">testInstance.find()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find a single descendant test instance for which&nbsp;<code class=\"gatsby-code-text\">test(testInstance)</code>&nbsp;returns&nbsp;<code class=\"gatsby-code-text\">true</code>. If&nbsp;<code class=\"gatsby-code-text\">test(testInstance)</code>&nbsp;does not return&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;for exactly one test instance, it will throw an error.</p>\n" +
                    "<h3 id=\"testinstancefindbytype\"><code class=\"gatsby-code-text\">testInstance.findByType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find a single descendant test instance with the provided&nbsp;<code class=\"gatsby-code-text\">type</code>. If there is not exactly one test instance with the provided&nbsp;<code class=\"gatsby-code-text\">type</code>, it will throw an error.</p>\n" +
                    "<h3 id=\"testinstancefindbyprops\"><code class=\"gatsby-code-text\">testInstance.findByProps()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find a single descendant test instance with the provided&nbsp;<code class=\"gatsby-code-text\">props</code>. If there is not exactly one test instance with the provided&nbsp;<code class=\"gatsby-code-text\">props</code>, it will throw an error.</p>\n" +
                    "<h3 id=\"testinstancefindall\"><code class=\"gatsby-code-text\">testInstance.findAll()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find all descendant test instances for which&nbsp;<code class=\"gatsby-code-text\">test(testInstance)</code>&nbsp;returns&nbsp;<code class=\"gatsby-code-text\">true</code>.</p>\n" +
                    "<h3 id=\"testinstancefindallbytype\"><code class=\"gatsby-code-text\">testInstance.findAllByType()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find all descendant test instances with the provided&nbsp;<code class=\"gatsby-code-text\">type</code>.</p>\n" +
                    "<h3 id=\"testinstancefindallbyprops\"><code class=\"gatsby-code-text\">testInstance.findAllByProps()</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Find all descendant test instances with the provided&nbsp;<code class=\"gatsby-code-text\">props</code>.</p>\n" +
                    "<h3 id=\"testinstanceinstance\"><code class=\"gatsby-code-text\">testInstance.instance</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span>instance</code></pre>\n" +
                    "</div>\n" +
                    "<p>The component instance corresponding to this test instance. It is only available for class components, as function components don&rsquo;t have instances. It matches the&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;value inside the given component.</p>\n" +
                    "<h3 id=\"testinstancetype\"><code class=\"gatsby-code-text\">testInstance.type</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span>type</code></pre>\n" +
                    "</div>\n" +
                    "<p>The component type corresponding to this test instance. For example, a&nbsp;<code class=\"gatsby-code-text\">&lt;Button /&gt;</code>component has a type of&nbsp;<code class=\"gatsby-code-text\">Button</code>.</p>\n" +
                    "<h3 id=\"testinstanceprops\"><code class=\"gatsby-code-text\">testInstance.props</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span>props</code></pre>\n" +
                    "</div>\n" +
                    "<p>The props corresponding to this test instance. For example, a&nbsp;<code class=\"gatsby-code-text\">&lt;Button size=\"small\" /&gt;</code>component has&nbsp;<code class=\"gatsby-code-text\">{size: 'small'}</code>&nbsp;as props.</p>\n" +
                    "<h3 id=\"testinstanceparent\"><code class=\"gatsby-code-text\">testInstance.parent</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span>parent</code></pre>\n" +
                    "</div>\n" +
                    "<p>The parent test instance of this test instance.</p>\n" +
                    "<h3 id=\"testinstancechildren\"><code class=\"gatsby-code-text\">testInstance.children</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">testInstance<span class=\"token punctuation\">.</span>children</code></pre>\n" +
                    "</div>\n" +
                    "<p>The children test instances of this test instance.</p>\n" +
                    "<h2 id=\"ideas\">Ideas</h2>\n" +
                    "<p>You can pass&nbsp;<code class=\"gatsby-code-text\">createNodeMock</code>&nbsp;function to&nbsp;<code class=\"gatsby-code-text\">TestRenderer.create</code>&nbsp;as the option, which allows for custom mock refs.&nbsp;<code class=\"gatsby-code-text\">createNodeMock</code>&nbsp;accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">let</span> focused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n" +
                    "TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyComponent <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">{</span>\n" +
                    "    createNodeMock<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "        <span class=\"token comment\">// mock a focus function</span>\n" +
                    "        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n" +
                    "          focus<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "            focused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n" +
                    "          <span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "      <span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>focused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "</div>");
            sec7React3.setLesson(reactJsLesson3);
            reactJsLesson3.getSections().add(sec7React3);

            Section sec1React4 = new Section();
            sec1React4.setOrdinalNumber(1);
            sec1React4.setDescription("Introducing Hooks");
            sec1React4.setContent("<h2 id=\"no-breaking-changes\">No Breaking Changes</h2>\n" +
                    "<p>Before we continue, note that Hooks are:</p>\n" +
                    "<ul>\n" +
                    "<li><strong>Completely opt-in.</strong>&nbsp;You can try Hooks in a few components without rewriting any existing code. But you don&rsquo;t have to learn or use Hooks right now if you don&rsquo;t want to.</li>\n" +
                    "<li><strong>100% backwards-compatible.</strong>&nbsp;Hooks don&rsquo;t contain any breaking changes.</li>\n" +
                    "<li><strong>Available now.</strong>&nbsp;Hooks are currently in an alpha release, and we hope to include them in React 16.7 after receiving community feedback.</li>\n" +
                    "</ul>\n" +
                    "<p><strong>There are no plans to remove classes from React.</strong>&nbsp;You can read more about the gradual adoption strategy for Hooks in the&nbsp;<a href=\"https://reactjs.org/docs/hooks-intro.html#gradual-adoption-strategy\">bottom section</a>&nbsp;of this page.</p>\n" +
                    "<p><strong>Hooks don&rsquo;t replace your knowledge of React concepts.</strong>&nbsp;Instead, Hooks provide a more direct API to the React concepts you already know: props, state, context, refs, and lifecycle. As we will show later, Hooks also offer a new powerful way to combine them.</p>\n" +
                    "<p><strong>If you just want to start learning Hooks, feel free to&nbsp;<a href=\"https://reactjs.org/docs/hooks-overview.html\">jump directly to the next page!</a></strong>&nbsp;You can also keep reading this page to learn more about why we&rsquo;re adding Hooks, and how we&rsquo;re going to start using them without rewriting our applications.</p>\n" +
                    "<h2 id=\"motivation\">Motivation</h2>\n" +
                    "<p>Hooks solve a wide variety of seemingly unconnected problems in React that we&rsquo;ve encountered over five years of writing and maintaining tens of thousands of components. Whether you&rsquo;re learning React, use it daily, or even prefer a different library with a similar component model, you might recognize some of these problems.</p>\n" +
                    "<h3 id=\"its-hard-to-reuse-stateful-logic-between-components\">It&rsquo;s hard to reuse stateful logic between components</h3>\n" +
                    "<p>React doesn&rsquo;t offer a way to &ldquo;attach&rdquo; reusable behavior to a component (for example, connecting it to a store). If you&rsquo;ve worked with React for a while, you may be familiar with patterns like&nbsp;<a href=\"https://reactjs.org/docs/render-props.html\">render props</a>&nbsp;and&nbsp;<a href=\"https://reactjs.org/docs/higher-order-components.html\">higher-order components</a>&nbsp;that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in React DevTools, you will likely find a &ldquo;wrapper hell&rdquo; of components surrounded by layers of providers, consumers, higher-order components, render props, and other abstractions. While we could&nbsp;<a href=\"https://github.com/facebook/react-devtools/pull/503\">filter them out in DevTools</a>, this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.</p>\n" +
                    "<p>With Hooks, you can extract stateful logic from a component so it can be tested independently and reused.&nbsp;<strong>Hooks allow you to reuse stateful logic without changing your component hierarchy.</strong>&nbsp;This makes it easy to share Hooks among many components or with the community.</p>\n" +
                    "<p>We&rsquo;ll discuss this more in&nbsp;<a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a>.</p>\n" +
                    "<h3 id=\"complex-components-become-hard-to-understand\">Complex components become hard to understand</h3>\n" +
                    "<p>We&rsquo;ve often had to maintain components that started out simple but grew into an unmanageable mess of stateful logic and side effects. Each lifecycle method often contains a mix of unrelated logic. For example, components might perform some data fetching in&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>. However, the same&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>method might also contain some unrelated logic that sets up event listeners, with cleanup performed in&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount</code>. Mutually related code that changes together gets split apart, but completely unrelated code ends up combined in a single method. This makes it too easy to introduce bugs and inconsistencies.</p>\n" +
                    "<p>In many cases it&rsquo;s not possible to break these components into smaller ones because the stateful logic is all over the place. It&rsquo;s also difficult to test them. This is one of the reasons many people prefer to combine React with a separate state management library. However, that often introduces too much abstraction, requires you to jump between different files, and makes reusing components more difficult.</p>\n" +
                    "<p>To solve this,&nbsp;<strong>Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data)</strong>, rather than forcing a split based on lifecycle methods. You may also opt into managing the component&rsquo;s local state with a reducer to make it more predictable.</p>\n" +
                    "<p>We&rsquo;ll discuss this more in&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns\">Using the Effect Hook</a>.</p>\n" +
                    "<h3 id=\"classes-confuse-both-people-and-machines\">Classes confuse both people and machines</h3>\n" +
                    "<p>In our observation, classes are the biggest barrier to learning React. You have to understand how&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;works in JavaScript, which is very different from how it works in most languages. You have to remember to bind the event handlers. Without unstable&nbsp;<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-class-properties/\">syntax proposals</a>, the code is very verbose. People can understand props, state, and top-down data flow perfectly well but still struggle with classes. The distinction between function and class components in React and when to use each one leads to disagreements even between experienced React developers.</p>\n" +
                    "<p>Additionally, React has been out for about five years, and we want to make sure it stays relevant in the next five years. As&nbsp;<a href=\"https://svelte.technology/\">Svelte</a>,&nbsp;<a href=\"https://angular.io/\">Angular</a>,&nbsp;<a href=\"https://glimmerjs.com/\">Glimmer</a>, and others show,&nbsp;<a href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\">ahead-of-time compilation</a>&nbsp;of components has a lot of future potential. Especially if it&rsquo;s not limited to templates. Recently, we&rsquo;ve been experimenting with&nbsp;<a href=\"https://github.com/facebook/react/issues/7323\">component folding</a>&nbsp;using&nbsp;<a href=\"https://prepack.io/\">Prepack</a>, and we&rsquo;ve seen promising early results. However, we found that class components can encourage unintentional patterns that make these optimizations fall back to a slower path. Classes present issues for today&rsquo;s tools, too. For example, classes don&rsquo;t minify very well, and they make hot reloading flaky and unreliable. We want to present an API that makes it more likely for code to stay on the optimizable path.</p>\n" +
                    "<p>To solve these problems,&nbsp;<strong>Hooks let you use more of React&rsquo;s features without classes.</strong>Conceptually, React components have always been closer to functions. Hooks embrace functions, but without sacrificing the practical spirit of React. Hooks provide access to imperative escape hatches and don&rsquo;t require you to learn complex functional or reactive programming techniques.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Examples</p>\n" +
                    "<p><a href=\"https://reactjs.org/docs/hooks-overview.html\">Hooks at a Glance</a>&nbsp;is a good place to start learning Hooks.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"gradual-adoption-strategy\">Gradual Adoption Strategy</h2>\n" +
                    "<blockquote>\n" +
                    "<p><strong>TLDR: There are no plans to remove classes from React.</strong></p>\n" +
                    "</blockquote>\n" +
                    "<p>We know that React developers are focused on shipping products and don&rsquo;t have time to look into every new API that&rsquo;s being released. Hooks are very new, and it might be better to wait for more examples and tutorials before considering learning or adopting them.</p>\n" +
                    "<p>We also understand that the bar for adding a new primitive to React is extremely high. For curious readers, we have prepared a&nbsp;<a href=\"https://github.com/reactjs/rfcs/pull/68\">detailed RFC</a>&nbsp;that dives into motivation with more details, and provides extra perspective on the specific design decisions and related prior art.</p>\n" +
                    "<p><strong>Crucially, Hooks work side-by-side with existing code so you can adopt them gradually.</strong>We are sharing this experimental API to get early feedback from those in the community who are interested in shaping the future of React &mdash; and we will iterate on Hooks in the open.</p>\n" +
                    "<p>Finally, there is no rush to migrate to Hooks. We recommend avoiding any &ldquo;big rewrites&rdquo;, especially for existing, complex class components. It takes a bit of a mindshift to start &ldquo;thinking in Hooks&rdquo;. In our experience, it&rsquo;s best to practice using Hooks in new and non-critical components first, and ensure that everybody on your team feels comfortable with them. After you give Hooks a try, please feel free to&nbsp;<a href=\"https://github.com/facebook/react/issues/new\">send us feedback</a>, positive or negative.</p>\n" +
                    "<p>We intend for Hooks to cover all existing use cases for classes, but&nbsp;<strong>we will keep supporting class components for the foreseeable future.</strong>&nbsp;At Facebook, we have tens of thousands of components written as classes, and we have absolutely no plans to rewrite them. Instead, we are starting to use Hooks in the new code side by side with classes.</p>\n" +
                    "<h2 id=\"next-steps\">&nbsp;</h2>");
            sec1React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec1React4);

            Section sec2React4 = new Section();
            sec2React4.setOrdinalNumber(2);
            sec2React4.setDescription("Hooks at a Glance");
            sec2React4.setContent("<h2 id=\"-state-hook\">State Hook</h2>\n" +
                    "<p>This example renders a counter. When you click the button, it increments the value:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">        Click me</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Here,&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;is a&nbsp;<em>Hook</em>&nbsp;(we&rsquo;ll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders.&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;returns a pair: the&nbsp;<em>current</em>&nbsp;state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It&rsquo;s similar to&nbsp;<code class=\"gatsby-code-text\">this.setState</code>&nbsp;in a class, except it doesn&rsquo;t merge the old and new state together. (We&rsquo;ll show an example comparing&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;in&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html\">Using the State Hook</a>.)</p>\n" +
                    "<p>The only argument to&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;is the initial state. In the example above, it is&nbsp;<code class=\"gatsby-code-text\">0</code>&nbsp;because our counter starts from zero. Note that unlike&nbsp;<code class=\"gatsby-code-text\">this.state</code>, the state here doesn&rsquo;t have to be an object &mdash; although it can be if you want. The initial state argument is only used during the first render.</p>\n" +
                    "<h4 id=\"declaring-multiple-state-variables\">Declaring multiple state variables</h4>\n" +
                    "<p>You can use the State Hook more than once in a single component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Declare multiple state variables!</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">array destructuring</a>&nbsp;syntax lets us give different names to the state variables we declared by calling&nbsp;<code class=\"gatsby-code-text\">useState</code>. These names aren&rsquo;t a part of the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;API. Instead, React assumes that if you call&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;many times, you do it in the same order during every render. We&rsquo;ll come back to why this works and when this is useful later.</p>\n" +
                    "<h4 id=\"but-what-is-a-hook\">But what is a Hook?</h4>\n" +
                    "<p>Hooks are functions that let you &ldquo;hook into&rdquo; React state and lifecycle features from function components. Hooks don&rsquo;t work inside classes &mdash; they let you use React without classes. (We&nbsp;<a href=\"https://reactjs.org/docs/hooks-intro.html#gradual-adoption-strategy\">don&rsquo;t recommend</a>&nbsp;rewriting your existing components overnight but you can start using Hooks in the new ones if you&rsquo;d like.)</p>\n" +
                    "<p>React provides a few built-in Hooks like&nbsp;<code class=\"gatsby-code-text\">useState</code>. You can also create your own Hooks to reuse stateful behavior between different components. We&rsquo;ll look at the built-in Hooks first.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Detailed Explanation</p>\n" +
                    "<p>You can learn more about the State Hook on a dedicated page:&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html\">Using the State Hook</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"️-effect-hook\">⚡️ Effect Hook</h2>\n" +
                    "<p>You&rsquo;ve likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations &ldquo;side effects&rdquo; (or &ldquo;effects&rdquo; for short) because they can affect other components and can&rsquo;t be done during rendering.</p>\n" +
                    "<p>The Effect Hook,&nbsp;<code class=\"gatsby-code-text\">useEffect</code>, adds the ability to perform side effects from a function component. It serves the same purpose as&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>,&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>, and&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount</code>&nbsp;in React classes, but unified into a single API. (We&rsquo;ll show examples comparing&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;to these methods in&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html\">Using the Effect Hook</a>.)</p>\n" +
                    "<p>For example, this component sets the document title after React updates the DOM:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Similar to componentDidMount and componentDidUpdate:</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Update the document title using the browser API</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times`</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">        Click me</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When you call&nbsp;<code class=\"gatsby-code-text\">useEffect</code>, you&rsquo;re telling React to run your &ldquo;effect&rdquo; function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render &mdash;&nbsp;<em>including</em>&nbsp;the first render. (We&rsquo;ll talk more about how this compares to class lifecycles in&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html\">Using the Effect Hook</a>.)</p>\n" +
                    "<p>Effects may also optionally specify how to &ldquo;clean up&rdquo; after them by returning a function. For example, this component uses an effect to subscribe to a friend&rsquo;s online status, and cleans up by unsubscribing from it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In this example, React would unsubscribe from our&nbsp;<code class=\"gatsby-code-text\">ChatAPI</code>&nbsp;when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there&rsquo;s a way to&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\">tell React to skip re-subscribing</a>&nbsp;if the&nbsp;<code class=\"gatsby-code-text\">props.friend.id</code>&nbsp;we passed to&nbsp;<code class=\"gatsby-code-text\">ChatAPI</code>&nbsp;didn&rsquo;t change.)</p>\n" +
                    "<p>Just like with&nbsp;<code class=\"gatsby-code-text\">useState</code>, you can use more than a single effect in a component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times`</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token comment\">// ...</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Hooks let you organize side effects in a component by what pieces are related (such as adding and removing a subscription), rather than forcing a split based on lifecycle methods.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Detailed Explanation</p>\n" +
                    "<p>You can learn more about&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;on a dedicated page:&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html\">Using the Effect Hook</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"️-rules-of-hooks\">✌️ Rules of Hooks</h2>\n" +
                    "<p>Hooks are JavaScript functions, but they impose two additional rules:</p>\n" +
                    "<ul>\n" +
                    "<li>Only call Hooks&nbsp;<strong>at the top level</strong>. Don&rsquo;t call Hooks inside loops, conditions, or nested functions.</li>\n" +
                    "<li>Only call Hooks&nbsp;<strong>from React function components</strong>. Don&rsquo;t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks &mdash; your own custom Hooks. We&rsquo;ll learn about them in a moment.)</li>\n" +
                    "</ul>\n" +
                    "<p>We provide a&nbsp;<a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">linter plugin</a>&nbsp;to enforce these rules automatically. We understand these rules might seem limiting or confusing at first, but they are essential to making Hooks work well.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Detailed Explanation</p>\n" +
                    "<p>You can learn more about these rules on a dedicated page:&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"-building-your-own-hooks\">\uD83D\uDCA1 Building Your Own Hooks</h2>\n" +
                    "<p>Sometimes, we want to reuse some stateful logic between components. Traditionally, there were two popular solutions to this problem:&nbsp;<a href=\"https://reactjs.org/docs/higher-order-components.html\">higher-order components</a>&nbsp;and&nbsp;<a href=\"https://reactjs.org/docs/render-props.html\">render props</a>. Custom Hooks let you do this, but without adding more components to your tree.</p>\n" +
                    "<p>Earlier on this page, we introduced a&nbsp;<code class=\"gatsby-code-text\">FriendStatus</code>&nbsp;component that calls the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;Hooks to subscribe to a friend&rsquo;s online status. Let&rsquo;s say we also want to reuse this subscription logic in another component.</p>\n" +
                    "<p>First, we&rsquo;ll extract this logic into a custom Hook called&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>It takes&nbsp;<code class=\"gatsby-code-text\">friendID</code>&nbsp;as an argument, and returns whether our friend is online.</p>\n" +
                    "<p>Now we can use it from both components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The state of these components is completely independent. Hooks are a way to reuse&nbsp;<em>stateful logic</em>, not state itself. In fact, each&nbsp;<em>call</em>&nbsp;to a Hook has a completely isolated state &mdash; so you can even use the same custom Hook twice in one component.</p>\n" +
                    "<p>Custom Hooks are more of a convention than a feature. If a function&rsquo;s name starts with &rdquo;<code class=\"gatsby-code-text\">use</code>&rdquo; and it calls other Hooks, we say it is a custom Hook. The&nbsp;<code class=\"gatsby-code-text\">useSomething</code>&nbsp;naming convention is how our linter plugin is able to find bugs in the code using Hooks.</p>\n" +
                    "<p>You can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven&rsquo;t considered. We are excited to see what custom Hooks the React community will come up with.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Detailed Explanation</p>\n" +
                    "<p>You can learn more about custom Hooks on a dedicated page:&nbsp;<a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"-other-hooks\">\uD83D\uDD0C Other Hooks</h2>\n" +
                    "<p>There are a few less commonly used built-in Hooks that you might find useful. For example,&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"><code class=\"gatsby-code-text\">useContext</code></a>&nbsp;lets you subscribe to React context without introducing nesting:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> locale <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>LocaleContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>And&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"><code class=\"gatsby-code-text\">useReducer</code></a>&nbsp;lets you manage local state of complex components with a reducer:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token comment\">// ...</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Detailed Explanation</p>\n" +
                    "<p>You can learn more about all the built-in Hooks on a dedicated page:&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html\">Hooks API Reference</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"next-steps\">&nbsp;</h2>");
            sec2React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec2React4);

            Section sec3React4 = new Section();
            sec3React4.setOrdinalNumber(3);
            sec3React4.setDescription("Using the State Hook");
            sec3React4.setContent("<p>The&nbsp;<a href=\"https://reactjs.org/docs/hooks-intro.html\">previous page</a>&nbsp;introduced Hooks with this example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">        Click me</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We&rsquo;ll start learning about Hooks by comparing this code to an equivalent class example.</p>\n" +
                    "<h2 id=\"equivalent-class-example\">Equivalent Class Example</h2>\n" +
                    "<p>If you used classes in React before, this code should look familiar:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "          Click me\n" +
                    "        </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The state starts as&nbsp;<code class=\"gatsby-code-text\">{ count: 0 }</code>, and we increment&nbsp;<code class=\"gatsby-code-text\">state.count</code>&nbsp;when the user clicks a button by calling&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>. We&rsquo;ll use snippets from this class throughout the page.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>You might be wondering why we&rsquo;re using a counter here instead of a more realistic example. This is to help us focus on the API while we&rsquo;re still making our first steps with Hooks.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"hooks-and-function-components\">Hooks and Function Components</h2>\n" +
                    "<p>As a reminder, function components in React look like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// You can use Hooks here!</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>or this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// You can use Hooks here!</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You might have previously known these as &ldquo;stateless components&rdquo;. We&rsquo;re now introducing the ability to use React state from these, so we prefer the name &ldquo;function components&rdquo;.</p>\n" +
                    "<p>Hooks&nbsp;<strong>don&rsquo;t</strong>&nbsp;work inside classes. But you can use them instead of writing classes.</p>\n" +
                    "<h2 id=\"whats-a-hook\">What&rsquo;s a Hook?</h2>\n" +
                    "<p>Our new example starts by importing the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook from React:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>What is a Hook?</strong>&nbsp;A Hook is a special function that lets you &ldquo;hook into&rdquo; React features. For example,&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;is a Hook that lets you add React state to function components. We&rsquo;ll learn other Hooks later.</p>\n" +
                    "<p><strong>When would I use a Hook?</strong>&nbsp;If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We&rsquo;re going to do that right now!</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>There are some special rules about where you can and can&rsquo;t use Hooks within a component. We&rsquo;ll learn them in&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"declaring-a-state-variable\">Declaring a State Variable</h2>\n" +
                    "<p>In a class, we initialize the&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;state to&nbsp;<code class=\"gatsby-code-text\">0</code>&nbsp;by setting&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">{ count: 0 }</code>&nbsp;in the constructor:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In a function component, we have no&nbsp;<code class=\"gatsby-code-text\">this</code>, so we can&rsquo;t assign or read&nbsp;<code class=\"gatsby-code-text\">this.state</code>. Instead, we call the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook directly inside our component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>What does calling&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;do?</strong>&nbsp;It declares a &ldquo;state variable&rdquo;. Our variable is called&nbsp;<code class=\"gatsby-code-text\">count</code>but we could call it anything else, like&nbsp;<code class=\"gatsby-code-text\">banana</code>. This is a way to &ldquo;preserve&rdquo; some values between the function calls &mdash;&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;is a new way to use the exact same capabilities that&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;provides in a class. Normally, variables &ldquo;disappear&rdquo; when the function exits but state variables are preserved by React.</p>\n" +
                    "<p><strong>What do we pass to&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;as an argument?</strong>&nbsp;The only argument to the&nbsp;<code class=\"gatsby-code-text\">useState()</code>&nbsp;Hook is the initial state. Unlike with classes, the state doesn&rsquo;t have to be an object. We can keep a number or a string if that&rsquo;s all we need. In our example, we just want a number for how many times the user clicked, so pass&nbsp;<code class=\"gatsby-code-text\">0</code>&nbsp;as initial state for our variable. (If we wanted to store two different values in state, we would call&nbsp;<code class=\"gatsby-code-text\">useState()</code>&nbsp;twice.)</p>\n" +
                    "<p><strong>What does&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;return?</strong>&nbsp;It returns a pair of values: the current state and a function that updates it. This is why we write&nbsp;<code class=\"gatsby-code-text\">const [count, setCount] = useState()</code>. This is similar to&nbsp;<code class=\"gatsby-code-text\">this.state.count</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">this.setState</code>&nbsp;in a class, except you get them in a pair. If you&rsquo;re not familiar with the syntax we used, we&rsquo;ll come back to it&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html#tip-what-do-square-brackets-mean\">at the bottom of this page</a>.</p>\n" +
                    "<p>Now that we know what the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook does, our example should make more sense:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We declare a state variable called&nbsp;<code class=\"gatsby-code-text\">count</code>, and set it to&nbsp;<code class=\"gatsby-code-text\">0</code>. React will remember its current value between re-renders, and provide the most recent one to our function. If we want to update the current&nbsp;<code class=\"gatsby-code-text\">count</code>, we can call&nbsp;<code class=\"gatsby-code-text\">setCount</code>.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>You might be wondering: why is&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;not named&nbsp;<code class=\"gatsby-code-text\">createState</code>&nbsp;instead?</p>\n" +
                    "<p>&ldquo;Create&rdquo; wouldn&rsquo;t be quite accurate because the state is only created the first time our component renders. During the next renders,&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;gives us the current state. Otherwise it wouldn&rsquo;t be &ldquo;state&rdquo; at all! There&rsquo;s also a reason why Hook names&nbsp;<em>always</em>&nbsp;start with&nbsp;<code class=\"gatsby-code-text\">use</code>. We&rsquo;ll learn why later in the&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"reading-state\">Reading State</h2>\n" +
                    "<p>When we want to display the current count in a class, we read&nbsp;<code class=\"gatsby-code-text\">this.state.count</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In a function, we can use&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;directly:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"updating-state\">Updating State</h2>\n" +
                    "<p>In a class, we need to call&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>&nbsp;to update the&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">    Click me</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In a function, we already have&nbsp;<code class=\"gatsby-code-text\">setCount</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;as variables so we don&rsquo;t need&nbsp;<code class=\"gatsby-code-text\">this</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">    Click me</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"recap\">Recap</h2>\n" +
                    "<p>Let&rsquo;s now&nbsp;<strong>recap what we learned line by line</strong>&nbsp;and check our understanding.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> \n" +
                    " <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n" +
                    " <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    " <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\"> 8:        </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\"> 9:        </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"token plain-text\">10:         Click me</span>\n" +
                    "<span class=\"token plain-text\">11:        </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">12:      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token number\">13</span><span class=\"token punctuation\">:</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token number\">14</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<ul>\n" +
                    "<li><strong>Line 1:</strong>&nbsp;We import the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook from React. It lets us keep local state in a function component.</li>\n" +
                    "<li><strong>Line 4:</strong>&nbsp;Inside the&nbsp;<code class=\"gatsby-code-text\">Example</code>&nbsp;component, we declare a new state variable by calling the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook. It returns a pair of values, to which we give names. We&rsquo;re calling our variable&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;because it holds the number of button clicks. We initialize it to zero by passing&nbsp;<code class=\"gatsby-code-text\">0</code>&nbsp;as the only&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;argument. The second returned item is itself a function. It lets us update the&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;so we&rsquo;ll name it&nbsp;<code class=\"gatsby-code-text\">setCount</code>.</li>\n" +
                    "<li><strong>Line 9:</strong>&nbsp;When the user clicks, we call&nbsp;<code class=\"gatsby-code-text\">setCount</code>&nbsp;with a new value. React will then re-render the&nbsp;<code class=\"gatsby-code-text\">Example</code>component, passing the new&nbsp;<code class=\"gatsby-code-text\">count</code>&nbsp;value to it.</li>\n" +
                    "</ul>\n" +
                    "<p>This might seem like a lot to take in at first. Don&rsquo;t rush it! If you&rsquo;re lost in the explanation, look at the code above again and try to read it from top to bottom. We promise that once you try to &ldquo;forget&rdquo; how state works in classes, and look at this code with fresh eyes, it will make sense.</p>\n" +
                    "<h3 id=\"tip-what-do-square-brackets-mean\">Tip: What Do Square Brackets Mean?</h3>\n" +
                    "<p>You might have noticed the square brackets when we declare a state variable:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The names on the left aren&rsquo;t a part of the React API. You can name your own state variables:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This JavaScript syntax is called&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">&ldquo;array destructuring&rdquo;</a>. It means that we&rsquo;re making two new variables&nbsp;<code class=\"gatsby-code-text\">fruit</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">setFruit</code>, where&nbsp;<code class=\"gatsby-code-text\">fruit</code>&nbsp;is set to the first value returned by&nbsp;<code class=\"gatsby-code-text\">useState</code>, and&nbsp;<code class=\"gatsby-code-text\">setFruit</code>&nbsp;is the second. It is equivalent to this code:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">var</span> fruitStateVariable <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns a pair</span>\n" +
                    "  <span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First item in a pair</span>\n" +
                    "  <span class=\"token keyword\">var</span> setFruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Second item in a pair</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When we declare a state variable with&nbsp;<code class=\"gatsby-code-text\">useState</code>, it returns a pair &mdash; an array with two items. The first item is the current value, and the second is a function that lets us update it. Using&nbsp;<code class=\"gatsby-code-text\">[0]</code>and&nbsp;<code class=\"gatsby-code-text\">[1]</code>&nbsp;to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>You might be curious how React knows which component&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;corresponds to since we&rsquo;re not passing anything like&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;back to React. We&rsquo;ll answer&nbsp;<a href=\"https://reactjs.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\">this question</a>&nbsp;and many others in the FAQ section.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"tip-using-multiple-state-variables\">Tip: Using Multiple State Variables</h3>\n" +
                    "<p>Declaring state variables as a pair of&nbsp;<code class=\"gatsby-code-text\">[something, setSomething]</code>&nbsp;is also handy because it lets us give&nbsp;<em>different</em>&nbsp;names to different state variables if we want to use more than one:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Declare multiple state variables!</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In the above component, we have&nbsp;<code class=\"gatsby-code-text\">age</code>,&nbsp;<code class=\"gatsby-code-text\">fruit</code>, and&nbsp;<code class=\"gatsby-code-text\">todos</code>&nbsp;as local variables, and we can update them individually:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleOrangeClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Similar to this.setState({ fruit: 'orange' })</span>\n" +
                    "    <span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You&nbsp;<strong>don&rsquo;t have to</strong>&nbsp;use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. However, unlike&nbsp;<code class=\"gatsby-code-text\">this.setState</code>&nbsp;in a class, updating a state variable always&nbsp;<em>replaces</em>&nbsp;it instead of merging it.</p>\n" +
                    "<p>We provide more recommendations on splitting independent state variables&nbsp;<a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">in the FAQ</a>.</p>\n" +
                    "<h2 id=\"next-steps\">&nbsp;</h2>");
            sec3React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec3React4);

            Section sec4React4 = new Section();
            sec4React4.setOrdinalNumber(4);
            sec4React4.setDescription("Using the Effect Hook");
            sec4React4.setContent("The Effect Hook lets you perform side effects in function components:\n" +
                    "\n" +
                    "import { useState, useEffect } from 'react';\n" +
                    "\n" +
                    "function Example() {\n" +
                    "  const [count, setCount] = useState(0);\n" +
                    "\n" +
                    "  // Similar to componentDidMount and componentDidUpdate:\n" +
                    "  useEffect(() => {\n" +
                    "    // Update the document title using the browser API\n" +
                    "    document.title = `You clicked ${count} times`;\n" +
                    "  });\n" +
                    "\n" +
                    "  return (\n" +
                    "    <div>\n" +
                    "      <p>You clicked {count} times</p>\n" +
                    "      <button onClick={() => setCount(count + 1)}>\n" +
                    "        Click me\n" +
                    "      </button>\n" +
                    "    </div>\n" +
                    "  );\n" +
                    "}\n" +
                    "This snippet is based on the counter example from the previous page, but we added a new feature to it: we set the document title to a custom message including the number of clicks.\n" +
                    "\n" +
                    "Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. Whether or not you’re used to calling these operations “side effects” (or just “effects”), you’ve likely performed them in your components before.\n" +
                    "\n" +
                    "Tip\n" +
                    "\n" +
                    "If you’re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n" +
                    "\n" +
                    "There are two common kinds of side effects in React components: those that don’t require cleanup, and those that do. Let’s look at this distinction in more detail.\n" +
                    "\n" +
                    "Effects Without Cleanup\n" +
                    "Sometimes, we want to run some additional code after React has updated the DOM. Network requests, manual DOM mutations, and logging are common examples of effects that don’t require a cleanup. We say that because we can run them and immediately forget about them. Let’s compare how classes and Hooks let us express such side effects.\n" +
                    "\n" +
                    "Example Using Classes\n" +
                    "In React class components, the render method itself shouldn’t cause side effects. It would be too early — we typically want to perform our effects after React has updated the DOM.\n" +
                    "\n" +
                    "This is why in React classes, we put side effects into componentDidMount and componentDidUpdate. Coming back to our example, here is a React counter class component that updates the document title right after React makes changes to the DOM:\n" +
                    "\n" +
                    "class Example extends React.Component {\n" +
                    "  constructor(props) {\n" +
                    "    super(props);\n" +
                    "    this.state = {\n" +
                    "      count: 0\n" +
                    "    };\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidMount() {\n" +
                    "    document.title = `You clicked ${this.state.count} times`;\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidUpdate() {\n" +
                    "    document.title = `You clicked ${this.state.count} times`;\n" +
                    "  }\n" +
                    "\n" +
                    "  render() {\n" +
                    "    return (\n" +
                    "      <div>\n" +
                    "        <p>You clicked {this.state.count} times</p>\n" +
                    "        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n" +
                    "          Click me\n" +
                    "        </button>\n" +
                    "      </div>\n" +
                    "    );\n" +
                    "  }\n" +
                    "}\n" +
                    "Note how we have to duplicate the code between these two lifecycle methods in class.\n" +
                    "\n" +
                    "This is because in many cases we want to perform the same side effect regardless of whether the component just mounted, or if it has been updated. Conceptually, we want it to happen after every render — but React class components don’t have a method like this. We could extract a separate method but we would still have to call it in two places.\n" +
                    "\n" +
                    "Now let’s see how we can do the same with the useEffect Hook.\n" +
                    "\n" +
                    "Example Using Hooks\n" +
                    "We’ve already seen this example at the top of this page, but let’s take a closer look at it:\n" +
                    "\n" +
                    "import { useState, useEffect } from 'react';\n" +
                    "\n" +
                    "function Example() {\n" +
                    "  const [count, setCount] = useState(0);\n" +
                    "\n" +
                    "  useEffect(() => {\n" +
                    "    document.title = `You clicked ${count} times`;\n" +
                    "  });\n" +
                    "\n" +
                    "  return (\n" +
                    "    <div>\n" +
                    "      <p>You clicked {count} times</p>\n" +
                    "      <button onClick={() => setCount(count + 1)}>\n" +
                    "        Click me\n" +
                    "      </button>\n" +
                    "    </div>\n" +
                    "  );\n" +
                    "}\n" +
                    "What does useEffect do? By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.\n" +
                    "\n" +
                    "Why is useEffect called inside a component? Placing useEffect inside the component lets us access the count state variable (or any props) right from the effect. We don’t need a special API to read it — it’s already in the function scope. Hooks embrace JavaScript closures and avoid introducing React-specific APIs where JavaScript already provides a solution.\n" +
                    "\n" +
                    "Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update. (We will later talk about how to customize this.) Instead of thinking in terms of “mounting” and “updating”, you might find it easier to think that effects happen “after render”. React guarantees the DOM has been updated by the time it runs the effects.\n" +
                    "\n" +
                    "Detailed Explanation\n" +
                    "Now that we know more about effects, these lines should make sense:\n" +
                    "\n" +
                    "function Example() {\n" +
                    "  const [count, setCount] = useState(0);\n" +
                    "\n" +
                    "  useEffect(() => {\n" +
                    "    document.title = `You clicked ${count} times`;\n" +
                    "  });\n" +
                    "We declare the count state variable, and then we tell React we need to use an effect. We pass a function to the useEffect Hook. This function we pass is our effect. Inside our effect, we set the document title using the document.title browser API. We can read the latest count inside the effect because it’s in the scope of our function. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM. This happens for every render, including the first one.\n" +
                    "\n" +
                    "Experienced JavaScript developers might notice that the function passed to useEffect is going to be different on every render. This is intentional. In fact, this is what lets us read the count value from inside the effect without worrying about it getting stale. Every time we re-render, we schedule a different effect, replacing the previous one. In a way, this makes the effects behave more like a part of the render result — each effect “belongs” to a particular render. We will see more clearly why this is useful later on this page.\n" +
                    "\n" +
                    "Tip\n" +
                    "\n" +
                    "Unlike componentDidMount or componentDidUpdate, effects scheduled with useEffect don’t block the browser from updating the screen. This makes your app feel more responsive. The majority of effects don’t need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate useLayoutEffect Hook with an API identical to useEffect.\n" +
                    "\n" +
                    "Effects with Cleanup\n" +
                    "Earlier, we looked at how to express side effects that don’t require any cleanup. However, some effects do. For example, we might want to set up a subscription to some external data source. In that case, it is important to clean up so that we don’t introduce a memory leak! Let’s compare how we can do it with classes and with Hooks.\n" +
                    "\n" +
                    "Example Using Classes\n" +
                    "In a React class, you would typically set up a subscription in componentDidMount, and clean it up in componentWillUnmount. For example, let’s say we have a ChatAPI module that lets us subscribe to a friend’s online status. Here’s how we might subscribe and display that status using a class:\n" +
                    "\n" +
                    "class FriendStatus extends React.Component {\n" +
                    "  constructor(props) {\n" +
                    "    super(props);\n" +
                    "    this.state = { isOnline: null };\n" +
                    "    this.handleStatusChange = this.handleStatusChange.bind(this);\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidMount() {\n" +
                    "    ChatAPI.subscribeToFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  componentWillUnmount() {\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  handleStatusChange(status) {\n" +
                    "    this.setState({\n" +
                    "      isOnline: status.isOnline\n" +
                    "    });\n" +
                    "  }\n" +
                    "\n" +
                    "  render() {\n" +
                    "    if (this.state.isOnline === null) {\n" +
                    "      return 'Loading...';\n" +
                    "    }\n" +
                    "    return this.state.isOnline ? 'Online' : 'Offline';\n" +
                    "  }\n" +
                    "}\n" +
                    "Notice how componentDidMount and componentWillUnmount need to mirror each other. Lifecycle methods force us to split this logic even though conceptually code in both of them is related to the same effect.\n" +
                    "\n" +
                    "Note\n" +
                    "\n" +
                    "Eagle-eyed readers may notice that this example also needs a componentDidUpdate method to be fully correct. We’ll ignore this for now but will come back to it in a later section of this page.\n" +
                    "\n" +
                    "Example Using Hooks\n" +
                    "Let’s see how we could write this component with Hooks.\n" +
                    "\n" +
                    "You might be thinking that we’d need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that useEffect is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:\n" +
                    "\n" +
                    "import { useState, useEffect } from 'react';\n" +
                    "\n" +
                    "function FriendStatus(props) {\n" +
                    "  const [isOnline, setIsOnline] = useState(null);\n" +
                    "\n" +
                    "  function handleStatusChange(status) {\n" +
                    "    setIsOnline(status.isOnline);\n" +
                    "  }\n" +
                    "\n" +
                    "  useEffect(() => {\n" +
                    "    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    // Specify how to clean up after this effect:\n" +
                    "    return function cleanup() {\n" +
                    "      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    };\n" +
                    "  });\n" +
                    "\n" +
                    "  if (isOnline === null) {\n" +
                    "    return 'Loading...';\n" +
                    "  }\n" +
                    "  return isOnline ? 'Online' : 'Offline';\n" +
                    "}\n" +
                    "Why did we return a function from our effect? This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They’re part of the same effect!\n" +
                    "\n" +
                    "When exactly does React clean up an effect? React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React also cleans up effects from the previous render before running the effects next time. We’ll discuss why this helps avoid bugs and how to opt out of this behavior in case it creates performance issues later below.\n" +
                    "\n" +
                    "Note\n" +
                    "\n" +
                    "We don’t have to return a named function from the effect. We called it cleanup here to clarify its purpose, but you could return an arrow function or call it something different.\n" +
                    "\n" +
                    "Recap\n" +
                    "We’ve learned that useEffect lets us express different kinds of side effects after a component renders. Some effects might require cleanup so they return a function:\n" +
                    "\n" +
                    "  useEffect(() => {\n" +
                    "    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    return () => {\n" +
                    "      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    };\n" +
                    "  });\n" +
                    "Other effects might not have a cleanup phase, and don’t return anything.\n" +
                    "\n" +
                    "  useEffect(() => {\n" +
                    "    document.title = `You clicked ${count} times`;\n" +
                    "  });\n" +
                    "The Effect Hook unifies both use cases with a single API.\n" +
                    "\n" +
                    "If you feel like you have a decent grasp on how the Effect Hook works, or if you feel overwhelmed, you can jump to the next page about Rules of Hooks now.\n" +
                    "\n" +
                    "Tips for Using Effects\n" +
                    "We’ll continue this page with an in-depth look at some aspects of useEffect that experienced React users will likely be curious about. Don’t feel obligated to dig into them now. You can always come back to this page to learn more details about the Effect Hook.\n" +
                    "\n" +
                    "Tip: Use Multiple Effects to Separate Concerns\n" +
                    "One of the problems we outlined in the Motivation for Hooks is that class lifecycle methods often contain unrelated logic, but related logic gets broken up into several methods. Here is a component that combines the counter and the friend status indicator logic from the previous examples:\n" +
                    "\n" +
                    "class FriendStatusWithCounter extends React.Component {\n" +
                    "  constructor(props) {\n" +
                    "    super(props);\n" +
                    "    this.state = { count: 0, isOnline: null };\n" +
                    "    this.handleStatusChange = this.handleStatusChange.bind(this);\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidMount() {\n" +
                    "    document.title = `You clicked ${this.state.count} times`;\n" +
                    "    ChatAPI.subscribeToFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidUpdate() {\n" +
                    "    document.title = `You clicked ${this.state.count} times`;\n" +
                    "  }\n" +
                    "\n" +
                    "  componentWillUnmount() {\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  handleStatusChange(status) {\n" +
                    "    this.setState({\n" +
                    "      isOnline: status.isOnline\n" +
                    "    });\n" +
                    "  }\n" +
                    "  // ...\n" +
                    "Note how the logic that sets document.title is split between componentDidMount and componentDidUpdate. The subscription logic is also spread between componentDidMount and componentWillUnmount. And componentDidMount contains code for both tasks.\n" +
                    "\n" +
                    "So, how can Hooks solve this problem? Just like you can use the State Hook more than once, you can also use several effects. This lets us separate unrelated logic into different effects:\n" +
                    "\n" +
                    "function FriendStatusWithCounter(props) {\n" +
                    "  const [count, setCount] = useState(0);\n" +
                    "  useEffect(() => {\n" +
                    "    document.title = `You clicked ${count} times`;\n" +
                    "  });\n" +
                    "\n" +
                    "  const [isOnline, setIsOnline] = useState(null);\n" +
                    "  useEffect(() => {\n" +
                    "    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    return () => {\n" +
                    "      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    };\n" +
                    "  });\n" +
                    "\n" +
                    "  function handleStatusChange(status) {\n" +
                    "    setIsOnline(status.isOnline);\n" +
                    "  }\n" +
                    "  // ...\n" +
                    "}\n" +
                    "Hooks lets us split the code based on what it is doing rather than a lifecycle method name. React will apply every effect used by the component, in the order they were specified.\n" +
                    "\n" +
                    "Explanation: Why Effects Run on Each Update\n" +
                    "If you’re used to classes, you might be wondering why the effect cleanup phase happens after every re-render, and not just once during unmounting. Let’s look at a practical example to see why this design helps us create components with fewer bugs.\n" +
                    "\n" +
                    "Earlier on this page, we introduced an example FriendStatus component that displays whether a friend is online or not. Our class reads friend.id from this.props, subscribes to the friend status after the component mounts, and unsubscribes during unmounting:\n" +
                    "\n" +
                    "  componentDidMount() {\n" +
                    "    ChatAPI.subscribeToFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  componentWillUnmount() {\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "But what happens if the friend prop changes while the component is on the screen? Our component would continue displaying the online status of a different friend. This is a bug. We would also cause a memory leak or crash when unmounting since the unsubscribe call would use the wrong friend ID.\n" +
                    "\n" +
                    "In a class component, we would need to add componentDidUpdate to handle this case:\n" +
                    "\n" +
                    "  componentDidMount() {\n" +
                    "    ChatAPI.subscribeToFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  componentDidUpdate(prevProps) {\n" +
                    "    // Unsubscribe from the previous friend.id\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(\n" +
                    "      prevProps.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "    // Subscribe to the next friend.id\n" +
                    "    ChatAPI.subscribeToFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "\n" +
                    "  componentWillUnmount() {\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(\n" +
                    "      this.props.friend.id,\n" +
                    "      this.handleStatusChange\n" +
                    "    );\n" +
                    "  }\n" +
                    "Forgetting to handle componentDidUpdate properly is a common source of bugs in React applications.\n" +
                    "\n" +
                    "Now consider the version of this component that uses Hooks:\n" +
                    "\n" +
                    "function FriendStatus(props) {\n" +
                    "  // ...\n" +
                    "  useEffect(() => {\n" +
                    "    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    return () => {\n" +
                    "      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "    };\n" +
                    "  });\n" +
                    "It doesn’t suffer from this bug. (But we also didn’t make any changes to it.)\n" +
                    "\n" +
                    "There is no special code for handling updates because useEffect handles them by default. It cleans up the previous effects before applying the next effects. To illustrate this, here is a sequence of subscribe and unsubscribe calls that this component could produce over time:\n" +
                    "\n" +
                    "// Mount with { friend: { id: 100 } } props\n" +
                    "ChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n" +
                    "\n" +
                    "// Update with { friend: { id: 200 } } props\n" +
                    "ChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\n" +
                    "ChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n" +
                    "\n" +
                    "// Update with { friend: { id: 300 } } props\n" +
                    "ChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\n" +
                    "ChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n" +
                    "\n" +
                    "// Unmount\n" +
                    "ChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n" +
                    "This behavior ensures consistency by default and prevents bugs that are common in class components due to missing update logic.\n" +
                    "\n" +
                    "Tip: Optimizing Performance by Skipping Effects\n" +
                    "In some cases, cleaning up or applying the effect after every render might create a performance problem. In class components, we can solve this by writing an extra comparison with prevProps or prevState inside componentDidUpdate:\n" +
                    "\n" +
                    "componentDidUpdate(prevProps, prevState) {\n" +
                    "  if (prevState.count !== this.state.count) {\n" +
                    "    document.title = `You clicked ${this.state.count} times`;\n" +
                    "  }\n" +
                    "}\n" +
                    "This requirement is common enough that it is built into the useEffect Hook API. You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect:\n" +
                    "\n" +
                    "useEffect(() => {\n" +
                    "  document.title = `You clicked ${count} times`;\n" +
                    "}, [count]); // Only re-run the effect if count changes\n" +
                    "In the example above, we pass [count] as the second argument. What does this mean? If the count is 5, and then our component re-renders with count still equal to 5, React will compare [5] from the previous render and [5] from the next render. Because all items in the array are the same (5 === 5), React would skip the effect. That’s our optimization.\n" +
                    "\n" +
                    "When we render with count updated to 6, React will compare the items in the [5] array from the previous render to items in the [6] array from the next render. This time, React will re-apply the effect because 5 !== 6. If there are multiple items in the array, React will re-run the effect even if just one of them is different.\n" +
                    "\n" +
                    "This also works for effects that have a cleanup phase:\n" +
                    "\n" +
                    "useEffect(() => {\n" +
                    "  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "  return () => {\n" +
                    "    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n" +
                    "  };\n" +
                    "}, [props.friend.id]); // Only re-subscribe if props.friend.id changes\n" +
                    "In the future, the second argument might get added automatically by a build-time transformation.\n" +
                    "\n" +
                    "Note\n" +
                    "\n" +
                    "If you use this optimization, make sure the array includes any values from the outer scope that change over time and that are used by the effect. Otherwise, your code will reference stale values from previous renders. We’ll also discuss other optimization options in the Hooks API reference.\n" +
                    "\n" +
                    "If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. This tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the inputs array always works. While passing [] is closer to the familiar componentDidMount and componentWillUnmount mental model, we suggest not making it a habit because it often leads to bugs, as discussed above. Don’t forget that React defers running useEffect until after the browser has painted, so doing extra work is less of a problem.\n" +
                    "\n");
            sec4React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec4React4);

            Section sec5React4 = new Section();
            sec5React4.setOrdinalNumber(5);
            sec5React4.setDescription("Rules of Hooks");
            sec5React4.setContent("<h3 id=\"only-call-hooks-at-the-top-level\">Only Call Hooks at the Top Level</h3>\n" +
                    "<p><strong>Don&rsquo;t call Hooks inside loops, conditions, or nested functions.</strong>&nbsp;Instead, always use Hooks at the top level of your React function. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That&rsquo;s what allows React to correctly preserve the state of Hooks between multiple&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;calls. (If you&rsquo;re curious, we&rsquo;ll explain this in depth&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\">below</a>.)</p>\n" +
                    "<h3 id=\"only-call-hooks-from-react-functions\">Only Call Hooks from React Functions</h3>\n" +
                    "<p><strong>Don&rsquo;t call Hooks from regular JavaScript functions.</strong>&nbsp;Instead, you can:</p>\n" +
                    "<ul>\n" +
                    "<li>✅ Call Hooks from React function components.</li>\n" +
                    "<li>✅ Call Hooks from custom Hooks (we&rsquo;ll learn about them&nbsp;<a href=\"https://reactjs.org/docs/hooks-custom.html\">on the next page</a>).</li>\n" +
                    "</ul>\n" +
                    "<p>By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.</p>\n" +
                    "<h2 id=\"eslint-plugin\">ESLint Plugin</h2>\n" +
                    "<p>We released an ESLint plugin called&nbsp;<a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code class=\"gatsby-code-text\">eslint-plugin-react-hooks</code></a>&nbsp;that enforces these two rules. You can add this plugin to your project if you&rsquo;d like to try it:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks@next</code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Your ESLint configuration</span>\n" +
                    "<span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token string\">\"plugins\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n" +
                    "    <span class=\"token comment\">// ...</span>\n" +
                    "    <span class=\"token string\">\"react-hooks\"</span>\n" +
                    "  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token string\">\"rules\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// ...</span>\n" +
                    "    <span class=\"token string\">\"react-hooks/rules-of-hooks\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In the future, we intend to include this plugin by default into Create React App and similar toolkits.</p>\n" +
                    "<p><strong>You can skip to the next page explaining how to write&nbsp;<a href=\"https://reactjs.org/docs/hooks-custom.html\">your own Hooks</a>&nbsp;now.</strong>&nbsp;On this page, we&rsquo;ll continue by explaining the reasoning behind these rules.</p>\n" +
                    "<h2 id=\"explanation\">Explanation</h2>\n" +
                    "<p>As we&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\">learned earlier</a>, we can use multiple State or Effect Hooks in a single component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// 1. Use the name state variable</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// 2. Use an effect for persisting the form</span>\n" +
                    "  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// 3. Use the surname state variable</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>surname<span class=\"token punctuation\">,</span> setSurname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// 4. Use an effect for updating the title</span>\n" +
                    "  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">updateTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> surname<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>So how does React know which state corresponds to which&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;call? The answer is that&nbsp;<strong>React relies on the order in which Hooks are called</strong>. Our example works because the order of the Hook calls is the same on every render:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// ------------</span>\n" +
                    "<span class=\"token comment\">// First render</span>\n" +
                    "<span class=\"token comment\">// ------------</span>\n" +
                    "<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Initialize the name state variable with 'Mary'</span>\n" +
                    "<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Add an effect for persisting the form</span>\n" +
                    "<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Initialize the surname state variable with 'Poppins'</span>\n" +
                    "<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Add an effect for updating the title</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// -------------</span>\n" +
                    "<span class=\"token comment\">// Second render</span>\n" +
                    "<span class=\"token comment\">// -------------</span>\n" +
                    "<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Read the name state variable (argument is ignored)</span>\n" +
                    "<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Replace the effect for persisting the form</span>\n" +
                    "<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Read the surname state variable (argument is ignored)</span>\n" +
                    "<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Replace the effect for updating the title</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// ...</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>As long as the order of the Hook calls is the same between renders, React can associate some local state with each of them. But what happens if we put a Hook call (for example, the&nbsp;<code class=\"gatsby-code-text\">persistForm</code>&nbsp;effect) inside a condition?</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token comment\">// \uD83D\uDD34 We're breaking the first rule by using a Hook in a condition</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">name !== ''</code>&nbsp;condition is&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;on the first render, so we run this Hook. However, on the next render the user might clear the form, making the condition&nbsp;<code class=\"gatsby-code-text\">false</code>. Now that we skip this Hook during rendering, the order of the Hook calls becomes different:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Read the name state variable (argument is ignored)</span>\n" +
                    "<span class=\"token comment\">// useEffect(persistForm)  // \uD83D\uDD34 This Hook was skipped!</span>\n" +
                    "<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// \uD83D\uDD34 2 (but was 3). Fail to read the surname state variable</span>\n" +
                    "<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \uD83D\uDD34 3 (but was 4). Fail to replace the effect</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React wouldn&rsquo;t know what to return for the second&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook call. React expected that the second Hook call in this component corresponds to the&nbsp;<code class=\"gatsby-code-text\">persistForm</code>&nbsp;effect, just like during the previous render, but it doesn&rsquo;t anymore. From that point, every next Hook call after the one we skipped would also shift by one, leading to bugs.</p>\n" +
                    "<p><strong>This is why Hooks must be called on the top level of our components.</strong>&nbsp;If we want to run an effect conditionally, we can put that condition&nbsp;<em>inside</em>&nbsp;our Hook:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// \uD83D\uDC4D We're not breaking the first rule anymore</span>\n" +
                    "    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>Note that you don&rsquo;t need to worry about this problem if you use the&nbsp;<a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">provided lint rule</a>.</strong>But now you also know&nbsp;<em>why</em>&nbsp;Hooks work this way, and which issues the rule is preventing.</p>\n" +
                    "<h2 id=\"next-steps\">&nbsp;</h2>");
            sec5React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec5React4);

            Section sec6React4 = new Section();
            sec6React4.setOrdinalNumber(6);
            sec6React4.setDescription("Building Your Own Hooks");
            sec6React4.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Building your own Hooks lets you extract component logic into reusable functions.</p>\n" +
                    "<p>When we were learning about&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1\">using the Effect Hook</a>, we saw this component from a chat application that displays a message indicating whether a friend is online or offline:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now let&rsquo;s say that our chat application also has a contact list, and we want to render names of online users with a green color. We could copy and paste similar logic above into our&nbsp;<code class=\"gatsby-code-text\">FriendListItem</code>&nbsp;component but it wouldn&rsquo;t be ideal:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Instead, we&rsquo;d like to share this logic between&nbsp;<code class=\"gatsby-code-text\">FriendStatus</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">FriendListItem</code>.</p>\n" +
                    "<p>Traditionally in React, we&rsquo;ve had two popular ways to share stateful logic between components:&nbsp;<a href=\"https://reactjs.org/docs/render-props.html\">render props</a>&nbsp;and&nbsp;<a href=\"https://reactjs.org/docs/higher-order-components.html\">higher-order components</a>. We will now look at how Hooks solve many of the same problems without forcing you to add more components to the tree.</p>\n" +
                    "<h2 id=\"extracting-a-custom-hook\">Extracting a Custom Hook</h2>\n" +
                    "<p>When we want to share logic between two JavaScript functions, we extract it to a third function. Both components and Hooks are functions, so this works for them too!</p>\n" +
                    "<p><strong>A custom Hook is a JavaScript function whose name starts with &rdquo;<code class=\"gatsby-code-text\">use</code>&rdquo; and that may call other Hooks.</strong>&nbsp;For example,&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;below is our first custom Hook:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>There&rsquo;s nothing new inside of it &mdash; the logic is copied from the components above. Just like in a component, make sure to only call other Hooks unconditionally at the top level of your custom Hook.</p>\n" +
                    "<p>Unlike a React component, a custom Hook doesn&rsquo;t need to have a specific signature. We can decide what it takes as arguments, and what, if anything, it should return. In other words, it&rsquo;s just like a normal function. Its name should always start with&nbsp;<code class=\"gatsby-code-text\">use</code>&nbsp;so that you can tell at a glance that the&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html\">rules of Hooks</a>&nbsp;apply to it.</p>\n" +
                    "<p>The purpose of our&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;Hook is to subscribe us to a friend&rsquo;s status. This is why it takes&nbsp;<code class=\"gatsby-code-text\">friendID</code>&nbsp;as an argument, and returns whether this friend is online:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  \n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now let&rsquo;s see how we can use our custom Hook.</p>\n" +
                    "<h2 id=\"using-a-custom-hook\">Using a Custom Hook</h2>\n" +
                    "<p>In the beginning, our stated goal was to remove the duplicated logic from the&nbsp;<code class=\"gatsby-code-text\">FriendStatus</code>and&nbsp;<code class=\"gatsby-code-text\">FriendListItem</code>&nbsp;components. Both of them want to know whether a friend is online.</p>\n" +
                    "<p>Now that we&rsquo;ve extracted this logic to a&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;hook, we can&nbsp;<em>just use it:</em></p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>Is this code equivalent to the original examples?</strong>&nbsp;Yes, it works in exactly the same way. If you look closely, you&rsquo;ll notice we didn&rsquo;t make any changes to the behavior. All we did was to extract some common code between two functions into a separate function.&nbsp;<strong>Custom Hooks are a convention that naturally follows from the design of Hooks, rather than a React feature.</strong></p>\n" +
                    "<p><strong>Do I have to name my custom Hooks starting with &ldquo;<code class=\"gatsby-code-text\">use</code>&rdquo;?</strong>&nbsp;Please do. This convention is very important. Without it, we wouldn&rsquo;t be able to automatically check for violations of&nbsp;<a href=\"https://reactjs.org/docs/hooks-rules.html\">rules of Hooks</a>&nbsp;because we couldn&rsquo;t tell if a certain function contains calls to Hooks inside of it.</p>\n" +
                    "<p><strong>Do two components using the same Hook share state?</strong>&nbsp;No. Custom Hooks are a mechanism to reuse&nbsp;<em>stateful logic</em>&nbsp;(such as setting up a subscription and remembering the current value), but every time you use a custom Hook, all state and effects inside of it are fully isolated.</p>\n" +
                    "<p><strong>How does a custom Hook get isolated state?</strong>&nbsp;Each&nbsp;<em>call</em>&nbsp;to a Hook gets isolated state. Because we call&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;directly, from React&rsquo;s point of view our component just calls&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">useEffect</code>. And as we&nbsp;<a href=\"https://reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables\">learned</a>&nbsp;<a href=\"https://reactjs.org/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns\">earlier</a>, we can call&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">useEffect</code>many times in one component, and they will be completely independent.</p>\n" +
                    "<h3 id=\"tip-pass-information-between-hooks\">Tip: Pass Information Between Hooks</h3>\n" +
                    "<p>Since Hooks are functions, we can pass information between them.</p>\n" +
                    "<p>To illustrate this, we&rsquo;ll use another component from our hypothetical chat example. This is a chat message recipient picker that displays whether the currently selected friend is online:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> friendList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n" +
                    "  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Phoebe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Rachel'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Ross'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">ChatRecipientPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Circle <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isRecipientOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select\n" +
                    "        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>recipientID<span class=\"token punctuation\">}</span></span>\n" +
                    "        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setRecipientID</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>friendList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>friend <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We keep the currently chosen friend ID in the&nbsp;<code class=\"gatsby-code-text\">recipientID</code>&nbsp;state variable, and update it if the user chooses a different friend in the&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;picker.</p>\n" +
                    "<p>Because the&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;Hook call gives us the latest value of the&nbsp;<code class=\"gatsby-code-text\">recipientID</code>&nbsp;state variable, we can pass it to our custom&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;Hook as an argument:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This lets us know whether the&nbsp;<em>currently selected</em>&nbsp;friend is online. If we pick a different friend and update the&nbsp;<code class=\"gatsby-code-text\">recipientID</code>&nbsp;state variable, our&nbsp;<code class=\"gatsby-code-text\">useFriendStatus</code>&nbsp;Hook will unsubscribe from the previously selected friend, and subscribe to the status of the newly selected one.</p>\n" +
                    "<h2 id=\"useyourimagination\"><code class=\"gatsby-code-text\">useYourImagination()</code></h2>\n" +
                    "<p>Custom Hooks offer the flexibility of sharing logic that wasn&rsquo;t possible in React components before. You can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven&rsquo;t considered. What&rsquo;s more, you can build Hooks that are just as easy to use as React&rsquo;s built-in features.</p>\n" +
                    "<p>Try to resist adding abstraction too early. Now that function components can do more, it&rsquo;s likely that the average function component in your codebase will become longer. This is normal &mdash; don&rsquo;t feel like you&nbsp;<em>have to</em>&nbsp;immediately split it into Hooks. But we also encourage you to start spotting cases where a custom Hook could hide complex logic behind a simple interface, or help untangle a messy component.</p>\n" +
                    "<p>For example, maybe you have a complex component that contains a lot of local state that is managed in an ad-hoc way.&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;doesn&rsquo;t make centralizing the update logic any easier so might you prefer to write it as a&nbsp;<a href=\"https://redux.js.org/\">Redux</a>&nbsp;reducer:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">todosReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n" +
                    "        text<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n" +
                    "        completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n" +
                    "      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token comment\">// ... other actions ...</span>\n" +
                    "    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Reducers are very convenient to test in isolation, and scale to express complex update logic. You can further break them apart into smaller reducers if necessary. However, you might also enjoy the benefits of using React local state, or might not want to install another library.</p>\n" +
                    "<p>So what if we could write a&nbsp;<code class=\"gatsby-code-text\">useReducer</code>&nbsp;Hook that lets us manage the&nbsp;<em>local</em>&nbsp;state of our component with a reducer? A simplified version of it might look like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now we could use it in our component, and let the reducer drive its state management:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAddClick</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The need to manage local state with a reducer in a complex component is common enough that we&rsquo;ve built the&nbsp;<code class=\"gatsby-code-text\">useReducer</code>&nbsp;Hook right into React. You&rsquo;ll find it together with other built-in Hooks in the&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html\">Hooks API reference</a>.</p>\n" +
                    "</div>");
            sec6React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec6React4);

            Section sec7React4 = new Section();
            sec7React4.setOrdinalNumber(7);
            sec7React4.setDescription("Hooks API Reference");
            sec7React4.setContent("<p>This page describes the APIs for the built-in Hooks in React.</p>\n" +
                    "<p>If you&rsquo;re new to Hooks, you might want to check out&nbsp;<a href=\"https://reactjs.org/docs/hooks-overview.html\">the overview</a>&nbsp;first. You may also find useful information in the&nbsp;<a href=\"https://reactjs.org/docs/hooks-faq.html\">frequently asked questions</a>&nbsp;section.</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\">Basic Hooks</a></p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"gatsby-code-text\">useState</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\"><code class=\"gatsby-code-text\">useEffect</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"><code class=\"gatsby-code-text\">useContext</code></a></li>\n" +
                    "</ul>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\">Additional Hooks</a></p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"><code class=\"gatsby-code-text\">useReducer</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\"><code class=\"gatsby-code-text\">useCallback</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\"><code class=\"gatsby-code-text\">useMemo</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useref\"><code class=\"gatsby-code-text\">useRef</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativemethods\"><code class=\"gatsby-code-text\">useImperativeMethods</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usemutationeffect\"><code class=\"gatsby-code-text\">useMutationEffect</code></a></li>\n" +
                    "<li><a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\"><code class=\"gatsby-code-text\">useLayoutEffect</code></a></li>\n" +
                    "</ul>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"basic-hooks\">Basic Hooks</h2>\n" +
                    "<h3 id=\"usestate\"><code class=\"gatsby-code-text\">useState</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns a stateful value, and a function to update it.</p>\n" +
                    "<p>During the initial render, the returned state (<code class=\"gatsby-code-text\">state</code>) is the same as the value passed as the first argument (<code class=\"gatsby-code-text\">initialState</code>).</p>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>During subsequent re-renders, the first value returned by&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;will always be the most recent state after applying updates.</p>\n" +
                    "<h4 id=\"functional-updates\">Functional updates</h4>\n" +
                    "<p>If the new state is computed using the previous state, you can pass a function to&nbsp;<code class=\"gatsby-code-text\">setState</code>. The function will receive the previous value, and return an updated value. Here&rsquo;s an example of a counter component that uses both forms of&nbsp;<code class=\"gatsby-code-text\">setState</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "      Count: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Reset</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>prevCount <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>prevCount <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The &rdquo;+&rdquo; and &rdquo;-&rdquo; buttons use the functional form, because the updated value is based on the previous value. But the &ldquo;Reset&rdquo; button uses the normal form, because it always sets the count back to 0.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>Unlike the&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;method found in class components,&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Object.assign would also work</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updatedValues<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Another option is&nbsp;<code class=\"gatsby-code-text\">useReducer</code>, which is more suited for managing state objects that contain multiple sub-values.</p>\n" +
                    "</blockquote>\n" +
                    "<h4 id=\"lazy-initialization\">Lazy initialization</h4>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">initialState</code>&nbsp;argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"useeffect\"><code class=\"gatsby-code-text\">useEffect</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Accepts a function that contains imperative, possibly effectful code.</p>\n" +
                    "<p>Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React&rsquo;s&nbsp;<em>render phase</em>). Doing so will lead to confusing bugs and inconsistencies in the UI.</p>\n" +
                    "<p>Instead, use&nbsp;<code class=\"gatsby-code-text\">useEffect</code>. The function passed to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;will run after the render is committed to the screen. Think of effects as an escape hatch from React&rsquo;s purely functional world into the imperative world.</p>\n" +
                    "<p>By default, effects run after every completed render, but you can choose to fire it&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">only when certain values have changed</a>.</p>\n" +
                    "<h4 id=\"cleaning-up-an-effect\">Cleaning up an effect</h4>\n" +
                    "<p>Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;may return a clean-up function. For example, to create a subscription:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Clean up the subscription</span>\n" +
                    "    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the&nbsp;<strong>previous effect is cleaned up before executing the next effect</strong>. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.</p>\n" +
                    "<h4 id=\"timing-of-effects\">Timing of effects</h4>\n" +
                    "<p>Unlike&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>, the function passed to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;fires&nbsp;<strong>after</strong>&nbsp;layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn&rsquo;t block the browser from updating the screen.</p>\n" +
                    "<p>However, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides two additional Hooks:&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#usemutationeffect\"><code class=\"gatsby-code-text\">useMutationEffect</code></a>&nbsp;and&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\"><code class=\"gatsby-code-text\">useLayoutEffect</code></a>. These Hooks have the same signature as&nbsp;<code class=\"gatsby-code-text\">useEffect</code>, and only differ in when they are fired.</p>\n" +
                    "<p>Although&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;is deferred until after the browser has painted, it&rsquo;s guaranteed to fire before any new renders. React will always flush a previous render&rsquo;s effects before starting a new update.</p>\n" +
                    "<h4 id=\"conditionally-firing-an-effect\">Conditionally firing an effect</h4>\n" +
                    "<p>The default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its inputs changes.</p>\n" +
                    "<p>However, this may be overkill in some cases, like the subscription example from the previous section. We don&rsquo;t need to create a new subscription on every update, only if the&nbsp;<code class=\"gatsby-code-text\">source</code>&nbsp;props has changed.</p>\n" +
                    "<p>To implement this, pass a second argument to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;that is the array of values that the effect depends on. Our updated example now looks like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now the subscription will only be recreated when&nbsp;<code class=\"gatsby-code-text\">props.source</code>&nbsp;changes.</p>\n" +
                    "<p>Passing in an empty array&nbsp;<code class=\"gatsby-code-text\">[]</code>&nbsp;of inputs tells React that your effect doesn&rsquo;t depend on any values from the component, so that effect would run only on mount and clean up on unmount; it won&rsquo;t run on updates.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>The array of inputs is not passed as arguments to the effect function. Conceptually, though, that&rsquo;s what they represent: every value referenced inside the effect function should also appear in the inputs array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"usecontext\"><code class=\"gatsby-code-text\">useContext</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Accepts a context object (the value returned from&nbsp;<code class=\"gatsby-code-text\">React.createContext</code>) and returns the current context value, as given by the nearest context provider for the given context.</p>\n" +
                    "<p>When the provider updates, this Hook will trigger a rerender with the latest context value.</p>\n" +
                    "<h2 id=\"additional-hooks\">Additional Hooks</h2>\n" +
                    "<p>The following Hooks are either variants of the basic ones from the previous section, or only needed for specific edge cases. Don&rsquo;t stress about learning them up front.</p>\n" +
                    "<h3 id=\"usereducer\"><code class=\"gatsby-code-text\">useReducer</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>An alternative to&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"gatsby-code-text\">useState</code></a>. Accepts a reducer of type&nbsp;<code class=\"gatsby-code-text\">(state, action) =&gt; newState</code>, and returns the current state paired with a&nbsp;<code class=\"gatsby-code-text\">dispatch</code>&nbsp;method. (If you&rsquo;re familiar with Redux, you already know how this works.)</p>\n" +
                    "<p>Here&rsquo;s the counter example from the&nbsp;<a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"gatsby-code-text\">useState</code></a>&nbsp;section, rewritten to use a reducer:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Reset\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"lazy-initialization-1\">Lazy initialization</h4>\n" +
                    "<p><code class=\"gatsby-code-text\">useReducer</code>&nbsp;accepts an optional third argument,&nbsp;<code class=\"gatsby-code-text\">initialAction</code>. If provided, the initial action is applied during the initial render. This is useful for computing an initial state that includes values passed via props:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">:</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n" +
                    "    reducer<span class=\"token punctuation\">,</span>\n" +
                    "    initialState<span class=\"token punctuation\">,</span>\n" +
                    "    <span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button\n" +
                    "        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Reset\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">useReducer</code>&nbsp;is usually preferable to&nbsp;<code class=\"gatsby-code-text\">useState</code>&nbsp;when you have complex state logic that involves multiple sub-values. It also lets you optimize performance for components that trigger deep updates because&nbsp;<a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">you can pass&nbsp;<code class=\"gatsby-code-text\">dispatch</code>&nbsp;down instead of callbacks</a>.</p>\n" +
                    "<h3 id=\"usecallback\"><code class=\"gatsby-code-text\">useCallback</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a>&nbsp;callback.</p>\n" +
                    "<p>Pass an inline callback and an array of inputs.&nbsp;<code class=\"gatsby-code-text\">useCallback</code>&nbsp;will return a memoized version of the callback that only changes if one of the inputs has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g.&nbsp;<code class=\"gatsby-code-text\">shouldComponentUpdate</code>).</p>\n" +
                    "<p><code class=\"gatsby-code-text\">useCallback(fn, inputs)</code>&nbsp;is equivalent to&nbsp;<code class=\"gatsby-code-text\">useMemo(() =&gt; fn, inputs)</code>.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>The array of inputs is not passed as arguments to the callback. Conceptually, though, that&rsquo;s what they represent: every value referenced inside the callback should also appear in the inputs array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"usememo\"><code class=\"gatsby-code-text\">useMemo</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Returns a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a>&nbsp;value.</p>\n" +
                    "<p>Pass a &ldquo;create&rdquo; function and an array of inputs.&nbsp;<code class=\"gatsby-code-text\">useMemo</code>&nbsp;will only recompute the memoized value when one of the inputs has changed. This optimization helps to avoid expensive calculations on every render.</p>\n" +
                    "<p>If no array is provided, a new value will be computed whenever a new function instance is passed as the first argument. (With an inline function, on every render.)</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>The array of inputs is not passed as arguments to the function. Conceptually, though, that&rsquo;s what they represent: every value referenced inside the function should also appear in the inputs array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"useref\"><code class=\"gatsby-code-text\">useRef</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">useRef</code>&nbsp;returns a mutable ref object whose&nbsp;<code class=\"gatsby-code-text\">.current</code>&nbsp;property is initialized to the passed argument (<code class=\"gatsby-code-text\">initialValue</code>). The returned object will persist for the full lifetime of the component.</p>\n" +
                    "<p>A common use case is to access a child imperatively:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// `current` points to the mounted text input element</span>\n" +
                    "    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Focus the input</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that&nbsp;<code class=\"gatsby-code-text\">useRef()</code>&nbsp;is useful for more than the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute. It&rsquo;s&nbsp;<a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\">handy for keeping any mutable value around</a>&nbsp;similar to how you&rsquo;d use instance fields in classes.</p>\n" +
                    "<h3 id=\"useimperativemethods\"><code class=\"gatsby-code-text\">useImperativeMethods</code></h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useImperativeMethods</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> createInstance<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>inputs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><code class=\"gatsby-code-text\">useImperativeMethods</code>&nbsp;customizes the instance value that is exposed to parent components when using&nbsp;<code class=\"gatsby-code-text\">ref</code>. As always, imperative code using refs should be avoided in most cases.&nbsp;<code class=\"gatsby-code-text\">useImperativeMethods</code>&nbsp;should be used with&nbsp;<code class=\"gatsby-code-text\">forwardRef</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token function\">useImperativeMethods</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "    focus<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "FancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In this example, a parent component that renders&nbsp;<code class=\"gatsby-code-text\">&lt;FancyInput ref={fancyInputRef} /&gt;</code>would be able to call&nbsp;<code class=\"gatsby-code-text\">fancyInputRef.current.focus()</code>.</p>\n" +
                    "<h3 id=\"usemutationeffect\"><code class=\"gatsby-code-text\">useMutationEffect</code></h3>\n" +
                    "<p>The signature is identical to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>, but it fires synchronously during the same phase that React performs its DOM mutations, before sibling components have been updated. Use this to perform custom DOM mutations.</p>\n" +
                    "<p>Prefer the standard&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;when possible to avoid blocking visual updates.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>Avoid reading from the DOM in&nbsp;<code class=\"gatsby-code-text\">useMutationEffect</code>. If you do, you can cause performance problems by introducing&nbsp;<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing\">layout thrash</a>. When reading computed styles or layout information,&nbsp;<code class=\"gatsby-code-text\">useLayoutEffect</code>&nbsp;is more appropriate.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"uselayouteffect\"><code class=\"gatsby-code-text\">useLayoutEffect</code></h3>\n" +
                    "<p>The signature is identical to&nbsp;<code class=\"gatsby-code-text\">useEffect</code>, but it fires synchronously&nbsp;<em>after</em>&nbsp;all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside&nbsp;<code class=\"gatsby-code-text\">useLayoutEffect</code>&nbsp;will be flushed synchronously, before the browser has a chance to paint.</p>\n" +
                    "<p>Prefer the standard&nbsp;<code class=\"gatsby-code-text\">useEffect</code>&nbsp;when possible to avoid blocking visual updates.</p>");
            sec7React4.setLesson(reactJsLesson4);
            reactJsLesson4.getSections().add(sec7React4);

            Section sec1React5 = new Section();
            sec1React5.setOrdinalNumber(1);
            sec1React5.setDescription("How to Contribute");
            sec1React5.setContent("<p>Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read&nbsp;<a href=\"https://code.facebook.com/codeofconduct\">the full text</a>&nbsp;so that you can understand what actions will and will not be tolerated.</p>\n" +
                    "<h3 id=\"open-development\">Open Development</h3>\n" +
                    "<p>All work on React happens directly on&nbsp;<a href=\"https://github.com/facebook/react\">GitHub</a>. Both core team members and external contributors send pull requests which go through the same review process.</p>\n" +
                    "<h3 id=\"branch-organization\">Branch Organization</h3>\n" +
                    "<p>We will do our best to keep the&nbsp;<a href=\"https://github.com/facebook/react/tree/master\"><code class=\"gatsby-code-text\">master</code>&nbsp;branch</a>&nbsp;in good shape, with tests passing at all times. But in order to move fast, we will make API changes that your application might not be compatible with. We recommend that you use&nbsp;<a href=\"https://reactjs.org/downloads.html\">the latest stable version of React</a>.</p>\n" +
                    "<p>If you send a pull request, please do it against the&nbsp;<code class=\"gatsby-code-text\">master</code>&nbsp;branch. We maintain stable branches for major versions separately but we don&rsquo;t accept pull requests to them directly. Instead, we cherry-pick non-breaking changes from master to the latest stable major version.</p>\n" +
                    "<h3 id=\"semantic-versioning\">Semantic Versioning</h3>\n" +
                    "<p>React follows&nbsp;<a href=\"http://semver.org/\">semantic versioning</a>. We release patch versions for bugfixes, minor versions for new features, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance.</p>\n" +
                    "<p>We tag every pull request with a label marking whether the change should go in the next&nbsp;<a href=\"https://github.com/facebook/react/pulls?q=is:open+is:pr+label:semver-patch\">patch</a>,&nbsp;<a href=\"https://github.com/facebook/react/pulls?q=is:open+is:pr+label:semver-minor\">minor</a>, or a&nbsp;<a href=\"https://github.com/facebook/react/pulls?q=is:open+is:pr+label:semver-major\">major</a>&nbsp;version. We release new patch versions every few weeks, minor versions every few months, and major versions one or two times a year.</p>\n" +
                    "<p>Every significant change is documented in the&nbsp;<a href=\"https://github.com/facebook/react/blob/master/CHANGELOG.md\">changelog file</a>.</p>\n" +
                    "<h3 id=\"bugs\">Bugs</h3>\n" +
                    "<h4 id=\"where-to-find-known-issues\">Where to Find Known Issues</h4>\n" +
                    "<p>We are using&nbsp;<a href=\"https://github.com/facebook/react/issues\">GitHub Issues</a>&nbsp;for our public bugs. We keep a close eye on this and try to make it clear when we have an internal fix in progress. Before filing a new task, try to make sure your problem doesn&rsquo;t already exist.</p>\n" +
                    "<h4 id=\"reporting-new-issues\">Reporting New Issues</h4>\n" +
                    "<p>The best way to get your bug fixed is to provide a reduced test case. This&nbsp;<a href=\"https://jsfiddle.net/Luktwrdm/\">JSFiddle template</a>&nbsp;is a great starting point.</p>\n" +
                    "<h4 id=\"security-bugs\">Security Bugs</h4>\n" +
                    "<p>Facebook has a&nbsp;<a href=\"https://www.facebook.com/whitehat/\">bounty program</a>&nbsp;for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.</p>\n" +
                    "<h3 id=\"how-to-get-in-touch\">How to Get in Touch</h3>\n" +
                    "<ul>\n" +
                    "<li>IRC:&nbsp;<a href=\"https://webchat.freenode.net/?channels=reactjs\">#reactjs on freenode</a></li>\n" +
                    "<li>Discussion forum:&nbsp;<a href=\"https://discuss.reactjs.org/\">discuss.reactjs.org</a></li>\n" +
                    "</ul>\n" +
                    "<p>There is also&nbsp;<a href=\"http://www.reactiflux.com/\">an active community of React users on the Discord chat platform</a>&nbsp;in case you need help with React.</p>\n" +
                    "<h3 id=\"proposing-a-change\">Proposing a Change</h3>\n" +
                    "<p>If you intend to change the public API, or make any non-trivial changes to the implementation, we recommend&nbsp;<a href=\"https://github.com/facebook/react/issues/new\">filing an issue</a>. This lets us reach an agreement on your proposal before you put significant effort into it.</p>\n" +
                    "<p>If you&rsquo;re only fixing a bug, it&rsquo;s fine to submit a pull request right away but we still recommend to file an issue detailing what you&rsquo;re fixing. This is helpful in case we don&rsquo;t accept that specific fix but want to keep track of the issue.</p>\n" +
                    "<h3 id=\"your-first-pull-request\">Your First Pull Request</h3>\n" +
                    "<p>Working on your first Pull Request? You can learn how from this free video series:</p>\n" +
                    "<p><strong><a href=\"https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\">How to Contribute to an Open Source Project on GitHub</a></strong></p>\n" +
                    "<p>To help you get your feet wet and get you familiar with our contribution process, we have a list of&nbsp;<strong><a href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22good+first+issue%22\">good first issues</a></strong>&nbsp;that contain bugs that have a relatively limited scope. This is a great place to get started.</p>\n" +
                    "<p>If you decide to fix an issue, please be sure to check the comment thread in case somebody is already working on a fix. If nobody is working on it at the moment, please leave a comment stating that you intend to work on it so other people don&rsquo;t accidentally duplicate your effort.</p>\n" +
                    "<p>If somebody claims an issue but doesn&rsquo;t follow up for more than two weeks, it&rsquo;s fine to take it over but you should still leave a comment.</p>\n" +
                    "<h3 id=\"sending-a-pull-request\">Sending a Pull Request</h3>\n" +
                    "<p>The core team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation. For API changes we may need to fix our internal uses at Facebook.com, which could cause some delay. We&rsquo;ll do our best to provide updates and feedback throughout the process.</p>\n" +
                    "<p><strong>Before submitting a pull request,</strong>&nbsp;please make sure the following is done:</p>\n" +
                    "<ol>\n" +
                    "<li>Fork&nbsp;<a href=\"https://github.com/facebook/react\">the repository</a>&nbsp;and create your branch from&nbsp;<code class=\"gatsby-code-text\">master</code>.</li>\n" +
                    "<li>Run&nbsp;<code class=\"gatsby-code-text\">yarn</code>&nbsp;in the repository root.</li>\n" +
                    "<li>If you&rsquo;ve fixed a bug or added code that should be tested, add tests!</li>\n" +
                    "<li>Ensure the test suite passes (<code class=\"gatsby-code-text\">yarn test</code>). Tip:&nbsp;<code class=\"gatsby-code-text\">yarn test --watch TestName</code>&nbsp;is helpful in development.</li>\n" +
                    "<li>Run&nbsp;<code class=\"gatsby-code-text\">yarn test-prod</code>&nbsp;to test in the production environment. It supports the same options as&nbsp;<code class=\"gatsby-code-text\">yarn test</code>.</li>\n" +
                    "<li>If you need a debugger, run&nbsp;<code class=\"gatsby-code-text\">yarn debug-test --watch TestName</code>, open&nbsp;<code class=\"gatsby-code-text\">chrome://inspect</code>, and press &ldquo;Inspect&rdquo;.</li>\n" +
                    "<li>Format your code with&nbsp;<a href=\"https://github.com/prettier/prettier\">prettier</a>&nbsp;(<code class=\"gatsby-code-text\">yarn prettier</code>).</li>\n" +
                    "<li>Make sure your code lints (<code class=\"gatsby-code-text\">yarn lint</code>). Tip:&nbsp;<code class=\"gatsby-code-text\">yarn linc</code>&nbsp;to only check changed files.</li>\n" +
                    "<li>Run the&nbsp;<a href=\"https://flowtype.org/\">Flow</a>&nbsp;typechecks (<code class=\"gatsby-code-text\">yarn flow</code>).</li>\n" +
                    "<li>If you haven&rsquo;t already, complete the CLA.</li>\n" +
                    "</ol>\n" +
                    "<h3 id=\"contributor-license-agreement-cla\">Contributor License Agreement (CLA)</h3>\n" +
                    "<p>In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you&rsquo;ve done this for another Facebook open source project, you&rsquo;re good to go. If you are submitting a pull request for the first time, just let us know that you have completed the CLA and we can cross-check with your GitHub username.</p>\n" +
                    "<p><strong><a href=\"https://code.facebook.com/cla\">Complete your CLA here.</a></strong></p>\n" +
                    "<h3 id=\"contribution-prerequisites\">Contribution Prerequisites</h3>\n" +
                    "<ul>\n" +
                    "<li>You have&nbsp;<a href=\"https://nodejs.org/\">Node</a>&nbsp;installed at v8.0.0+ and&nbsp;<a href=\"https://yarnpkg.com/en/\">Yarn</a>&nbsp;at v1.2.0+.</li>\n" +
                    "<li>You have&nbsp;<code class=\"gatsby-code-text\">gcc</code>&nbsp;installed or are comfortable installing a compiler if needed. Some of our dependencies may require a compilation step. On OS X, the Xcode Command Line Tools will cover this. On Ubuntu,&nbsp;<code class=\"gatsby-code-text\">apt-get install build-essential</code>&nbsp;will install the required packages. Similar commands should work on other Linux distros. Windows will require some additional steps, see the&nbsp;<a href=\"https://github.com/nodejs/node-gyp#installation\"><code class=\"gatsby-code-text\">node-gyp</code>&nbsp;installation instructions</a>&nbsp;for details.</li>\n" +
                    "<li>You are familiar with Git.</li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"development-workflow\">Development Workflow</h3>\n" +
                    "<p>After cloning React, run&nbsp;<code class=\"gatsby-code-text\">yarn</code>&nbsp;to fetch its dependencies. Then, you can run several commands:</p>\n" +
                    "<ul>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn lint</code>&nbsp;checks the code style.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn linc</code>&nbsp;is like&nbsp;<code class=\"gatsby-code-text\">yarn lint</code>&nbsp;but faster because it only checks files that differ in your branch.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn test</code>&nbsp;runs the complete test suite.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn test --watch</code>&nbsp;runs an interactive test watcher.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn test &lt;pattern&gt;</code>&nbsp;runs tests with matching filenames.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn test-prod</code>&nbsp;runs tests in the production environment. It supports all the same options as&nbsp;<code class=\"gatsby-code-text\">yarn test</code>.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn debug-test</code>&nbsp;is just like&nbsp;<code class=\"gatsby-code-text\">yarn test</code>&nbsp;but with a debugger. Open&nbsp;<code class=\"gatsby-code-text\">chrome://inspect</code>&nbsp;and press &ldquo;Inspect&rdquo;.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn flow</code>&nbsp;runs the&nbsp;<a href=\"https://flowtype.org/\">Flow</a>&nbsp;typechecks.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn build</code>&nbsp;creates a&nbsp;<code class=\"gatsby-code-text\">build</code>&nbsp;folder with all the packages.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">yarn build core,dom --type=UMD</code>&nbsp;creates UMD builds of just React and ReactDOM.</li>\n" +
                    "</ul>\n" +
                    "<p>We recommend running&nbsp;<code class=\"gatsby-code-text\">yarn test</code>&nbsp;(or its variations above) to make sure you don&rsquo;t introduce any regressions as you work on your change. However it can be handy to try your build of React in a real project.</p>\n" +
                    "<p>First, run&nbsp;<code class=\"gatsby-code-text\">yarn build</code>. This will produce pre-built bundles in&nbsp;<code class=\"gatsby-code-text\">build</code>&nbsp;folder, as well as prepare npm packages inside&nbsp;<code class=\"gatsby-code-text\">build/packages</code>.</p>\n" +
                    "<p>The easiest way to try your changes is to run&nbsp;<code class=\"gatsby-code-text\">yarn build core,dom --type=UMD</code>&nbsp;and then open&nbsp;<code class=\"gatsby-code-text\">fixtures/packaging/babel-standalone/dev.html</code>. This file already uses&nbsp;<code class=\"gatsby-code-text\">react.development.js</code>&nbsp;from the&nbsp;<code class=\"gatsby-code-text\">build</code>&nbsp;folder so it will pick up your changes.</p>\n" +
                    "<p>If you want to try your changes in your existing React project, you may copy&nbsp;<code class=\"gatsby-code-text\">build/dist/react.development.js</code>,&nbsp;<code class=\"gatsby-code-text\">build/dist/react-dom.development.js</code>, or any other build products into your app and use them instead of the stable version. If your project uses React from npm, you may delete&nbsp;<code class=\"gatsby-code-text\">react</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">react-dom</code>&nbsp;in its dependencies and use&nbsp;<code class=\"gatsby-code-text\">yarn link</code>&nbsp;to point them to your local&nbsp;<code class=\"gatsby-code-text\">build</code>&nbsp;folder:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"sh\">\n" +
                    "<pre class=\"gatsby-code-sh\"><code class=\"gatsby-code-sh\">cd ~/path_to_your_react_clone/build/node_modules/react\n" +
                    "yarn link\n" +
                    "cd ~/path_to_your_react_clone/build/node_modules/react-dom\n" +
                    "yarn link\n" +
                    "cd /path/to/your/project\n" +
                    "yarn link react react-dom</code></pre>\n" +
                    "</div>\n" +
                    "<p>Every time you run&nbsp;<code class=\"gatsby-code-text\">yarn build</code>&nbsp;in the React folder, the updated versions will appear in your project&rsquo;s&nbsp;<code class=\"gatsby-code-text\">node_modules</code>. You can then rebuild your project to try your changes.</p>\n" +
                    "<p>We still require that your pull request contains unit tests for any new functionality. This way we can ensure that we don&rsquo;t break your code in the future.</p>\n" +
                    "<h3 id=\"style-guide\">Style Guide</h3>\n" +
                    "<p>We use an automatic code formatter called&nbsp;<a href=\"https://prettier.io/\">Prettier</a>. Run&nbsp;<code class=\"gatsby-code-text\">yarn prettier</code>&nbsp;after making any changes to the code.</p>\n" +
                    "<p>Then, our linter will catch most issues that may exist in your code. You can check the status of your code styling by simply running&nbsp;<code class=\"gatsby-code-text\">yarn linc</code>.</p>\n" +
                    "<p>However, there are still some styles that the linter cannot pick up. If you are unsure about something, looking at&nbsp;<a href=\"https://github.com/airbnb/javascript\">Airbnb&rsquo;s Style Guide</a>&nbsp;will guide you in the right direction.</p>\n" +
                    "<h3 id=\"introductory-video\">Introductory Video</h3>\n" +
                    "<p>You may be interested in watching&nbsp;<a href=\"https://www.youtube.com/watch?v=wUpPsEcGsg8\">this short video</a>&nbsp;(26 mins) which gives an introduction on how to contribute to React.</p>\n" +
                    "<h4 id=\"video-highlights\">Video highlights:</h4>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://youtu.be/wUpPsEcGsg8?t=4m12s\">4:12</a>&nbsp;- Building and testing React locally</li>\n" +
                    "<li><a href=\"https://youtu.be/wUpPsEcGsg8?t=6m7s\">6:07</a>&nbsp;- Creating and sending pull requests</li>\n" +
                    "<li><a href=\"https://youtu.be/wUpPsEcGsg8?t=8m25s\">8:25</a>&nbsp;- Organizing code</li>\n" +
                    "<li><a href=\"https://youtu.be/wUpPsEcGsg8?t=14m43s\">14:43</a>&nbsp;- React npm registry</li>\n" +
                    "<li><a href=\"https://youtu.be/wUpPsEcGsg8?t=19m15s\">19:15</a>&nbsp;- Adding new React features</li>\n" +
                    "</ul>\n" +
                    "<p>For a realistic overview of what it&nbsp;<em>feels</em>&nbsp;like to contribute to React for the first time, check out&nbsp;<a href=\"https://www.youtube.com/watch?v=GWCcZ6fnpn4\">this entertaining ReactNYC talk</a>.</p>\n" +
                    "<h3 id=\"request-for-comments-rfc\">Request for Comments (RFC)</h3>\n" +
                    "<p>Many changes, including bug fixes and documentation improvements can be implemented and reviewed via the normal GitHub pull request workflow.</p>\n" +
                    "<p>Some changes though are &ldquo;substantial&rdquo;, and we ask that these be put through a bit of a design process and produce a consensus among the React core team.</p>\n" +
                    "<p>The &ldquo;RFC&rdquo; (request for comments) process is intended to provide a consistent and controlled path for new features to enter the project. You can contribute by visiting the&nbsp;<a href=\"https://github.com/reactjs/rfcs\">rfcs repository</a>.</p>\n" +
                    "<h3 id=\"license\">License</h3>\n" +
                    "<p>By contributing to React, you agree that your contributions will be licensed under its MIT license.</p>");
            sec1React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec1React5);

            Section sec2React5 = new Section();
            sec2React5.setOrdinalNumber(2);
            sec2React5.setDescription("Codebase Overview");
            sec2React5.setContent("endencies\">External Dependencies</h3>\n" +
                    "<p>React has almost no external dependencies. Usually, a&nbsp;<code class=\"gatsby-code-text\">require()</code>&nbsp;points to a file in React&rsquo;s own codebase. However, there are a few relatively rare exceptions.</p>\n" +
                    "<p>The&nbsp;<a href=\"https://github.com/facebook/fbjs\">fbjs repository</a>&nbsp;exists because React shares some small utilities with libraries like&nbsp;<a href=\"https://github.com/facebook/relay\">Relay</a>, and we keep them in sync. We don&rsquo;t depend on equivalent small modules in the Node ecosystem because we want Facebook engineers to be able to make changes to them whenever necessary. None of the utilities inside fbjs are considered to be public API, and they are only intended for use by Facebook projects such as React.</p>\n" +
                    "<h3 id=\"top-level-folders\">Top-Level Folders</h3>\n" +
                    "<p>After cloning the&nbsp;<a href=\"https://github.com/facebook/react\">React repository</a>, you will see a few top-level folders in it:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/facebook/react/tree/master/packages\"><code class=\"gatsby-code-text\">packages</code></a>&nbsp;contains metadata (such as&nbsp;<code class=\"gatsby-code-text\">package.json</code>) and the source code (<code class=\"gatsby-code-text\">src</code>&nbsp;subdirectory) for all packages in the React repository.&nbsp;<strong>If your change is related to the code, the&nbsp;<code class=\"gatsby-code-text\">src</code>&nbsp;subdirectory of each package is where you&rsquo;ll spend most of your time.</strong></li>\n" +
                    "<li><a href=\"https://github.com/facebook/react/tree/master/fixtures\"><code class=\"gatsby-code-text\">fixtures</code></a>&nbsp;contains a few small React test applications for contributors.</li>\n" +
                    "<li><code class=\"gatsby-code-text\">build</code>&nbsp;is the build output of React. It is not in the repository but it will appear in your React clone after you&nbsp;<a href=\"https://reactjs.org/docs/how-to-contribute.html#development-workflow\">build it</a>&nbsp;for the first time.</li>\n" +
                    "</ul>\n" +
                    "<p>The documentation is hosted&nbsp;<a href=\"https://github.com/reactjs/reactjs.org\">in a separate repository from React</a>.</p>\n" +
                    "<p>There are a few other top-level folders but they are mostly used for the tooling and you likely won&rsquo;t ever encounter them when contributing.</p>\n" +
                    "<h3 id=\"colocated-tests\">Colocated Tests</h3>\n" +
                    "<p>We don&rsquo;t have a top-level directory for unit tests. Instead, we put them into a directory called&nbsp;<code class=\"gatsby-code-text\">__tests__</code>&nbsp;relative to the files that they test.</p>\n" +
                    "<p>For example, a test for&nbsp;<a href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/setInnerHTML.js\"><code class=\"gatsby-code-text\">setInnerHTML.js</code></a>&nbsp;is located in&nbsp;<a href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js\"><code class=\"gatsby-code-text\">__tests__/setInnerHTML-test.js</code></a>right next to it.</p>\n" +
                    "<h3 id=\"warnings-and-invariants\">Warnings and Invariants</h3>\n" +
                    "<p>The React codebase uses the&nbsp;<code class=\"gatsby-code-text\">warning</code>&nbsp;module to display warnings:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> warning <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token string\">'Math is not working today.'</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>The warning is shown when the&nbsp;<code class=\"gatsby-code-text\">warning</code>&nbsp;condition is&nbsp;<code class=\"gatsby-code-text\">false</code>.</strong></p>\n" +
                    "<p>One way to think about it is that the condition should reflect the normal situation rather than the exceptional one.</p>\n" +
                    "<p>It is a good idea to avoid spamming the console with duplicate warnings:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> warning <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">var</span> didWarnAboutMath <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>didWarnAboutMath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n" +
                    "    <span class=\"token string\">'Math is not working today.'</span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  didWarnAboutMath <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Warnings are only enabled in development. In production, they are completely stripped out. If you need to forbid some code path from executing, use&nbsp;<code class=\"gatsby-code-text\">invariant</code>&nbsp;module instead:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> invariant <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invariant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token string\">'You shall not pass!'</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>The invariant is thrown when the&nbsp;<code class=\"gatsby-code-text\">invariant</code>&nbsp;condition is&nbsp;<code class=\"gatsby-code-text\">false</code>.</strong></p>\n" +
                    "<p>&ldquo;Invariant&rdquo; is just a way of saying &ldquo;this condition always holds true&rdquo;. You can think about it as making an assertion.</p>\n" +
                    "<p>It is important to keep development and production behavior similar, so&nbsp;<code class=\"gatsby-code-text\">invariant</code>&nbsp;throws both in development and in production. The error messages are automatically replaced with error codes in production to avoid negatively affecting the byte size.</p>\n" +
                    "<h3 id=\"development-and-production\">Development and Production</h3>\n" +
                    "<p>You can use&nbsp;<code class=\"gatsby-code-text\">__DEV__</code>&nbsp;pseudo-global variable in the codebase to guard development-only blocks of code.</p>\n" +
                    "<p>It is inlined during the compile step, and turns into&nbsp;<code class=\"gatsby-code-text\">process.env.NODE_ENV !== 'production'</code>&nbsp;checks in the CommonJS builds.</p>\n" +
                    "<p>For standalone builds, it becomes&nbsp;<code class=\"gatsby-code-text\">true</code>&nbsp;in the unminified build, and gets completely stripped out with the&nbsp;<code class=\"gatsby-code-text\">if</code>&nbsp;blocks it guards in the minified build.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// This code will only run in development.</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"flow\">Flow</h3>\n" +
                    "<p>We recently started introducing&nbsp;<a href=\"https://flow.org/\">Flow</a>&nbsp;checks to the codebase. Files marked with the&nbsp;<code class=\"gatsby-code-text\">@flow</code>annotation in the license header comment are being typechecked.</p>\n" +
                    "<p>We accept pull requests&nbsp;<a href=\"https://github.com/facebook/react/pull/7600/files\">adding Flow annotations to existing code</a>. Flow annotations look like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactRef<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">detachRefs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n" +
                    "  instance<span class=\"token punctuation\">:</span> ReactInstance<span class=\"token punctuation\">,</span>\n" +
                    "  element<span class=\"token punctuation\">:</span> ReactElement <span class=\"token operator\">|</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When possible, new code should use Flow annotations. You can run&nbsp;<code class=\"gatsby-code-text\">yarn flow</code>&nbsp;locally to check your code with Flow.</p>\n" +
                    "<h3 id=\"dynamic-injection\">Dynamic Injection</h3>\n" +
                    "<p>React uses dynamic injection in some modules. While it is always explicit, it is still unfortunate because it hinders understanding of the code. The main reason it exists is because React originally only supported DOM as a target. React Native started as a React fork. We had to add dynamic injection to let React Native override some behaviors.</p>\n" +
                    "<p>You may see modules declaring their dynamic dependencies like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// Dynamically injected</span>\n" +
                    "<span class=\"token keyword\">var</span> textComponentClass <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// Relies on dynamically injected value</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">createInstanceForText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">textComponentClass</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">var</span> ReactHostComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  createInstanceForText<span class=\"token punctuation\">,</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Provides an opportunity for dynamic injection</span>\n" +
                    "  injection<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "    injectTextComponentClass<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>componentClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      textComponentClass <span class=\"token operator\">=</span> componentClass<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ReactHostComponent<span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">injection</code>&nbsp;field is not handled specially in any way. But by convention, it means that this module wants to have some (presumably platform-specific) dependencies injected into it at runtime.</p>\n" +
                    "<p>There are multiple injection points in the codebase. In the future, we intend to get rid of the dynamic injection mechanism and wire up all the pieces statically during the build.</p>\n" +
                    "<h3 id=\"multiple-packages\">Multiple Packages</h3>\n" +
                    "<p>React is a&nbsp;<a href=\"http://danluu.com/monorepo/\">monorepo</a>. Its repository contains multiple separate packages so that their changes can be coordinated together, and issues live in one place.</p>\n" +
                    "<h3 id=\"react-core\">React Core</h3>\n" +
                    "<p>The &ldquo;core&rdquo; of React includes all the&nbsp;<a href=\"https://reactjs.org/docs/top-level-api.html#react\">top-level&nbsp;<code class=\"gatsby-code-text\">React</code>&nbsp;APIs</a>, for example:</p>\n" +
                    "<ul>\n" +
                    "<li><code class=\"gatsby-code-text\">React.createElement()</code></li>\n" +
                    "<li><code class=\"gatsby-code-text\">React.Component</code></li>\n" +
                    "<li><code class=\"gatsby-code-text\">React.Children</code></li>\n" +
                    "</ul>\n" +
                    "<p><strong>React core only includes the APIs necessary to define components.</strong>&nbsp;It does not include the&nbsp;<a href=\"https://reactjs.org/docs/reconciliation.html\">reconciliation</a>&nbsp;algorithm or any platform-specific code. It is used both by React DOM and React Native components.</p>\n" +
                    "<p>The code for React core is located in&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/react\"><code class=\"gatsby-code-text\">packages/react</code></a>&nbsp;in the source tree. It is available on npm as the&nbsp;<a href=\"https://www.npmjs.com/package/react\"><code class=\"gatsby-code-text\">react</code></a>&nbsp;package. The corresponding standalone browser build is called&nbsp;<code class=\"gatsby-code-text\">react.js</code>, and it exports a global called&nbsp;<code class=\"gatsby-code-text\">React</code>.</p>\n" +
                    "<h3 id=\"renderers\">Renderers</h3>\n" +
                    "<p>React was originally created for the DOM but it was later adapted to also support native platforms with&nbsp;<a href=\"http://facebook.github.io/react-native/\">React Native</a>. This introduced the concept of &ldquo;renderers&rdquo; to React internals.</p>\n" +
                    "<p><strong>Renderers manage how a React tree turns into the underlying platform calls.</strong></p>\n" +
                    "<p>Renderers are also located in&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/\"><code class=\"gatsby-code-text\">packages/</code></a>:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/facebook/react/tree/master/packages/react-dom\">React DOM Renderer</a>&nbsp;renders React components to the DOM. It implements&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html\">top-level&nbsp;<code class=\"gatsby-code-text\">ReactDOM</code>&nbsp;APIs</a>&nbsp;and is available as&nbsp;<a href=\"https://www.npmjs.com/package/react-dom\"><code class=\"gatsby-code-text\">react-dom</code></a>&nbsp;npm package. It can also be used as standalone browser bundle called&nbsp;<code class=\"gatsby-code-text\">react-dom.js</code>&nbsp;that exports a&nbsp;<code class=\"gatsby-code-text\">ReactDOM</code>&nbsp;global.</li>\n" +
                    "<li><a href=\"https://github.com/facebook/react/tree/master/packages/react-native-renderer\">React Native Renderer</a>&nbsp;renders React components to native views. It is used internally by React Native.</li>\n" +
                    "<li><a href=\"https://github.com/facebook/react/tree/master/packages/react-test-renderer\">React Test Renderer</a>&nbsp;renders React components to JSON trees. It is used by the&nbsp;<a href=\"https://facebook.github.io/jest/blog/2016/07/27/jest-14.html\">Snapshot Testing</a>&nbsp;feature of&nbsp;<a href=\"https://facebook.github.io/jest\">Jest</a>&nbsp;and is available as&nbsp;<a href=\"https://www.npmjs.com/package/react-test-renderer\">react-test-renderer</a>&nbsp;npm package.</li>\n" +
                    "</ul>\n" +
                    "<p>The only other officially supported renderer is&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/react-art\"><code class=\"gatsby-code-text\">react-art</code></a>. It used to be in a separate&nbsp;<a href=\"https://github.com/reactjs/react-art\">GitHub repository</a>&nbsp;but we moved it into the main source tree for now.</p>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>Technically the&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/react-native-renderer\"><code class=\"gatsby-code-text\">react-native-renderer</code></a>&nbsp;is a very thin layer that teaches React to interact with React Native implementation. The real platform-specific code managing the native views lives in the&nbsp;<a href=\"https://github.com/facebook/react-native\">React Native repository</a>&nbsp;together with its components.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"reconcilers\">Reconcilers</h3>\n" +
                    "<p>Even vastly different renderers like React DOM and React Native need to share a lot of logic. In particular, the&nbsp;<a href=\"https://reactjs.org/docs/reconciliation.html\">reconciliation</a>&nbsp;algorithm should be as similar as possible so that declarative rendering, custom components, state, lifecycle methods, and refs work consistently across platforms.</p>\n" +
                    "<p>To solve this, different renderers share some code between them. We call this part of React a &ldquo;reconciler&rdquo;. When an update such as&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;is scheduled, the reconciler calls&nbsp;<code class=\"gatsby-code-text\">render()</code>on components in the tree and mounts, updates, or unmounts them.</p>\n" +
                    "<p>Reconcilers are not packaged separately because they currently have no public API. Instead, they are exclusively used by renderers such as React DOM and React Native.</p>\n" +
                    "<h3 id=\"stack-reconciler\">Stack Reconciler</h3>\n" +
                    "<p>The &ldquo;stack&rdquo; reconciler is the implementation powering React 15 and earlier. We have since stopped using it, but it is documented in detail in the&nbsp;<a href=\"https://reactjs.org/docs/implementation-notes.html\">next section</a>.</p>\n" +
                    "<h3 id=\"fiber-reconciler\">Fiber Reconciler</h3>\n" +
                    "<p>The &ldquo;fiber&rdquo; reconciler is a new effort aiming to resolve the problems inherent in the stack reconciler and fix a few long-standing issues. It has been the default reconciler since React 16.</p>\n" +
                    "<p>Its main goals are:</p>\n" +
                    "<ul>\n" +
                    "<li>Ability to split interruptible work in chunks.</li>\n" +
                    "<li>Ability to prioritize, rebase and reuse work in progress.</li>\n" +
                    "<li>Ability to yield back and forth between parents and children to support layout in React.</li>\n" +
                    "<li>Ability to return multiple elements from&nbsp;<code class=\"gatsby-code-text\">render()</code>.</li>\n" +
                    "<li>Better support for error boundaries.</li>\n" +
                    "</ul>\n" +
                    "<p>You can read more about it in&nbsp;<a href=\"https://github.com/acdlite/react-fiber-architecture\">React Fiber Architecture</a>. While it has shipped with React 16, the async features are not enabled by default yet.</p>\n" +
                    "<p>Its source code is located in&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\"><code class=\"gatsby-code-text\">packages/react-reconciler</code></a>.</p>\n" +
                    "<h3 id=\"event-system\">Event System</h3>\n" +
                    "<p>React implements a synthetic event system which is agnostic of the renderers and works both with React DOM and React Native. Its source code is located in&nbsp;<a href=\"https://github.com/facebook/react/tree/master/packages/events\"><code class=\"gatsby-code-text\">packages/events</code></a>.</p>\n" +
                    "<p>There is a&nbsp;<a href=\"https://www.youtube.com/watch?v=dRo_egw7tBc\">video with a deep code dive into it</a>&nbsp;(66 mins).</p>\n" +
                    "<h3 id=\"what-next\">&nbsp;</h3>");
            sec2React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec2React5);

            Section sec3React5 = new Section();
            sec3React5.setOrdinalNumber(3);
            sec3React5.setDescription("Implementation Notes");
            sec3React5.setContent("<p>It is very technical and assumes a strong understanding of React public API as well as how it&rsquo;s divided into core, renderers, and the reconciler. If you&rsquo;re not very familiar with the React codebase, read&nbsp;<a href=\"https://reactjs.org/docs/codebase-overview.html\">the codebase overview</a>&nbsp;first.</p>\n" +
                    "<p>It also assumes an understanding of the&nbsp;<a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\">differences between React components, their instances, and elements</a>.</p>\n" +
                    "<p>The stack reconciler was used in React 15 and earlier. It is located at&nbsp;<a href=\"https://github.com/facebook/react/tree/15-stable/src/renderers/shared/stack/reconciler\">src/renderers/shared/stack/reconciler</a>.</p>\n" +
                    "<h3 id=\"video-building-react-from-scratch\">Video: Building React from Scratch</h3>\n" +
                    "<p><a href=\"https://twitter.com/zpao\">Paul O&rsquo;Shannessy</a>&nbsp;gave a talk about&nbsp;<a href=\"https://www.youtube.com/watch?v=_MAD4Oly9yg\">building React from scratch</a>&nbsp;that largely inspired this document.</p>\n" +
                    "<p>Both this document and his talk are simplifications of the real codebase so you might get a better understanding by getting familiar with both of them.</p>\n" +
                    "<h3 id=\"overview\">Overview</h3>\n" +
                    "<p>The reconciler itself doesn&rsquo;t have a public API.&nbsp;<a href=\"https://reactjs.org/docs/codebase-overview.html#stack-renderers\">Renderers</a>&nbsp;like React DOM and React Native use it to efficiently update the user interface according to the React components written by the user.</p>\n" +
                    "<h3 id=\"mounting-as-a-recursive-process\">Mounting as a Recursive Process</h3>\n" +
                    "<p>Let&rsquo;s consider the first time you mount a component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React DOM will pass&nbsp;<code class=\"gatsby-code-text\">&lt;App /&gt;</code>&nbsp;along to the reconciler. Remember that&nbsp;<code class=\"gatsby-code-text\">&lt;App /&gt;</code>&nbsp;is a React element, that is, a description of&nbsp;<em>what</em>&nbsp;to render. You can think about it as a plain object:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token comment\">// { type: App, props: {} }</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The reconciler will check if&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;is a class or a function.</p>\n" +
                    "<p>If&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;is a function, the reconciler will call&nbsp;<code class=\"gatsby-code-text\">App(props)</code>&nbsp;to get the rendered element.</p>\n" +
                    "<p>If&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;is a class, the reconciler will instantiate an&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;with&nbsp;<code class=\"gatsby-code-text\">new App(props)</code>, call the&nbsp;<code class=\"gatsby-code-text\">componentWillMount()</code>&nbsp;lifecycle method, and then will call the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method to get the rendered element.</p>\n" +
                    "<p>Either way, the reconciler will learn the element&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;&ldquo;rendered to&rdquo;.</p>\n" +
                    "<p>This process is recursive.&nbsp;<code class=\"gatsby-code-text\">App</code>&nbsp;may render to a&nbsp;<code class=\"gatsby-code-text\">&lt;Greeting /&gt;</code>,&nbsp;<code class=\"gatsby-code-text\">Greeting</code>&nbsp;may render to a&nbsp;<code class=\"gatsby-code-text\">&lt;Button /&gt;</code>, and so on. The reconciler will &ldquo;drill down&rdquo; through user-defined components recursively as it learns what each component renders to.</p>\n" +
                    "<p>You can imagine this process as a pseudocode:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// React.Component subclasses have this flag</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n" +
                    "    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token comment\">// This function takes a React element (e.g. &lt;App /&gt;)</span>\n" +
                    "<span class=\"token comment\">// and returns a DOM or Native node representing the mounted tree.</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// We will determine the rendered element</span>\n" +
                    "  <span class=\"token comment\">// by either running the type as function</span>\n" +
                    "  <span class=\"token comment\">// or creating an instance and calling render().</span>\n" +
                    "  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Component class</span>\n" +
                    "    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token comment\">// Set the props</span>\n" +
                    "    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token comment\">// Call the lifecycle if necessary</span>\n" +
                    "    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "    <span class=\"token comment\">// Get the rendered element by calling render()</span>\n" +
                    "    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Component function</span>\n" +
                    "    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// This process is recursive because a component may</span>\n" +
                    "  <span class=\"token comment\">// return an element with a type of another component.</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// Note: this implementation is incomplete and recurses infinitely!</span>\n" +
                    "  <span class=\"token comment\">// It only handles elements like &lt;App /&gt; or &lt;Button /&gt;.</span>\n" +
                    "  <span class=\"token comment\">// It doesn't handle elements like &lt;div /&gt; or &lt;p /&gt; yet.</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "rootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>This really&nbsp;<em>is</em>&nbsp;a pseudo-code. It isn&rsquo;t similar to the real implementation. It will also cause a stack overflow because we haven&rsquo;t discussed when to stop the recursion.</p>\n" +
                    "</blockquote>\n" +
                    "<p>Let&rsquo;s recap a few key ideas in the example above:</p>\n" +
                    "<ul>\n" +
                    "<li>React elements are plain objects representing the component type (e.g.&nbsp;<code class=\"gatsby-code-text\">App</code>) and the props.</li>\n" +
                    "<li>User-defined components (e.g.&nbsp;<code class=\"gatsby-code-text\">App</code>) can be classes or functions but they all &ldquo;render to&rdquo; elements.</li>\n" +
                    "<li>&ldquo;Mounting&rdquo; is a recursive process that creates a DOM or Native tree given the top-level React element (e.g.&nbsp;<code class=\"gatsby-code-text\">&lt;App /&gt;</code>).</li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"mounting-host-elements\">Mounting Host Elements</h3>\n" +
                    "<p>This process would be useless if we didn&rsquo;t render something to the screen as a result.</p>\n" +
                    "<p>In addition to user-defined (&ldquo;composite&rdquo;) components, React elements may also represent platform-specific (&ldquo;host&rdquo;) components. For example,&nbsp;<code class=\"gatsby-code-text\">Button</code>&nbsp;might return a&nbsp;<code class=\"gatsby-code-text\">&lt;div /&gt;</code>&nbsp;from its render method.</p>\n" +
                    "<p>If element&rsquo;s&nbsp;<code class=\"gatsby-code-text\">type</code>&nbsp;property is a string, we are dealing with a host element:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token comment\">// { type: 'div', props: {} }</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>There is no user-defined code associated with host elements.</p>\n" +
                    "<p>When the reconciler encounters a host element, it lets the renderer take care of mounting it. For example, React DOM would create a DOM node.</p>\n" +
                    "<p>If the host element has children, the reconciler recursively mounts them following the same algorithm as above. It doesn&rsquo;t matter whether children are host (like&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;</code>), composite (like&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;&lt;Button /&gt;&lt;/div&gt;</code>), or both.</p>\n" +
                    "<p>The DOM nodes produced by the child components will be appended to the parent DOM node, and recursively, the complete DOM structure will be assembled.</p>");
            sec3React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec3React5);

            Section sec4React5 = new Section();
            sec4React5.setOrdinalNumber(4);
            sec4React5.setDescription("Design Principles");
            sec4React5.setContent("<p>The key feature of React is composition of components. Components written by different people should work well together. It is important to us that you can add functionality to a component without causing rippling changes throughout the codebase.</p>\n" +
                    "<p>For example, it should be possible to introduce some local state into a component without changing any of the components using it. Similarly, it should be possible to add some initialization and teardown code to any component when necessary.</p>\n" +
                    "<p>There is nothing &ldquo;bad&rdquo; about using state or lifecycle methods in components. Like any powerful feature, they should be used in moderation, but we have no intention to remove them. On the contrary, we think they are integral parts of what makes React useful. We might enable&nbsp;<a href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">more functional patterns</a>&nbsp;in the future, but both local state and lifecycle methods will be a part of that model.</p>\n" +
                    "<p>Components are often described as &ldquo;just functions&rdquo; but in our view they need to be more than that to be useful. In React, components describe any composable behavior, and this includes rendering, lifecycle, and state. Some external libraries like&nbsp;<a href=\"http://facebook.github.io/relay/\">Relay</a>&nbsp;augment components with other responsibilities such as describing data dependencies. It is possible that those ideas might make it back into React too in some form.</p>\n" +
                    "<h3 id=\"common-abstraction\">Common Abstraction</h3>\n" +
                    "<p>In general we&nbsp;<a href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">resist adding features</a>&nbsp;that can be implemented in userland. We don&rsquo;t want to bloat your apps with useless library code. However, there are exceptions to this.</p>\n" +
                    "<p>For example, if React didn&rsquo;t provide support for local state or lifecycle methods, people would create custom abstractions for them. When there are multiple abstractions competing, React can&rsquo;t enforce or take advantage of the properties of either of them. It has to work with the lowest common denominator.</p>\n" +
                    "<p>This is why sometimes we add features to React itself. If we notice that many components implement a certain feature in incompatible or inefficient ways, we might prefer to bake it into React. We don&rsquo;t do it lightly. When we do it, it&rsquo;s because we are confident that raising the abstraction level benefits the whole ecosystem. State, lifecycle methods, cross-browser event normalization are good examples of this.</p>\n" +
                    "<p>We always discuss such improvement proposals with the community. You can find some of those discussions by the&nbsp;<a href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22Type:+Big+Picture%22\">&ldquo;big picture&rdquo;</a>&nbsp;label on the React issue tracker.</p>\n" +
                    "<h3 id=\"escape-hatches\">Escape Hatches</h3>\n" +
                    "<p>React is pragmatic. It is driven by the needs of the products written at Facebook. While it is influenced by some paradigms that are not yet fully mainstream such as functional programming, staying accessible to a wide range of developers with different skills and experience levels is an explicit goal of the project.</p>\n" +
                    "<p>If we want to deprecate a pattern that we don&rsquo;t like, it is our responsibility to consider all existing use cases for it and&nbsp;<a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">educate the community about the alternatives</a>&nbsp;before we deprecate it. If some pattern that is useful for building apps is hard to express in a declarative way, we will&nbsp;<a href=\"https://reactjs.org/docs/more-about-refs.html\">provide an imperative API</a>&nbsp;for it. If we can&rsquo;t figure out a perfect API for something that we found necessary in many apps, we will&nbsp;<a href=\"https://reactjs.org/docs/legacy-context.html\">provide a temporary subpar working API</a>&nbsp;as long as it is possible to get rid of it later and it leaves the door open for future improvements.</p>\n" +
                    "<h3 id=\"stability\">Stability</h3>\n" +
                    "<p>We value API stability. At Facebook, we have more than 50 thousand components using React. Many other companies, including&nbsp;<a href=\"https://twitter.com/\">Twitter</a>&nbsp;and&nbsp;<a href=\"https://www.airbnb.com/\">Airbnb</a>, are also heavy users of React. This is why we are usually reluctant to change public APIs or behavior.</p>\n" +
                    "<p>However we think stability in the sense of &ldquo;nothing changes&rdquo; is overrated. It quickly turns into stagnation. Instead, we prefer the stability in the sense of &ldquo;It is heavily used in production, and when something changes, there is a clear (and preferably automated) migration path.&rdquo;</p>\n" +
                    "<p>When we deprecate a pattern, we study its internal usage at Facebook and add deprecation warnings. They let us assess the impact of the change. Sometimes we back out if we see that it is too early, and we need to think more strategically about getting the codebases to the point where they are ready for this change.</p>\n" +
                    "<p>If we are confident that the change is not too disruptive and the migration strategy is viable for all use cases, we release the deprecation warning to the open source community. We are closely in touch with many users of React outside of Facebook, and we monitor popular open source projects and guide them in fixing those deprecations.</p>\n" +
                    "<p>Given the sheer size of the Facebook React codebase, successful internal migration is often a good indicator that other companies won&rsquo;t have problems either. Nevertheless sometimes people point out additional use cases we haven&rsquo;t thought of, and we add escape hatches for them or rethink our approach.</p>\n" +
                    "<p>We don&rsquo;t deprecate anything without a good reason. We recognize that sometimes deprecations warnings cause frustration but we add them because deprecations clean up the road for the improvements and new features that we and many people in the community consider valuable.</p>\n" +
                    "<p>For example, we added a&nbsp;<a href=\"https://reactjs.org/warnings/unknown-prop.html\">warning about unknown DOM props</a>&nbsp;in React 15.2.0. Many projects were affected by this. However fixing this warning is important so that we can introduce the support for&nbsp;<a href=\"https://github.com/facebook/react/issues/140\">custom attributes</a>&nbsp;to React. There is a reason like this behind every deprecation that we add.</p>\n" +
                    "<p>When we add a deprecation warning, we keep it for the rest of the current major version, and&nbsp;<a href=\"https://reactjs.org/blog/2016/02/19/new-versioning-scheme.html\">change the behavior in the next major version</a>. If there is a lot of repetitive manual work involved, we release a&nbsp;<a href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemod</a>&nbsp;script that automates most of the change. Codemods enable us to move forward without stagnation in a massive codebase, and we encourage you to use them as well.</p>\n" +
                    "<p>You can find the codemods that we released in the&nbsp;<a href=\"https://github.com/reactjs/react-codemod\">react-codemod</a>&nbsp;repository.</p>");
            sec4React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec4React5);

            Section sec5React5 = new Section();
            sec5React5.setOrdinalNumber(5);
            sec5React5.setDescription("AJAX and APIs");
            sec5React5.setContent("<h3 id=\"how-can-i-make-an-ajax-call\">How can I make an AJAX call?</h3>\n" +
                    "<p>You can use any AJAX library you like with React. Some popular ones are&nbsp;<a href=\"https://github.com/axios/axios\">Axios</a>,&nbsp;<a href=\"https://api.jquery.com/jQuery.ajax/\">jQuery AJAX</a>, and the browser built-in&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">window.fetch</a>.</p>\n" +
                    "<h3 id=\"where-in-the-component-lifecycle-should-i-make-an-ajax-call\">Where in the component lifecycle should I make an AJAX call?</h3>\n" +
                    "<p>You should populate data with AJAX calls in the&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#mounting\"><code class=\"gatsby-code-text\">componentDidMount</code></a>&nbsp;lifecycle method. This is so you can use&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;to update your component when the data is retrieved.</p>\n" +
                    "<h3 id=\"example-using-ajax-results-to-set-local-state\">Example: Using AJAX results to set local state</h3>\n" +
                    "<p>The component below demonstrates how to make an AJAX call in&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;to populate local component state.</p>\n" +
                    "<p>The example API returns a JSON object like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">{\n" +
                    "  \"items\": [\n" +
                    "    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n" +
                    "    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n" +
                    "  ] \n" +
                    "}</code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n" +
                    "      isLoaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n" +
                    "      items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n" +
                    "      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n" +
                    "      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "            isLoaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n" +
                    "            items<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>items\n" +
                    "          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "        <span class=\"token comment\">// Note: it's important to handle errors here</span>\n" +
                    "        <span class=\"token comment\">// instead of a catch() block so that we don't swallow</span>\n" +
                    "        <span class=\"token comment\">// exceptions from actual bugs in components.</span>\n" +
                    "        <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "            isLoaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n" +
                    "            error\n" +
                    "          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "        <span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token punctuation\">)</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> isLoaded<span class=\"token punctuation\">,</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "              <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>");
            sec5React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec5React5);

            Section sec6React5 = new Section();
            sec6React5.setOrdinalNumber(6);
            sec6React5.setDescription("Babel, JSX, and Build Steps");
            sec6React5.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h3 id=\"do-i-need-to-use-jsx-with-react\">Do I need to use JSX with React?</h3>\n" +
                    "<p>No! Check out&nbsp;<a href=\"https://reactjs.org/docs/react-without-jsx.html\">&ldquo;React Without JSX&rdquo;</a>&nbsp;to learn more.</p>\n" +
                    "<h3 id=\"do-i-need-to-use-es6--with-react\">Do I need to use ES6 (+) with React?</h3>\n" +
                    "<p>No! Check out&nbsp;<a href=\"https://reactjs.org/docs/react-without-es6.html\">&ldquo;React Without ES6&rdquo;</a>&nbsp;to learn more.</p>\n" +
                    "<h3 id=\"how-can-i-write-comments-in-jsx\">How can I write comments in JSX?</h3>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Comment goes here */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n" +
                    "  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!\n" +
                    "</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">{</span><span class=\"token comment\">/* It also works \n" +
                    "  for multi-line comments. */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n" +
                    "  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">! \n" +
                    "</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "</div>");
            sec6React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec6React5);

            Section sec7React5 = new Section();
            sec7React5.setOrdinalNumber(7);
            sec7React5.setDescription("Passing Functions to Components");
            sec7React5.setContent("<h3 id=\"how-do-i-pass-an-event-handler-like-onclick-to-a-component\">How do I pass an event handler (like onClick) to a component?</h3>\n" +
                    "<p>Pass event handlers and other functions as props to child components:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).</p>\n" +
                    "<h3 id=\"how-do-i-bind-a-function-to-a-component-instance\">How do I bind a function to a component instance?</h3>\n" +
                    "<p>There are several ways to make sure functions have access to component attributes like&nbsp;<code class=\"gatsby-code-text\">this.props</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">this.state</code>, depending on which syntax and build steps you are using.</p>\n" +
                    "<h4 id=\"bind-in-constructor-es2015\">Bind in Constructor (ES2015)</h4>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"class-properties-stage-3-proposal\">Class Properties (Stage 3 Proposal)</h4>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Note: this syntax is experimental and not standardized yet.</span>\n" +
                    "  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"bind-in-render\">Bind in Render</h4>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>Using&nbsp;<code class=\"gatsby-code-text\">Function.prototype.bind</code>&nbsp;in render creates a new function each time the component renders, which may have performance implications (see below).</p>\n" +
                    "</blockquote>\n" +
                    "<h4 id=\"arrow-function-in-render\">Arrow Function in Render</h4>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>Using an arrow function in render creates a new function each time the component renders, which may have performance implications (see below).</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"is-it-ok-to-use-arrow-functions-in-render-methods\">Is it OK to use arrow functions in render methods?</h3>\n" +
                    "<p>Generally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.</p>\n" +
                    "<p>If you do have performance issues, by all means, optimize!</p>\n" +
                    "<h3 id=\"why-is-binding-necessary-at-all\">Why is binding necessary at all?</h3>\n" +
                    "<p>In JavaScript, these two code snippets are&nbsp;<strong>not</strong>&nbsp;equivalent:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Binding methods helps ensure that the second snippet works the same way as the first one.</p>\n" +
                    "<p>With React, typically you only need to bind the methods you&nbsp;<em>pass</em>&nbsp;to other components. For example,&nbsp;<code class=\"gatsby-code-text\">&lt;button onClick={this.handleClick}&gt;</code>&nbsp;passes&nbsp;<code class=\"gatsby-code-text\">this.handleClick</code>&nbsp;so you want to bind it. However, it is unnecessary to bind the&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method or the lifecycle methods: we don&rsquo;t pass them to other components.</p>\n" +
                    "<p><a href=\"http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">This post by Yehuda Katz</a>&nbsp;explains what binding is, and how functions work in JavaScript, in detail.</p>\n" +
                    "<h3 id=\"why-is-my-function-being-called-every-time-the-component-renders\">Why is my function being called every time the component renders?</h3>\n" +
                    "<p>Make sure you aren&rsquo;t&nbsp;<em>calling the function</em>&nbsp;when you pass it to the component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Wrong: handleClick is called instead of passed as a reference!</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Instead,&nbsp;<em>pass the function itself</em>&nbsp;(without parens):</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Correct: handleClick is passed as a reference!</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"how-do-i-pass-a-parameter-to-an-event-handler-or-callback\">How do I pass a parameter to an event handler or callback?</h3>\n" +
                    "<p>You can use an arrow function to wrap around an event handler and pass parameters:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This is equivalent to calling&nbsp;<code class=\"gatsby-code-text\">.bind</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"example-passing-params-using-arrow-functions\">Example: Passing params using arrow functions</h4>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// ASCII character code</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      justClicked<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n" +
                    "      letters<span class=\"token punctuation\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> justClicked<span class=\"token punctuation\">:</span> letter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>letter <span class=\"token operator\">=&gt;</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "              <span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"example-passing-params-using-data-attributes\">Example: Passing params using data-attributes</h4>\n" +
                    "<p>Alternately, you can use DOM APIs to store data needed for event handlers. Consider this approach if you need to optimize a large number of elements or have a render tree that relies on React.PureComponent equality checks.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// ASCII character code</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      justClicked<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n" +
                    "      letters<span class=\"token punctuation\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      justClicked<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>letter\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>letter <span class=\"token operator\">=&gt;</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data-letter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "              <span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>");
            sec7React5.setLesson(reactJsLesson5);
            reactJsLesson5.getSections().add(sec7React5);

            Section sec1React6 = new Section();
            sec1React6.setOrdinalNumber(1);
            sec1React6.setDescription("Component State");
            sec1React6.setContent("<h3 id=\"what-does-setstate-do\">What does&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;do?</h3>\n" +
                    "<p><code class=\"gatsby-code-text\">setState()</code>&nbsp;schedules an update to a component&rsquo;s&nbsp;<code class=\"gatsby-code-text\">state</code>&nbsp;object. When state changes, the component responds by re-rendering.</p>\n" +
                    "<h3 id=\"what-is-the-difference-between-state-and-props\">What is the difference between&nbsp;<code class=\"gatsby-code-text\">state</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">props</code>?</h3>\n" +
                    "<p><a href=\"https://reactjs.org/docs/components-and-props.html\"><code class=\"gatsby-code-text\">props</code></a>&nbsp;(short for &ldquo;properties&rdquo;) and&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html\"><code class=\"gatsby-code-text\">state</code></a>&nbsp;are both plain JavaScript objects. While both hold information that influences the output of render, they are different in one important way:&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;get passed&nbsp;<em>to</em>&nbsp;the component (similar to function parameters) whereas&nbsp;<code class=\"gatsby-code-text\">state</code>&nbsp;is managed&nbsp;<em>within</em>&nbsp;the component (similar to variables declared within a function).</p>\n" +
                    "<p>Here are some good resources for further reading on when to use&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;vs&nbsp;<code class=\"gatsby-code-text\">state</code>:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\">Props vs State</a></li>\n" +
                    "<li><a href=\"http://lucybain.com/blog/2016/react-state-vs-pros/\">ReactJS: Props vs. State</a></li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"why-is-setstate-giving-me-the-wrong-value\">Why is&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;giving me the wrong value?</h3>\n" +
                    "<p>In React, both&nbsp;<code class=\"gatsby-code-text\">this.props</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;represent the&nbsp;<em>rendered</em>&nbsp;values, i.e. what&rsquo;s currently on the screen.</p>\n" +
                    "<p>Calls to&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;are asynchronous - don&rsquo;t rely on&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;to reflect the new value immediately after calling&nbsp;<code class=\"gatsby-code-text\">setState</code>. Pass an updater function instead of an object if you need to compute values based on the current state (see below for details).</p>\n" +
                    "<p>Example of code that will&nbsp;<em>not</em>&nbsp;behave as expected:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Note: this will *not* work as intended.</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token comment\">// When React re-renders the component, `this.state.count` will be 1, but you expected 3.</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// This is because `incrementCount()` function above reads from `this.state.count`,</span>\n" +
                    "  <span class=\"token comment\">// but React doesn't update `this.state.count` until the component is re-rendered.</span>\n" +
                    "  <span class=\"token comment\">// So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// The fix is described below!</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>See below for how to fix this problem.</p>\n" +
                    "<h3 id=\"how-do-i-update-state-with-values-that-depend-on-the-current-state\">How do I update state with values that depend on the current state?</h3>\n" +
                    "<p>Pass a function instead of an object to&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;to ensure the call always uses the most updated version of state (see below).</p>\n" +
                    "<h3 id=\"what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\">What is the difference between passing an object or a function in&nbsp;<code class=\"gatsby-code-text\">setState</code>?</h3>\n" +
                    "<p>Passing an update function allows you to access the current state value inside the updater. Since&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Important: read `state` instead of `this.state` when updating.</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// If you read `this.state.count` now, it would still be 0.</span>\n" +
                    "  <span class=\"token comment\">// But when React re-renders the component, it will be 3.</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://reactjs.org/docs/react-component.html#setstate\">Learn more about setState</a></p>\n" +
                    "<h3 id=\"when-is-setstate-asynchronous\">When is&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;asynchronous?</h3>\n" +
                    "<p>Currently,&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;is asynchronous inside event handlers.</p>\n" +
                    "<p>This ensures, for example, that if both&nbsp;<code class=\"gatsby-code-text\">Parent</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">Child</code>&nbsp;call&nbsp;<code class=\"gatsby-code-text\">setState</code>&nbsp;during a click event,&nbsp;<code class=\"gatsby-code-text\">Child</code>&nbsp;isn&rsquo;t re-rendered twice. Instead, React &ldquo;flushes&rdquo; the state updates at the end of the browser event. This results in significant performance improvements in larger apps.</p>\n" +
                    "<p>This is an implementation detail so avoid relying on it directly. In the future versions, React will batch updates by default in more cases.</p>\n" +
                    "<h3 id=\"why-doesnt-react-update-thisstate-synchronously\">Why doesn&rsquo;t React update&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;synchronously?</h3>\n" +
                    "<p>As explained in the previous section, React intentionally &ldquo;waits&rdquo; until all components call&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;in their event handlers before starting to re-render. This boosts performance by avoiding unnecessary re-renders.</p>\n" +
                    "<p>However, you might still be wondering why React doesn&rsquo;t just update&nbsp;<code class=\"gatsby-code-text\">this.state</code>immediately without re-rendering.</p>\n" +
                    "<p>There are two main reasons:</p>\n" +
                    "<ul>\n" +
                    "<li>This would break the consistency between&nbsp;<code class=\"gatsby-code-text\">props</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">state</code>, causing issues that are very hard to debug.</li>\n" +
                    "<li>This would make some of the new features we&rsquo;re working on impossible to implement.</li>\n" +
                    "</ul>\n" +
                    "<p>This&nbsp;<a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">GitHub comment</a>&nbsp;dives deep into the specific examples.</p>\n" +
                    "<h3 id=\"should-i-use-a-state-management-library-like-redux-or-mobx\">Should I use a state management library like Redux or MobX?</h3>\n" +
                    "<p><a href=\"https://redux.js.org/faq/general#when-should-i-use-redux\">Maybe.</a></p>\n" +
                    "<p>It&rsquo;s a good idea to get to know React first, before adding in additional libraries. You can build quite complex applications using only React.</p>");
            sec1React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec1React6);

            Section sec2React6 = new Section();
            sec2React6.setOrdinalNumber(2);
            sec2React6.setDescription("Styling and CSS");
            sec2React6.setContent("<h3 id=\"how-do-i-add-css-classes-to-components\">How do I add CSS classes to components?</h3>\n" +
                    "<p>Pass a string as the&nbsp;<code class=\"gatsby-code-text\">className</code>&nbsp;prop:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>menu navigation-menu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>It is common for CSS classes to depend on the component props or state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'menu'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    className <span class=\"token operator\">+=</span> <span class=\"token string\">' menu-active'</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Tip</p>\n" +
                    "<p>If you often find yourself writing code like this,&nbsp;<a href=\"https://www.npmjs.com/package/classnames#usage-with-reactjs\">classnames</a>&nbsp;package can simplify it.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"can-i-use-inline-styles\">Can I use inline styles?</h3>\n" +
                    "<p>Yes, see the docs on styling&nbsp;<a href=\"https://reactjs.org/docs/dom-elements.html#style\">here</a>.</p>\n" +
                    "<h3 id=\"are-inline-styles-bad\">Are inline styles bad?</h3>\n" +
                    "<p>CSS classes are generally better for performance than inline styles.</p>\n" +
                    "<h3 id=\"what-is-css-in-js\">What is CSS-in-JS?</h3>\n" +
                    "<p>&ldquo;CSS-in-JS&rdquo; refers to a pattern where CSS is composed using JavaScript instead of defined in external files. Read a comparison of CSS-in-JS libraries&nbsp;<a href=\"https://github.com/MicheleBertoli/css-in-js\">here</a>.</p>\n" +
                    "<p><em>Note that this functionality is not a part of React, but provided by third-party libraries.</em>&nbsp;React does not have an opinion about how styles are defined; if in doubt, a good starting point is to define your styles in a separate&nbsp;<code class=\"gatsby-code-text\">*.css</code>&nbsp;file as usual and refer to them using&nbsp;<a href=\"https://reactjs.org/docs/dom-elements.html#classname\"><code class=\"gatsby-code-text\">className</code></a>.</p>\n" +
                    "<h3 id=\"can-i-do-animations-in-react\">Can I do animations in React?</h3>\n" +
                    "<p>React can be used to power animations. See&nbsp;<a href=\"https://reactcommunity.org/react-transition-group/\">React Transition Group</a>&nbsp;and&nbsp;<a href=\"https://github.com/chenglou/react-motion\">React Motion</a>, for example.</p>");
            sec2React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec2React6);

            Section sec3React6 = new Section();
            sec3React6.setOrdinalNumber(3);
            sec3React6.setDescription("File Structure");
            sec3React6.setContent("<p>React doesn&rsquo;t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.</p>\n" +
                    "<h4 id=\"grouping-by-features-or-routes\">Grouping by features or routes</h4>\n" +
                    "<p>One common way to structure projects is locate CSS, JS, and tests together inside folders grouped by feature or route.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">common/\n" +
                    "  Avatar.js\n" +
                    "  Avatar.css\n" +
                    "  APIUtils.js\n" +
                    "  APIUtils.test.js\n" +
                    "feed/\n" +
                    "  index.js\n" +
                    "  Feed.js\n" +
                    "  Feed.css\n" +
                    "  FeedStory.js\n" +
                    "  FeedStory.test.js\n" +
                    "  FeedAPI.js\n" +
                    "profile/\n" +
                    "  index.js\n" +
                    "  Profile.js\n" +
                    "  ProfileHeader.js\n" +
                    "  ProfileHeader.css\n" +
                    "  ProfileAPI.js</code></pre>\n" +
                    "</div>\n" +
                    "<p>The definition of a &ldquo;feature&rdquo; is not universal, and it is up to you to choose the granularity. If you can&rsquo;t come up with a list of top-level folders, you can ask the users of your product what major parts it consists of, and use their mental model as a blueprint.</p>\n" +
                    "<h4 id=\"grouping-by-file-type\">Grouping by file type</h4>\n" +
                    "<p>Another popular way to structure projects is to group similar files together, for example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">api/\n" +
                    "  APIUtils.js\n" +
                    "  APIUtils.test.js\n" +
                    "  ProfileAPI.js\n" +
                    "  UserAPI.js\n" +
                    "components/\n" +
                    "  Avatar.js\n" +
                    "  Avatar.css\n" +
                    "  Feed.js\n" +
                    "  Feed.css\n" +
                    "  FeedStory.js\n" +
                    "  FeedStory.test.js\n" +
                    "  Profile.js\n" +
                    "  ProfileHeader.js\n" +
                    "  ProfileHeader.css</code></pre>\n" +
                    "</div>\n" +
                    "<p>Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example,&nbsp;<a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a>&nbsp;is a design methodology built on this principle. Remember that it&rsquo;s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.</p>\n" +
                    "<h4 id=\"avoid-too-much-nesting\">Avoid too much nesting</h4>\n" +
                    "<p>There are many pain points associated with deep directory nesting in JavaScript projects. It becomes harder to write relative imports between them, or to update those imports when the files are moved. Unless you have a very compelling reason to use a deep folder structure, consider limiting yourself to a maximum of three or four nested folders within a single project. Of course, this is only a recommendation, and it may not be relevant to your project.</p>\n" +
                    "<h4 id=\"dont-overthink-it\">Don&rsquo;t overthink it</h4>\n" +
                    "<p>If you&rsquo;re just starting a project,&nbsp;<a href=\"https://en.wikipedia.org/wiki/Analysis_paralysis\">don&rsquo;t spend more than five minutes</a>&nbsp;on choosing a file structure. Pick any of the above approaches (or come up with your own) and start writing code! You&rsquo;ll likely want to rethink it anyway after you&rsquo;ve written some real code.</p>\n" +
                    "<p>If you feel completely stuck, start by keeping all files in a single folder. Eventually it will grow large enough that you will want to separate some files from the rest. By that time you&rsquo;ll have enough knowledge to tell which files you edit together most often. In general, it is a good idea to keep files that often change together close to each other. This principle is called &ldquo;colocation&rdquo;.</p>\n" +
                    "<p>As projects grow larger, they often use a mix of both of the above approaches in practice. So choosing the &ldquo;right&rdquo; one in the beginning isn&rsquo;t very important.</p>");
            sec3React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec3React6);

            Section sec4React6 = new Section();
            sec4React6.setOrdinalNumber(4);
            sec4React6.setDescription("Virtual DOM and Internals");
            sec4React6.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<h3 id=\"what-is-the-virtual-dom\">What is the Virtual DOM?</h3>\n" +
                    "<p>The virtual DOM (VDOM) is a programming concept where an ideal, or &ldquo;virtual&rdquo;, representation of a UI is kept in memory and synced with the &ldquo;real&rdquo; DOM by a library such as ReactDOM. This process is called&nbsp;<a href=\"https://reactjs.org/docs/reconciliation.html\">reconciliation</a>.</p>\n" +
                    "<p>This approach enables the declarative API of React: You tell React what state you want the UI to be in, and it makes sure the DOM matches that state. This abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.</p>\n" +
                    "<p>Since &ldquo;virtual DOM&rdquo; is more of a pattern than a specific technology, people sometimes say it to mean different things. In React world, the term &ldquo;virtual DOM&rdquo; is usually associated with&nbsp;<a href=\"https://reactjs.org/docs/rendering-elements.html\">React elements</a>&nbsp;since they are the objects representing the user interface. React, however, also uses internal objects called &ldquo;fibers&rdquo; to hold additional information about the component tree. They may also be considered a part of &ldquo;virtual DOM&rdquo; implementation in React.</p>\n" +
                    "<h3 id=\"is-the-shadow-dom-the-same-as-the-virtual-dom\">Is the Shadow DOM the same as the Virtual DOM?</h3>\n" +
                    "<p>No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.</p>\n" +
                    "<h3 id=\"what-is-react-fiber\">What is &ldquo;React Fiber&rdquo;?</h3>\n" +
                    "<p>Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering of the virtual DOM.&nbsp;<a href=\"https://github.com/acdlite/react-fiber-architecture\">Read more</a>.</p>\n" +
                    "</div>");
            sec4React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec4React6);

            Section sec5React6 = new Section();
            sec5React6.setOrdinalNumber(5);
            sec5React6.setDescription("Forms");
            sec5React6.setContent("<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    Name:\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it&rsquo;s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called &ldquo;controlled components&rdquo;.</p>\n" +
                    "<h2 id=\"controlled-components\">Controlled Components</h2>\n" +
                    "<p>In HTML, form elements such as&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>,&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>, and&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#setstate\"><code class=\"gatsby-code-text\">setState()</code></a>.</p>\n" +
                    "<p>We can combine the two by making the React state be the &ldquo;single source of truth&rdquo;. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a &ldquo;controlled component&rdquo;.</p>\n" +
                    "<p>For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A name was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Name:</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/VmmPgp?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Since the&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute is set on our form element, the displayed value will always be&nbsp;<code class=\"gatsby-code-text\">this.state.value</code>, making the React state the source of truth. Since&nbsp;<code class=\"gatsby-code-text\">handleChange</code>&nbsp;runs on every keystroke to update the React state, the displayed value will update as the user types.</p>\n" +
                    "<p>With a controlled component, every state mutation will have an associated handler function. This makes it straightforward to modify or validate user input. For example, if we wanted to enforce that names are written with all uppercase letters, we could write&nbsp;<code class=\"gatsby-code-text\">handleChange</code>&nbsp;as:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"the-textarea-tag\">The textarea Tag</h2>\n" +
                    "<p>In HTML, a&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>&nbsp;element defines its text by its children:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  Hello there, this is some text in a text area\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In React, a&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>&nbsp;uses a&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute instead. This way, a form using a&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>can be written very similarly to a form that uses a single-line input:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EssayForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Please write an essay about your favorite DOM element.'</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An essay was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Essay:</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Notice that&nbsp;<code class=\"gatsby-code-text\">this.state.value</code>&nbsp;is initialized in the constructor, so that the text area starts off with some text in it.</p>\n" +
                    "<h2 id=\"the-select-tag\">The select Tag</h2>\n" +
                    "<p>In HTML,&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;creates a drop-down list. For example, this HTML creates a drop-down list of flavors:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>grapefruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Grapefruit<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lime<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">selected</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>coconut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Coconut<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Mango<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that the Coconut option is initially selected, because of the&nbsp;<code class=\"gatsby-code-text\">selected</code>&nbsp;attribute. React, instead of using this&nbsp;<code class=\"gatsby-code-text\">selected</code>&nbsp;attribute, uses a&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute on the root&nbsp;<code class=\"gatsby-code-text\">select</code>&nbsp;tag. This is more convenient in a controlled component because you only need to update it in one place. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token string\">'coconut'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your favorite flavor is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Pick your favorite flavor:</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>grapefruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Grapefruit</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Lime</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>coconut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Coconut</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "            <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Mango</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/JbbEzX?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Overall, this makes it so that&nbsp;<code class=\"gatsby-code-text\">&lt;input type=\"text\"&gt;</code>,&nbsp;<code class=\"gatsby-code-text\">&lt;textarea&gt;</code>, and&nbsp;<code class=\"gatsby-code-text\">&lt;select&gt;</code>&nbsp;all work very similarly - they all accept a&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute that you can use to implement a controlled component.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>You can pass an array into the&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;attribute, allowing you to select multiple options in a&nbsp;<code class=\"gatsby-code-text\">select</code>&nbsp;tag:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select <span class=\"token attr-name\">multiple</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"the-file-input-tag\">The file input Tag</h2>\n" +
                    "<p>In HTML, an&nbsp;<code class=\"gatsby-code-text\">&lt;input type=\"file\"&gt;</code>&nbsp;lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\">File API</a>.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"html\">\n" +
                    "<pre class=\"gatsby-code-html\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Because its value is read-only, it is an&nbsp;<strong>uncontrolled</strong>&nbsp;component in React. It is discussed together with other uncontrolled components&nbsp;<a href=\"https://reactjs.org/docs/uncontrolled-components.html#the-file-input-tag\">later in the documentation</a>.</p>\n" +
                    "<h2 id=\"handling-multiple-inputs\">Handling Multiple Inputs</h2>\n" +
                    "<p>When you need to handle multiple controlled&nbsp;<code class=\"gatsby-code-text\">input</code>&nbsp;elements, you can add a&nbsp;<code class=\"gatsby-code-text\">name</code>&nbsp;attribute to each element and let the handler function choose what to do based on the value of&nbsp;<code class=\"gatsby-code-text\">event.target.name</code>.</p>\n" +
                    "<p>For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Reservation</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "      isGoing<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n" +
                    "      numberOfGuests<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'checkbox'</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>checked <span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> value\n" +
                    "</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Is going:</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>isGoing<span class=\"token punctuation\">\"</span></span>\n" +
                    "</span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span>\n" +
                    "            <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isGoing<span class=\"token punctuation\">}</span></span>\n" +
                    "            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token plain-text\">          Number of guests:</span>\n" +
                    "          <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>numberOfGuests<span class=\"token punctuation\">\"</span></span>\n" +
                    "</span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span>\n" +
                    "            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>numberOfGuests<span class=\"token punctuation\">}</span></span>\n" +
                    "            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/wgedvV?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Note how we used the ES6&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\">computed property name</a>&nbsp;syntax to update the state key corresponding to the given input name:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> value\n" +
                    "</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>It is equivalent to this ES5 code:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> partialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">partialState<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Also, since&nbsp;<code class=\"gatsby-code-text\">setState()</code>&nbsp;automatically&nbsp;<a href=\"https://reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged\">merges a partial state into the current state</a>, we only needed to call it with the changed parts.</p>\n" +
                    "<h2 id=\"controlled-input-null-value\">Controlled Input Null Value</h2>\n" +
                    "<p>Specifying the value prop on a&nbsp;<a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controlled component</a>&nbsp;prevents the user from changing the input unless you desire so. If you&rsquo;ve specified a&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;but the input is still editable, you may have accidentally set&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">undefined</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">null</code>.</p>\n" +
                    "<p>The following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hi<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"alternatives-to-controlled-components\">Alternatives to Controlled Components</h2>\n" +
                    "<p>It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out&nbsp;<a href=\"https://reactjs.org/docs/uncontrolled-components.html\">uncontrolled components</a>, an alternative technique for implementing input forms.</p>\n" +
                    "<h2 id=\"fully-fledged-solutions\">Fully-Fledged Solutions</h2>\n" +
                    "<p>If you&rsquo;re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission,&nbsp;<a href=\"https://jaredpalmer.com/formik\">Formik</a>&nbsp;is one of the popular choices. However, it is built on the same principles of controlled components and managing state &mdash; so don&rsquo;t neglect to learn them.</p>");
            sec5React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec5React6);

            Section sec6React6 = new Section();
            sec6React6.setOrdinalNumber(6);
            sec6React6.setDescription("Lifting State Up");
            sec6React6.setContent("<p>In this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.</p>\n" +
                    "<p>We will start with a component called&nbsp;<code class=\"gatsby-code-text\">BoilingVerdict</code>. It accepts the&nbsp;<code class=\"gatsby-code-text\">celsius</code>&nbsp;temperature as a prop, and prints whether it is enough to boil the water:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">BoilingVerdict</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>celsius <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The water would boil.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The water would not boil.</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Next, we will create a component called&nbsp;<code class=\"gatsby-code-text\">Calculator</code>. It renders an&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>&nbsp;that lets you enter the temperature, and keeps its value in&nbsp;<code class=\"gatsby-code-text\">this.state.temperature</code>.</p>\n" +
                    "<p>Additionally, it renders the&nbsp;<code class=\"gatsby-code-text\">BoilingVerdict</code>&nbsp;for the current input value.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in Celsius:</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "</span>          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n" +
                    "          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BoilingVerdict\n" +
                    "</span>          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<h2 id=\"adding-a-second-input\">Adding a Second Input</h2>\n" +
                    "<p>Our new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.</p>\n" +
                    "<p>We can start by extracting a&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;component from&nbsp;<code class=\"gatsby-code-text\">Calculator</code>. We will add a new&nbsp;<code class=\"gatsby-code-text\">scale</code>&nbsp;prop to it that can either be&nbsp;<code class=\"gatsby-code-text\">\"c\"</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">\"f\"</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> scaleNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  c<span class=\"token punctuation\">:</span> <span class=\"token string\">'Celsius'</span><span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  f<span class=\"token punctuation\">:</span> <span class=\"token string\">'Fahrenheit'</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n" +
                    "               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We can now change the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;to render two separate temperature inputs:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TemperatureInput <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TemperatureInput <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>We have two inputs now, but when you enter the temperature in one of them, the other doesn&rsquo;t update. This contradicts our requirement: we want to keep them in sync.</p>\n" +
                    "<p>We also can&rsquo;t display the&nbsp;<code class=\"gatsby-code-text\">BoilingVerdict</code>&nbsp;from&nbsp;<code class=\"gatsby-code-text\">Calculator</code>. The&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;doesn&rsquo;t know the current temperature because it is hidden inside the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>.</p>\n" +
                    "<h2 id=\"writing-conversion-functions\">Writing Conversion Functions</h2>\n" +
                    "<p>First, we will write two functions to convert from Celsius to Fahrenheit and back:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCelsius</span><span class=\"token punctuation\">(</span>fahrenheit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">toFahrenheit</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>These two functions convert numbers. We will write another function that takes a string&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;and a converter function as arguments and returns a string. We will use it to calculate the value of one input based on the other input.</p>\n" +
                    "<p>It returns an empty string on an invalid&nbsp;<code class=\"gatsby-code-text\">temperature</code>, and it keeps the output rounded to the third decimal place:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> convert<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">const</span> rounded <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token keyword\">return</span> rounded<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>For example,&nbsp;<code class=\"gatsby-code-text\">tryConvert('abc', toCelsius)</code>&nbsp;returns an empty string, and&nbsp;<code class=\"gatsby-code-text\">tryConvert('10.22', toFahrenheit)</code>&nbsp;returns&nbsp;<code class=\"gatsby-code-text\">'50.396'</code>.</p>\n" +
                    "<h2 id=\"lifting-state-up\">Lifting State Up</h2>\n" +
                    "<p>Currently, both&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;components independently keep their values in the local state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token comment\">// ...  </span></code></pre>\n" +
                    "</div>\n" +
                    "<p>However, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.</p>\n" +
                    "<p>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called &ldquo;lifting state up&rdquo;. We will remove the local state from the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;and move it into the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;instead.</p>\n" +
                    "<p>If the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;owns the shared state, it becomes the &ldquo;source of truth&rdquo; for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;components are coming from the same parent&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component, the two inputs will always be in sync.</p>\n" +
                    "<p>Let&rsquo;s see how this works step by step.</p>\n" +
                    "<p>First, we will replace&nbsp;<code class=\"gatsby-code-text\">this.state.temperature</code>&nbsp;with&nbsp;<code class=\"gatsby-code-text\">this.props.temperature</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;component. For now, let&rsquo;s pretend&nbsp;<code class=\"gatsby-code-text\">this.props.temperature</code>&nbsp;already exists, although we will need to pass it from the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;in the future:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Before: const temperature = this.state.temperature;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token comment\">// ...</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We know that&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html#props-are-read-only\">props are read-only</a>. When the&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;was in the local state, the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;could just call&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>&nbsp;to change it. However, now that the&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;is coming from the parent as a prop, the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;has no control over it.</p>\n" +
                    "<p>In React, this is usually solved by making a component &ldquo;controlled&rdquo;. Just like the DOM&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>accepts both a&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;and an&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;prop, so can the custom&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;accept both&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>&nbsp;props from its parent&nbsp;<code class=\"gatsby-code-text\">Calculator</code>.</p>\n" +
                    "<p>Now, when the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;wants to update its temperature, it calls&nbsp;<code class=\"gatsby-code-text\">this.props.onTemperatureChange</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Before: this.setState({temperature: e.target.value});</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token comment\">// ...</span></code></pre>\n" +
                    "</div>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>There is no special meaning to either&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>&nbsp;prop names in custom components. We could have called them anything else, like name them&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;which is a common convention.</p>\n" +
                    "</blockquote>\n" +
                    "<p>The&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>&nbsp;prop will be provided together with the&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;prop by the parent&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component. It will handle the change by modifying its own local state, thus re-rendering both inputs with the new values. We will look at the new&nbsp;<code class=\"gatsby-code-text\">Calculator</code>implementation very soon.</p>\n" +
                    "<p>Before diving into the changes in the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>, let&rsquo;s recap our changes to the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;component. We have removed the local state from it, and instead of reading&nbsp;<code class=\"gatsby-code-text\">this.state.temperature</code>, we now read&nbsp;<code class=\"gatsby-code-text\">this.props.temperature</code>. Instead of calling&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>&nbsp;when we want to make a change, we now call&nbsp;<code class=\"gatsby-code-text\">this.props.onTemperatureChange()</code>, which will be provided by the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n" +
                    "               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now let&rsquo;s turn to the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component.</p>\n" +
                    "<p>We will store the current input&rsquo;s&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">scale</code>&nbsp;in its local state. This is the state we &ldquo;lifted up&rdquo; from the inputs, and it will serve as the &ldquo;source of truth&rdquo; for both of them. It is the minimal representation of all the data we need to know in order to render both inputs.</p>\n" +
                    "<p>For example, if we enter 37 into the Celsius input, the state of the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component will be:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n" +
                    "  temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">'37'</span><span class=\"token punctuation\">,</span>\n" +
                    "  scale<span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If we later edit the Fahrenheit field to be 212, the state of the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;will be:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n" +
                    "  temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">'212'</span><span class=\"token punctuation\">,</span>\n" +
                    "  scale<span class=\"token punctuation\">:</span> <span class=\"token string\">'f'</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>We could have stored the value of both inputs but it turns out to be unnecessary. It is enough to store the value of the most recently changed input, and the scale that it represents. We can then infer the value of the other input based on the current&nbsp;<code class=\"gatsby-code-text\">temperature</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">scale</code>&nbsp;alone.</p>\n" +
                    "<p>The inputs stay in sync because their values are computed from the same state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleCelsiusChange</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>scale<span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleFahrenheitChange</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>scale<span class=\"token punctuation\">:</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> celsius <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'f'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toCelsius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> fahrenheit <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toFahrenheit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> temperature<span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TemperatureInput\n" +
                    "          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>celsius<span class=\"token punctuation\">}</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TemperatureInput\n" +
                    "          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fahrenheit<span class=\"token punctuation\">}</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BoilingVerdict\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Now, no matter which input you edit,&nbsp;<code class=\"gatsby-code-text\">this.state.temperature</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">this.state.scale</code>&nbsp;in the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;get updated. One of the inputs gets the value as is, so any user input is preserved, and the other input value is always recalculated based on it.</p>\n" +
                    "<p>Let&rsquo;s recap what happens when you edit an input:</p>\n" +
                    "<ul>\n" +
                    "<li>React calls the function specified as&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;on the DOM&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>. In our case, this is the&nbsp;<code class=\"gatsby-code-text\">handleChange</code>method in the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;component.</li>\n" +
                    "<li>The&nbsp;<code class=\"gatsby-code-text\">handleChange</code>&nbsp;method in the&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;component calls&nbsp;<code class=\"gatsby-code-text\">this.props.onTemperatureChange()</code>&nbsp;with the new desired value. Its props, including&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>, were provided by its parent component, the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>.</li>\n" +
                    "<li>When it previously rendered, the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;has specified that&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>&nbsp;of the Celsius&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;is the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&rsquo;s&nbsp;<code class=\"gatsby-code-text\">handleCelsiusChange</code>&nbsp;method, and&nbsp;<code class=\"gatsby-code-text\">onTemperatureChange</code>&nbsp;of the Fahrenheit&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;is the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&rsquo;s&nbsp;<code class=\"gatsby-code-text\">handleFahrenheitChange</code>&nbsp;method. So either of these two&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;methods gets called depending on which input we edited.</li>\n" +
                    "<li>Inside these methods, the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component asks React to re-render itself by calling&nbsp;<code class=\"gatsby-code-text\">this.setState()</code>with the new input value and the current scale of the input we just edited.</li>\n" +
                    "<li>React calls the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>&nbsp;component&rsquo;s&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method to learn what the UI should look like. The values of both inputs are recomputed based on the current temperature and the active scale. The temperature conversion is performed here.</li>\n" +
                    "<li>React calls the&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;methods of the individual&nbsp;<code class=\"gatsby-code-text\">TemperatureInput</code>&nbsp;components with their new props specified by the&nbsp;<code class=\"gatsby-code-text\">Calculator</code>. It learns what their UI should look like.</li>\n" +
                    "<li>React calls the&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method of the&nbsp;<code class=\"gatsby-code-text\">BoilingVerdict</code>&nbsp;component, passing the temperature in Celsius as its props.</li>\n" +
                    "<li>React DOM updates the DOM with the boiling verdict and to match the desired input values. The input we just edited receives its current value, and the other input is updated to the temperature after conversion.</li>\n" +
                    "</ul>\n" +
                    "<p>Every update goes through the same steps so the inputs stay in sync.</p>\n" +
                    "<h2 id=\"lessons-learned\">&nbsp;</h2>");
            sec6React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec6React6);

            Section sec7React6 = new Section();
            sec7React6.setOrdinalNumber(7);
            sec7React6.setDescription("Composition vs Inheritance");
            sec7React6.setContent("<h2 id=\"containment\">Containment</h2>\n" +
                    "<p>Some components don&rsquo;t know their children ahead of time. This is especially common for components like&nbsp;<code class=\"gatsby-code-text\">Sidebar</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">Dialog</code>&nbsp;that represent generic &ldquo;boxes&rdquo;.</p>\n" +
                    "<p>We recommend that such components use the special&nbsp;<code class=\"gatsby-code-text\">children</code>&nbsp;prop to pass children elements directly into their output:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyBorder</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'FancyBorder FancyBorder-'</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This lets other components pass arbitrary children to them by nesting the JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyBorder <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1 <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Welcome</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Thank you for visiting our spacecraft!</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FancyBorder<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><strong><a href=\"https://codepen.io/gaearon/pen/ozqNOV?editors=0010\">Try it on CodePen</a></strong></p>\n" +
                    "<p>Anything inside the&nbsp;<code class=\"gatsby-code-text\">&lt;FancyBorder&gt;</code>&nbsp;JSX tag gets passed into the&nbsp;<code class=\"gatsby-code-text\">FancyBorder</code>&nbsp;component as a&nbsp;<code class=\"gatsby-code-text\">children</code>&nbsp;prop. Since&nbsp;<code class=\"gatsby-code-text\">FancyBorder</code>&nbsp;renders&nbsp;<code class=\"gatsby-code-text\">{props.children}</code>&nbsp;inside a&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>, the passed elements appear in the final output.</p>\n" +
                    "<p>While this is less common, sometimes you might need multiple &ldquo;holes&rdquo; in a component. In such cases you may come up with your own convention instead of using&nbsp;<code class=\"gatsby-code-text\">children</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">SplitPane</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SplitPane<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SplitPane-left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SplitPane-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SplitPane\n" +
                    "      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">&lt;</span>Contacts <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span>      <span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token attr-name\">right</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">&lt;</span>Chat <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span>      <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/gwZOJp?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>React elements like&nbsp;<code class=\"gatsby-code-text\">&lt;Contacts /&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;Chat /&gt;</code>&nbsp;are just objects, so you can pass them as props like any other data. This approach may remind you of &ldquo;slots&rdquo; in other libraries but there are no limitations on what you can pass as props in React.</p>\n" +
                    "<h2 id=\"specialization\">Specialization</h2>\n" +
                    "<p>Sometimes we think about components as being &ldquo;special cases&rdquo; of other components. For example, we might say that a&nbsp;<code class=\"gatsby-code-text\">WelcomeDialog</code>&nbsp;is a special case of&nbsp;<code class=\"gatsby-code-text\">Dialog</code>.</p>\n" +
                    "<p>In React, this is also achieved by composition, where a more &ldquo;specific&rdquo; component renders a more &ldquo;generic&rdquo; one and configures it with props:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyBorder <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1 <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FancyBorder<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dialog\n" +
                    "</span>      <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Welcome<span class=\"token punctuation\">\"</span></span>\n" +
                    "      <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Thank you for visiting our spacecraft!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/kkEaOZ?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<p>Composition works equally well for components defined as classes:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyBorder <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1 <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FancyBorder<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpDialog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dialog <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Mars Exploration Program<span class=\"token punctuation\">\"</span></span>\n" +
                    "              <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>How should we refer to you?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          Sign Me Up!</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Dialog<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Welcome aboard, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p><a href=\"https://codepen.io/gaearon/pen/gwZbYa?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n" +
                    "<h2 id=\"so-what-about-inheritance\">So What About Inheritance?</h2>\n" +
                    "<p>At Facebook, we use React in thousands of components, and we haven&rsquo;t found any use cases where we would recommend creating component inheritance hierarchies.</p>\n" +
                    "<p>Props and composition give you all the flexibility you need to customize a component&rsquo;s look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.</p>\n" +
                    "<p>If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.</p>");
            sec7React6.setLesson(reactJsLesson6);
            reactJsLesson6.getSections().add(sec7React6);

            Section sec1React7 = new Section();
            sec1React7.setOrdinalNumber(1);
            sec1React7.setDescription("Thinking in React");
            sec1React7.setContent("<p>Imagine that we already have a JSON API and a mock from our designer. The mock looks like this:</p>\n" +
                    "<p><span class=\"gatsby-resp-image-wrapper\"><span class=\"gatsby-resp-image-background-image\"><img class=\"gatsby-resp-image-image\" title=\"\" src=\"https://reactjs.org/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png\" sizes=\"(max-width: 228px) 100vw, 228px\" srcset=\"/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-13705.png 210w,\n" +
                    "/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png 228w\" alt=\"Mockup\" /></span></span></p>\n" +
                    "<p>Our JSON API returns some data that looks like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">[\n" +
                    "  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n" +
                    "  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n" +
                    "  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n" +
                    "  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n" +
                    "  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n" +
                    "  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n" +
                    "];</code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"step-1-break-the-ui-into-a-component-hierarchy\">Step 1: Break The UI Into A Component Hierarchy</h2>\n" +
                    "<p>The first thing you&rsquo;ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names. If you&rsquo;re working with a designer, they may have already done this, so go talk to them! Their Photoshop layer names may end up being the names of your React components!</p>\n" +
                    "<p>But how do you know what should be its own component? Just use the same techniques for deciding if you should create a new function or object. One such technique is the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility principle</a>, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.</p>\n" +
                    "<p>Since you&rsquo;re often displaying a JSON data model to a user, you&rsquo;ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely. That&rsquo;s because UI and data models tend to adhere to the same&nbsp;<em>information architecture</em>, which means the work of separating your UI into components is often trivial. Just break it up into components that represent exactly one piece of your data model.</p>\n" +
                    "<p><span class=\"gatsby-resp-image-wrapper\"><span class=\"gatsby-resp-image-background-image\"><img class=\"gatsby-resp-image-image\" title=\"\" src=\"https://reactjs.org/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png\" sizes=\"(max-width: 275px) 100vw, 275px\" srcset=\"/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-d08bb.png 210w,\n" +
                    "/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png 275w\" alt=\"Component diagram\" /></span></span></p>\n" +
                    "<p>You&rsquo;ll see here that we have five components in our simple app. We&rsquo;ve italicized the data each component represents.</p>\n" +
                    "<ol>\n" +
                    "<li><strong><code class=\"gatsby-code-text\">FilterableProductTable</code>&nbsp;(orange):</strong>&nbsp;contains the entirety of the example</li>\n" +
                    "<li><strong><code class=\"gatsby-code-text\">SearchBar</code>&nbsp;(blue):</strong>&nbsp;receives all&nbsp;<em>user input</em></li>\n" +
                    "<li><strong><code class=\"gatsby-code-text\">ProductTable</code>&nbsp;(green):</strong>&nbsp;displays and filters the&nbsp;<em>data collection</em>&nbsp;based on&nbsp;<em>user input</em></li>\n" +
                    "<li><strong><code class=\"gatsby-code-text\">ProductCategoryRow</code>&nbsp;(turquoise):</strong>&nbsp;displays a heading for each&nbsp;<em>category</em></li>\n" +
                    "<li><strong><code class=\"gatsby-code-text\">ProductRow</code>&nbsp;(red):</strong>&nbsp;displays a row for each&nbsp;<em>product</em></li>\n" +
                    "</ol>\n" +
                    "<p>If you look at&nbsp;<code class=\"gatsby-code-text\">ProductTable</code>, you&rsquo;ll see that the table header (containing the &ldquo;Name&rdquo; and &ldquo;Price&rdquo; labels) isn&rsquo;t its own component. This is a matter of preference, and there&rsquo;s an argument to be made either way. For this example, we left it as part of&nbsp;<code class=\"gatsby-code-text\">ProductTable</code>&nbsp;because it is part of rendering the&nbsp;<em>data collection</em>&nbsp;which is&nbsp;<code class=\"gatsby-code-text\">ProductTable</code>&rsquo;s responsibility. However, if this header grows to be complex (i.e. if we were to add affordances for sorting), it would certainly make sense to make this its own&nbsp;<code class=\"gatsby-code-text\">ProductTableHeader</code>&nbsp;component.</p>\n" +
                    "<p>Now that we&rsquo;ve identified the components in our mock, let&rsquo;s arrange them into a hierarchy. This is easy. Components that appear within another component in the mock should appear as a child in the hierarchy:</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><code class=\"gatsby-code-text\">FilterableProductTable</code></p>\n" +
                    "<ul>\n" +
                    "<li><code class=\"gatsby-code-text\">SearchBar</code></li>\n" +
                    "<li>\n" +
                    "<p><code class=\"gatsby-code-text\">ProductTable</code></p>\n" +
                    "<ul>\n" +
                    "<li><code class=\"gatsby-code-text\">ProductCategoryRow</code></li>\n" +
                    "<li><code class=\"gatsby-code-text\">ProductRow</code></li>\n" +
                    "</ul>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"step-2-build-a-static-version-in-react\">Step 2: Build A Static Version in React</h2>\n" +
                    "<p class=\"codepen\" data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BwWzwm\" data-default-tab=\"js\" data-user=\"lacker\" data-embed-version=\"2\">See the Pen&nbsp;<a href=\"https://codepen.io/gaearon/pen/BwWzwm\">Thinking In React: Step 2</a>&nbsp;on&nbsp;<a href=\"http://codepen.io/\">CodePen</a>.</p>\n" +
                    "<p>Now that you have your component hierarchy, it&rsquo;s time to implement your app. The easiest way is to build a version that takes your data model and renders the UI but has no interactivity. It&rsquo;s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. We&rsquo;ll see why.</p>\n" +
                    "<p>To build a static version of your app that renders your data model, you&rsquo;ll want to build components that reuse other components and pass data using&nbsp;<em>props</em>.&nbsp;<em>props</em>&nbsp;are a way of passing data from parent to child. If you&rsquo;re familiar with the concept of&nbsp;<em>state</em>,&nbsp;<strong>don&rsquo;t use state at all</strong>&nbsp;to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don&rsquo;t need it.</p>\n" +
                    "<p>You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy (i.e. starting with&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>) or with the ones lower in it (<code class=\"gatsby-code-text\">ProductRow</code>). In simpler examples, it&rsquo;s usually easier to go top-down, and on larger projects, it&rsquo;s easier to go bottom-up and write tests as you build.</p>\n" +
                    "<p>At the end of this step, you&rsquo;ll have a library of reusable components that render your data model. The components will only have&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;methods since this is a static version of your app. The component at the top of the hierarchy (<code class=\"gatsby-code-text\">FilterableProductTable</code>) will take your data model as a prop. If you make a change to your underlying data model and call&nbsp;<code class=\"gatsby-code-text\">ReactDOM.render()</code>&nbsp;again, the UI will be updated. It&rsquo;s easy to see how your UI is updated and where to make changes since there&rsquo;s nothing complicated going on. React&rsquo;s&nbsp;<strong>one-way data flow</strong>&nbsp;(also called&nbsp;<em>one-way binding</em>) keeps everything modular and fast.</p>\n" +
                    "<p>Simply refer to the&nbsp;<a href=\"https://reactjs.org/docs/\">React docs</a>&nbsp;if you need help executing this step.</p>\n" +
                    "<h3 id=\"a-brief-interlude-props-vs-state\">A Brief Interlude: Props vs State</h3>\n" +
                    "<p>There are two types of &ldquo;model&rdquo; data in React: props and state. It&rsquo;s important to understand the distinction between the two; skim&nbsp;<a href=\"https://reactjs.org/docs/interactivity-and-dynamic-uis.html\">the official React docs</a>&nbsp;if you aren&rsquo;t sure what the difference is.</p>\n" +
                    "<h2 id=\"step-3-identify-the-minimal-but-complete-representation-of-ui-state\">Step 3: Identify The Minimal (but complete) Representation Of UI State</h2>\n" +
                    "<p>To make your UI interactive, you need to be able to trigger changes to your underlying data model. React makes this easy with&nbsp;<strong>state</strong>.</p>\n" +
                    "<p>To build your app correctly, you first need to think of the minimal set of mutable state that your app needs. The key here is&nbsp;<a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY:&nbsp;<em>Don&rsquo;t Repeat Yourself</em></a>. Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand. For example, if you&rsquo;re building a TODO list, just keep an array of the TODO items around; don&rsquo;t keep a separate state variable for the count. Instead, when you want to render the TODO count, simply take the length of the TODO items array.</p>\n" +
                    "<p>Think of all of the pieces of data in our example application. We have:</p>\n" +
                    "<ul>\n" +
                    "<li>The original list of products</li>\n" +
                    "<li>The search text the user has entered</li>\n" +
                    "<li>The value of the checkbox</li>\n" +
                    "<li>The filtered list of products</li>\n" +
                    "</ul>\n" +
                    "<p>Let&rsquo;s go through each one and figure out which one is state. Simply ask three questions about each piece of data:</p>\n" +
                    "<ol>\n" +
                    "<li>Is it passed in from a parent via props? If so, it probably isn&rsquo;t state.</li>\n" +
                    "<li>Does it remain unchanged over time? If so, it probably isn&rsquo;t state.</li>\n" +
                    "<li>Can you compute it based on any other state or props in your component? If so, it isn&rsquo;t state.</li>\n" +
                    "</ol>\n" +
                    "<p>The original list of products is passed in as props, so that&rsquo;s not state. The search text and the checkbox seem to be state since they change over time and can&rsquo;t be computed from anything. And finally, the filtered list of products isn&rsquo;t state because it can be computed by combining the original list of products with the search text and value of the checkbox.</p>\n" +
                    "<p>So finally, our state is:</p>\n" +
                    "<ul>\n" +
                    "<li>The search text the user has entered</li>\n" +
                    "<li>The value of the checkbox</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"step-4-identify-where-your-state-should-live\">Step 4: Identify Where Your State Should Live</h2>\n" +
                    "<p class=\"codepen\" data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"qPrNQZ\" data-default-tab=\"js\" data-user=\"lacker\" data-embed-version=\"2\">See the Pen&nbsp;<a href=\"https://codepen.io/gaearon/pen/qPrNQZ\">Thinking In React: Step 4</a>&nbsp;on&nbsp;<a href=\"http://codepen.io/\">CodePen</a>.</p>\n" +
                    "<p>OK, so we&rsquo;ve identified what the minimal set of app state is. Next, we need to identify which component mutates, or&nbsp;<em>owns</em>, this state.</p>\n" +
                    "<p>Remember: React is all about one-way data flow down the component hierarchy. It may not be immediately clear which component should own what state.&nbsp;<strong>This is often the most challenging part for newcomers to understand,</strong>&nbsp;so follow these steps to figure it out:</p>\n" +
                    "<p>For each piece of state in your application:</p>\n" +
                    "<ul>\n" +
                    "<li>Identify every component that renders something based on that state.</li>\n" +
                    "<li>Find a common owner component (a single component above all the components that need the state in the hierarchy).</li>\n" +
                    "<li>Either the common owner or another component higher up in the hierarchy should own the state.</li>\n" +
                    "<li>If you can&rsquo;t find a component where it makes sense to own the state, create a new component simply for holding the state and add it somewhere in the hierarchy above the common owner component.</li>\n" +
                    "</ul>\n" +
                    "<p>Let&rsquo;s run through this strategy for our application:</p>\n" +
                    "<ul>\n" +
                    "<li><code class=\"gatsby-code-text\">ProductTable</code>&nbsp;needs to filter the product list based on state and&nbsp;<code class=\"gatsby-code-text\">SearchBar</code>&nbsp;needs to display the search text and checked state.</li>\n" +
                    "<li>The common owner component is&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>.</li>\n" +
                    "<li>It conceptually makes sense for the filter text and checked value to live in&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code></li>\n" +
                    "</ul>\n" +
                    "<p>Cool, so we&rsquo;ve decided that our state lives in&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>. First, add an instance property&nbsp;<code class=\"gatsby-code-text\">this.state = {filterText: '', inStockOnly: false}</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>&rsquo;s&nbsp;<code class=\"gatsby-code-text\">constructor</code>&nbsp;to reflect the initial state of your application. Then, pass&nbsp;<code class=\"gatsby-code-text\">filterText</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">inStockOnly</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">ProductTable</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">SearchBar</code>&nbsp;as a prop. Finally, use these props to filter the rows in&nbsp;<code class=\"gatsby-code-text\">ProductTable</code>&nbsp;and set the values of the form fields in&nbsp;<code class=\"gatsby-code-text\">SearchBar</code>.</p>\n" +
                    "<p>You can start seeing how your application will behave: set&nbsp;<code class=\"gatsby-code-text\">filterText</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">\"ball\"</code>&nbsp;and refresh your app. You&rsquo;ll see that the data table is updated correctly.</p>\n" +
                    "<h2 id=\"step-5-add-inverse-data-flow\">Step 5: Add Inverse Data Flow</h2>\n" +
                    "<p class=\"codepen\" data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"LzWZvb\" data-default-tab=\"js,result\" data-user=\"rohan10\" data-embed-version=\"2\" data-pen-title=\"Thinking In React: Step 5\">See the Pen&nbsp;<a href=\"https://codepen.io/gaearon/pen/LzWZvb\">Thinking In React: Step 5</a>&nbsp;on&nbsp;<a href=\"http://codepen.io/\">CodePen</a>.</p>\n" +
                    "<p>So far, we&rsquo;ve built an app that renders correctly as a function of props and state flowing down the hierarchy. Now it&rsquo;s time to support data flowing the other way: the form components deep in the hierarchy need to update the state in&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>.</p>\n" +
                    "<p>React makes this data flow explicit to make it easy to understand how your program works, but it does require a little more typing than traditional two-way data binding.</p>\n" +
                    "<p>If you try to type or check the box in the current version of the example, you&rsquo;ll see that React ignores your input. This is intentional, as we&rsquo;ve set the&nbsp;<code class=\"gatsby-code-text\">value</code>&nbsp;prop of the&nbsp;<code class=\"gatsby-code-text\">input</code>&nbsp;to always be equal to the&nbsp;<code class=\"gatsby-code-text\">state</code>&nbsp;passed in from&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>.</p>\n" +
                    "<p>Let&rsquo;s think about what we want to happen. We want to make sure that whenever the user changes the form, we update the state to reflect the user input. Since components should only update their own state,&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>&nbsp;will pass callbacks to&nbsp;<code class=\"gatsby-code-text\">SearchBar</code>&nbsp;that will fire whenever the state should be updated. We can use the&nbsp;<code class=\"gatsby-code-text\">onChange</code>&nbsp;event on the inputs to be notified of it. The callbacks passed by&nbsp;<code class=\"gatsby-code-text\">FilterableProductTable</code>&nbsp;will call&nbsp;<code class=\"gatsby-code-text\">setState()</code>, and the app will be updated.</p>\n" +
                    "<p>Though this sounds complex, it&rsquo;s really just a few lines of code. And it&rsquo;s really explicit how your data is flowing throughout the app.</p>\n" +
                    "<h2 id=\"and-thats-it\">And That&rsquo;s It</h2>\n" +
                    "<p>Hopefully, this gives you an idea of how to think about building components and applications with React. While it may be a little more typing than you&rsquo;re used to, remember that code is read far more than it&rsquo;s written, and it&rsquo;s extremely easy to read this modular, explicit code. As you start to build large libraries of components, you&rsquo;ll appreciate this explicitness and modularity, and with code reuse, your lines of code will start to shrink. :)</p>");
            sec1React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec1React7);

            Section sec2React7 = new Section();
            sec2React7.setOrdinalNumber(2);
            sec2React7.setDescription("React Without ES6");
            sec2React7.setContent("<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If you don&rsquo;t use ES6 yet, you may use the&nbsp;<code class=\"gatsby-code-text\">create-react-class</code>&nbsp;module instead:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The API of ES6 classes is similar to&nbsp;<code class=\"gatsby-code-text\">createReactClass()</code>&nbsp;with a few exceptions.</p>\n" +
                    "<h2 id=\"declaring-default-props\">Declaring Default Props</h2>\n" +
                    "<p>With functions and ES6 classes&nbsp;<code class=\"gatsby-code-text\">defaultProps</code>&nbsp;is defined as a property on the component itself:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "Greeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mary'</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>With&nbsp;<code class=\"gatsby-code-text\">createReactClass()</code>, you need to define&nbsp;<code class=\"gatsby-code-text\">getDefaultProps()</code>&nbsp;as a function on the passed object:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  getDefaultProps<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n" +
                    "      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mary'</span>\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"setting-the-initial-state\">Setting the Initial State</h2>\n" +
                    "<p>In ES6 classes, you can define the initial state by assigning&nbsp;<code class=\"gatsby-code-text\">this.state</code>&nbsp;in the constructor:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>With&nbsp;<code class=\"gatsby-code-text\">createReactClass()</code>, you have to provide a separate&nbsp;<code class=\"gatsby-code-text\">getInitialState</code>&nbsp;method that returns the initial state:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  getInitialState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<h2 id=\"autobinding\">Autobinding</h2>\n" +
                    "<p>In React components declared as ES6 classes, methods follow the same semantics as regular ES6 classes. This means that they don&rsquo;t automatically bind&nbsp;<code class=\"gatsby-code-text\">this</code>&nbsp;to the instance. You&rsquo;ll have to explicitly use&nbsp;<code class=\"gatsby-code-text\">.bind(this)</code>&nbsp;in the constructor:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token comment\">// This line is important!</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Because `this.handleClick` is bound, we can use it as an event handler.</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Say hello\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>With&nbsp;<code class=\"gatsby-code-text\">createReactClass()</code>, this is not necessary because it binds all methods:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> SayHello <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  getInitialState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "\n" +
                    "  handleClick<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "\n" +
                    "  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Say hello\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This means writing ES6 classes comes with a little more boilerplate code for event handlers, but the upside is slightly better performance in large applications.</p>\n" +
                    "<p>If the boilerplate code is too unattractive to you, you may enable the&nbsp;<strong>experimental</strong>&nbsp;<a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">Class Properties</a>&nbsp;syntax proposal with Babel:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token comment\">// WARNING: this syntax is experimental!</span>\n" +
                    "  <span class=\"token comment\">// Using an arrow here binds the method:</span>\n" +
                    "  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        Say hello\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Please note that the syntax above is&nbsp;<strong>experimental</strong>&nbsp;and the syntax may change, or the proposal might not make it into the language.</p>\n" +
                    "<p>If you&rsquo;d rather play it safe, you have a few options:</p>\n" +
                    "<ul>\n" +
                    "<li>Bind methods in the constructor.</li>\n" +
                    "<li>Use arrow functions, e.g.&nbsp;<code class=\"gatsby-code-text\">onClick={(e) =&gt; this.handleClick(e)}</code>.</li>\n" +
                    "<li>Keep using&nbsp;<code class=\"gatsby-code-text\">createReactClass</code>.</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"mixins\">Mixins</h2>\n" +
                    "<blockquote>\n" +
                    "<p><strong>Note:</strong></p>\n" +
                    "<p>ES6 launched without any mixin support. Therefore, there is no support for mixins when you use React with ES6 classes.</p>\n" +
                    "<p><strong>We also found numerous issues in codebases using mixins,&nbsp;<a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">and don&rsquo;t recommend using them in the new code</a>.</strong></p>\n" +
                    "<p>This section exists only for the reference.</p>\n" +
                    "</blockquote>\n" +
                    "<p>Sometimes very different components may share some common functionality. These are sometimes called&nbsp;<a href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\">cross-cutting concerns</a>.&nbsp;<code class=\"gatsby-code-text\">createReactClass</code>&nbsp;lets you use a legacy&nbsp;<code class=\"gatsby-code-text\">mixins</code>system for that.</p>\n" +
                    "<p>One common use case is a component wanting to update itself on a time interval. It&rsquo;s easy to use&nbsp;<code class=\"gatsby-code-text\">setInterval()</code>, but it&rsquo;s important to cancel your interval when you don&rsquo;t need it anymore to save memory. React provides&nbsp;<a href=\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\">lifecycle methods</a>&nbsp;that let you know when a component is about to be created or destroyed. Let&rsquo;s create a simple mixin that uses these methods to provide an easy&nbsp;<code class=\"gatsby-code-text\">setInterval()</code>&nbsp;function that will automatically get cleaned up when your component is destroyed.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> SetIntervalMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  componentWillMount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  setInterval<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>setInterval<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  componentWillUnmount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>clearInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">var</span> TickTock <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "  mixins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>SetIntervalMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Use the mixin</span>\n" +
                    "  getInitialState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  componentDidMount<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Call a method on the mixin</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  tick<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n" +
                    "        React has been running for </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds.\n" +
                    "      </span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TickTock <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.</p>");
            sec2React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec2React7);

            Section sec3React7 = new Section();
            sec3React7.setOrdinalNumber(3);
            sec3React7.setDescription("React Without JSX");
            sec3React7.setContent("<div class=\"css-7u1i3w\">\n" +
                    "<p>Each JSX element is just syntactic sugar for calling&nbsp;<code class=\"gatsby-code-text\">React.createElement(component, props, ...children)</code>. So, anything you can do with JSX can also be done with just plain JavaScript.</p>\n" +
                    "<p>For example, this code written with JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Hello <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>can be compiled to this code that does not use JSX:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>toWhat<span class=\"token punctuation\">:</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If you&rsquo;re curious to see more examples of how JSX is converted to JavaScript, you can try out&nbsp;<a href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\" target=\"_blank\" rel=\"noreferrer\">the online Babel compiler</a>.</p>\n" +
                    "<p>The component can either be provided as a string, or as a subclass of&nbsp;<code class=\"gatsby-code-text\">React.Component</code>, or a plain function for stateless components.</p>\n" +
                    "<p>If you get tired of typing&nbsp;<code class=\"gatsby-code-text\">React.createElement</code>&nbsp;so much, one common pattern is to assign a shorthand:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n" +
                    "  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use this shorthand form for&nbsp;<code class=\"gatsby-code-text\">React.createElement</code>, it can be almost as convenient to use React without JSX.</p>\n" +
                    "<p>Alternatively, you can refer to community projects such as&nbsp;<a href=\"https://github.com/mlmorg/react-hyperscript\"><code class=\"gatsby-code-text\">react-hyperscript</code></a>&nbsp;and&nbsp;<a href=\"https://github.com/ohanhi/hyperscript-helpers\"><code class=\"gatsby-code-text\">hyperscript-helpers</code></a>&nbsp;which offer a terser syntax.</p>\n" +
                    "</div>");
            sec3React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec3React7);

            Section sec4React7 = new Section();
            sec4React7.setOrdinalNumber(4);
            sec4React7.setDescription("Reconciliation");
            sec4React7.setContent("<h2 id=\"motivation\">Motivation</h2>\n" +
                    "<p>When you use React, at a single point in time you can think of the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;function as creating a tree of React elements. On the next state or props update, that&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;function will return a different tree of React elements. React then needs to figure out how to efficiently update the UI to match the most recent tree.</p>\n" +
                    "<p>There are some generic solutions to this algorithmic problem of generating the minimum number of operations to transform one tree into another. However, the&nbsp;<a href=\"http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\">state of the art algorithms</a>&nbsp;have a complexity in the order of O(n<sup>3</sup>) where n is the number of elements in the tree.</p>\n" +
                    "<p>If we used this in React, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:</p>\n" +
                    "<ol>\n" +
                    "<li>Two elements of different types will produce different trees.</li>\n" +
                    "<li>The developer can hint at which child elements may be stable across different renders with a&nbsp;<code class=\"gatsby-code-text\">key</code>&nbsp;prop.</li>\n" +
                    "</ol>\n" +
                    "<p>In practice, these assumptions are valid for almost all practical use cases.</p>\n" +
                    "<h2 id=\"the-diffing-algorithm\">The Diffing Algorithm</h2>\n" +
                    "<p>When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements.</p>\n" +
                    "<h3 id=\"elements-of-different-types\">Elements Of Different Types</h3>\n" +
                    "<p>Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. Going from&nbsp;<code class=\"gatsby-code-text\">&lt;a&gt;</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">&lt;img&gt;</code>, or from&nbsp;<code class=\"gatsby-code-text\">&lt;Article&gt;</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">&lt;Comment&gt;</code>, or from&nbsp;<code class=\"gatsby-code-text\">&lt;Button&gt;</code>&nbsp;to&nbsp;<code class=\"gatsby-code-text\">&lt;div&gt;</code>&nbsp;- any of those will lead to a full rebuild.</p>\n" +
                    "<p>When tearing down a tree, old DOM nodes are destroyed. Component instances receive&nbsp;<code class=\"gatsby-code-text\">componentWillUnmount()</code>. When building up a new tree, new DOM nodes are inserted into the DOM. Component instances receive&nbsp;<code class=\"gatsby-code-text\">componentWillMount()</code>&nbsp;and then&nbsp;<code class=\"gatsby-code-text\">componentDidMount()</code>. Any state associated with the old tree is lost.</p>\n" +
                    "<p>Any components below the root will also get unmounted and have their state destroyed. For example, when diffing:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This will destroy the old&nbsp;<code class=\"gatsby-code-text\">Counter</code>&nbsp;and remount a new one.</p>\n" +
                    "<h3 id=\"dom-elements-of-the-same-type\">DOM Elements Of The Same Type</h3>\n" +
                    "<p>When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>By comparing these two elements, React knows to only modify the&nbsp;<code class=\"gatsby-code-text\">className</code>&nbsp;on the underlying DOM node.</p>\n" +
                    "<p>When updating&nbsp;<code class=\"gatsby-code-text\">style</code>, React also knows to update only the properties that changed. For example:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{color:</span> <span class=\"token attr-name\">'red',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{color:</span> <span class=\"token attr-name\">'green',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When converting between these two elements, React knows to only modify the&nbsp;<code class=\"gatsby-code-text\">color</code>&nbsp;style, not the&nbsp;<code class=\"gatsby-code-text\">fontWeight</code>.</p>\n" +
                    "<p>After handling the DOM node, React then recurses on the children.</p>\n" +
                    "<h3 id=\"component-elements-of-the-same-type\">Component Elements Of The Same Type</h3>\n" +
                    "<p>When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls&nbsp;<code class=\"gatsby-code-text\">componentWillReceiveProps()</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">componentWillUpdate()</code>&nbsp;on the underlying instance.</p>\n" +
                    "<p>Next, the&nbsp;<code class=\"gatsby-code-text\">render()</code>&nbsp;method is called and the diff algorithm recurses on the previous result and the new result.</p>\n" +
                    "<h3 id=\"recursing-on-children\">Recursing On Children</h3>\n" +
                    "<p>By default, when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there&rsquo;s a difference.</p>\n" +
                    "<p>For example, when adding an element at the end of the children, converting between these two trees works well:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>third<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React will match the two&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;first&lt;/li&gt;</code>&nbsp;trees, match the two&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;second&lt;/li&gt;</code>&nbsp;trees, and then insert the&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;third&lt;/li&gt;</code>&nbsp;tree.</p>\n" +
                    "<p>If you implement it naively, inserting an element at the beginning has worse performance. For example, converting between these two trees works poorly:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li<span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React will mutate every child instead of realizing it can keep the&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;Duke&lt;/li&gt;</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">&lt;li&gt;Villanova&lt;/li&gt;</code>&nbsp;subtrees intact. This inefficiency can be a problem.</p>\n" +
                    "<h3 id=\"keys\">Keys</h3>\n" +
                    "<p>In order to solve this issue, React supports a&nbsp;<code class=\"gatsby-code-text\">key</code>&nbsp;attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a&nbsp;<code class=\"gatsby-code-text\">key</code>&nbsp;to our inefficient example above can make the tree conversion efficient:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"xml\">\n" +
                    "<pre class=\"gatsby-code-xml\"><code class=\"gatsby-code-xml\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2014<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now React knows that the element with key&nbsp;<code class=\"gatsby-code-text\">'2014'</code>&nbsp;is the new one, and the elements with the keys&nbsp;<code class=\"gatsby-code-text\">'2015'</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">'2016'</code>&nbsp;have just moved.</p>\n" +
                    "<p>In practice, finding a key is usually not hard. The element you are going to display may already have a unique ID, so the key can just come from your data:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>When that&rsquo;s not the case, you can add a new ID property to your model or hash some parts of the content to generate a key. The key only has to be unique among its siblings, not globally unique.</p>\n" +
                    "<p>As a last resort, you can pass an item&rsquo;s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.</p>\n" +
                    "<p>Reorders can also cause issues with component state when indexes are used as keys. Component instances are updated and reused based on their key. If the key is an index, moving an item changes it. As a result, component state for things like uncontrolled inputs can get mixed up and updated in unexpected ways.</p>\n" +
                    "<p><a href=\"https://reactjs.org/redirect-to-codepen/reconciliation/index-used-as-key\" target=\"_blank\" rel=\"noreferrer\">Here</a>&nbsp;is an example of the issues that can be caused by using indexes as keys on CodePen, and&nbsp;<a href=\"https://reactjs.org/redirect-to-codepen/reconciliation/no-index-used-as-key\" target=\"_blank\" rel=\"noreferrer\">here</a>&nbsp;is an updated version of the same example showing how not using indexes as keys will fix these reordering, sorting, and prepending issues.</p>\n" +
                    "<h2 id=\"tradeoffs\">Tradeoffs</h2>\n" +
                    "<p>It is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same. Just to be clear, rerender in this context means calling&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;for all components, it doesn&rsquo;t mean React will unmount and remount them. It will only apply the differences following the rules stated in the previous sections.</p>\n" +
                    "<p>We are regularly refining the heuristics in order to make common use cases faster. In the current implementation, you can express the fact that a subtree has been moved amongst its siblings, but you cannot tell that it has moved somewhere else. The algorithm will rerender that full subtree.</p>\n" +
                    "<p>Because React relies on heuristics, if the assumptions behind them are not met, performance will suffer.</p>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p>The algorithm will not try to match subtrees of different component types. If you see yourself alternating between two component types with very similar output, you may want to make it the same type. In practice, we haven&rsquo;t found this to be an issue.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Keys should be stable, predictable, and unique. Unstable keys (like those produced by&nbsp;<code class=\"gatsby-code-text\">Math.random()</code>) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.</p>\n" +
                    "</li>\n" +
                    "</ol>");
            sec4React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec4React7);

            Section sec5React7 = new Section();
            sec5React7.setOrdinalNumber(5);
            sec5React7.setDescription("Refs and the DOM");
            sec5React7.setContent("<p>In the typical React dataflow,&nbsp;<a href=\"https://reactjs.org/docs/components-and-props.html\">props</a>&nbsp;are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.</p>\n" +
                    "<h3 id=\"when-to-use-refs\">When to Use Refs</h3>\n" +
                    "<p>There are a few good use cases for refs:</p>\n" +
                    "<ul>\n" +
                    "<li>Managing focus, text selection, or media playback.</li>\n" +
                    "<li>Triggering imperative animations.</li>\n" +
                    "<li>Integrating with third-party DOM libraries.</li>\n" +
                    "</ul>\n" +
                    "<p>Avoid using refs for anything that can be done declaratively.</p>\n" +
                    "<p>For example, instead of exposing&nbsp;<code class=\"gatsby-code-text\">open()</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">close()</code>&nbsp;methods on a&nbsp;<code class=\"gatsby-code-text\">Dialog</code>&nbsp;component, pass an&nbsp;<code class=\"gatsby-code-text\">isOpen</code>&nbsp;prop to it.</p>\n" +
                    "<h3 id=\"dont-overuse-refs\">Don&rsquo;t Overuse Refs</h3>\n" +
                    "<p>Your first inclination may be to use refs to &ldquo;make things happen&rdquo; in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy. Often, it becomes clear that the proper place to &ldquo;own&rdquo; that state is at a higher level in the hierarchy. See the&nbsp;<a href=\"https://reactjs.org/docs/lifting-state-up.html\">Lifting State Up</a>&nbsp;guide for examples of this.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note</p>\n" +
                    "<p>The examples below have been updated to use the&nbsp;<code class=\"gatsby-code-text\">React.createRef()</code>&nbsp;API introduced in React 16.3. If you are using an earlier release of React, we recommend using&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\">callback refs</a>instead.</p>\n" +
                    "</blockquote>\n" +
                    "<h3 id=\"creating-refs\">Creating Refs</h3>\n" +
                    "<p>Refs are created using&nbsp;<code class=\"gatsby-code-text\">React.createRef()</code>&nbsp;and attached to React elements via the&nbsp;<code class=\"gatsby-code-text\">ref</code>attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"accessing-refs\">Accessing Refs</h3>\n" +
                    "<p>When a ref is passed to an element in&nbsp;<code class=\"gatsby-code-text\">render</code>, a reference to the node becomes accessible at the&nbsp;<code class=\"gatsby-code-text\">current</code>&nbsp;attribute of the ref.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>The value of the ref differs depending on the type of the node:</p>\n" +
                    "<ul>\n" +
                    "<li>When the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute is used on an HTML element, the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;created in the constructor with&nbsp;<code class=\"gatsby-code-text\">React.createRef()</code>&nbsp;receives the underlying DOM element as its&nbsp;<code class=\"gatsby-code-text\">current</code>&nbsp;property.</li>\n" +
                    "<li>When the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute is used on a custom class component, the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;object receives the mounted instance of the component as its&nbsp;<code class=\"gatsby-code-text\">current</code>.</li>\n" +
                    "<li><strong>You may not use the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute on function components</strong>&nbsp;because they don&rsquo;t have instances.</li>\n" +
                    "</ul>\n" +
                    "<p>The examples below demonstrate the differences.</p>\n" +
                    "<h4 id=\"adding-a-ref-to-a-dom-element\">Adding a Ref to a DOM Element</h4>\n" +
                    "<p>This code uses a&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;to store a reference to a DOM node:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token comment\">// create a ref to store the textInput DOM element</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Explicitly focus the text input using the raw DOM API</span>\n" +
                    "    <span class=\"token comment\">// Note: we're accessing \"current\" to get the DOM node</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// tell React that we want to associate the &lt;input&gt; ref</span>\n" +
                    "    <span class=\"token comment\">// with the `textInput` that we created in the constructor</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n" +
                    "          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n" +
                    "          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span>\n" +
                    "        <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React will assign the&nbsp;<code class=\"gatsby-code-text\">current</code>&nbsp;property with the DOM element when the component mounts, and assign it back to&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;when it unmounts.&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;updates happen before&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>&nbsp;lifecycle methods.</p>\n" +
                    "<h4 id=\"adding-a-ref-to-a-class-component\">Adding a Ref to a Class Component</h4>\n" +
                    "<p>If we wanted to wrap the&nbsp;<code class=\"gatsby-code-text\">CustomTextInput</code>&nbsp;above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its&nbsp;<code class=\"gatsby-code-text\">focusTextInput</code>&nbsp;method manually:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFocusTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CustomTextInput <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Note that this only works if&nbsp;<code class=\"gatsby-code-text\">CustomTextInput</code>&nbsp;is declared as a class:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h4 id=\"refs-and-function-components\">Refs and Function Components</h4>\n" +
                    "<p><strong>You may not use the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute on function components</strong>&nbsp;because they don&rsquo;t have instances:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// This will *not* work!</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyFunctionComponent <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You should convert the component to a class if you need a ref to it, just like you do when you need lifecycle methods or state.</p>\n" +
                    "<p>You can, however,&nbsp;<strong>use the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute inside a function component</strong>&nbsp;as long as you refer to a DOM element or a class component:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// textInput must be declared here so the ref can refer to it</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n" +
                    "        <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n" +
                    "        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n" +
                    "      <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"exposing-dom-refs-to-parent-components\">Exposing DOM Refs to Parent Components</h3>\n" +
                    "<p>In rare cases, you might want to have access to a child&rsquo;s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.</p>\n" +
                    "<p>While you could&nbsp;<a href=\"https://reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-class-component\">add a ref to the child component</a>, this is not an ideal solution, as you would only get a component instance rather than a DOM node. Additionally, this wouldn&rsquo;t work with function components.</p>\n" +
                    "<p>If you use React 16.3 or higher, we recommend to use&nbsp;<a href=\"https://reactjs.org/docs/forwarding-refs.html\">ref forwarding</a>&nbsp;for these cases.&nbsp;<strong>Ref forwarding lets components opt into exposing any child component&rsquo;s ref as their own</strong>. You can find a detailed example of how to expose a child&rsquo;s DOM node to a parent component&nbsp;<a href=\"https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components\">in the ref forwarding documentation</a>.</p>\n" +
                    "<p>If you use React 16.2 or lower, or if you need more flexibility than provided by ref forwarding, you can use&nbsp;<a href=\"https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\">this alternative approach</a>&nbsp;and explicitly pass a ref as a differently named prop.</p>\n" +
                    "<p>When possible, we advise against exposing DOM nodes, but it can be a useful escape hatch. Note that this approach requires you to add some code to the child component. If you have absolutely no control over the child component implementation, your last option is to use&nbsp;<a href=\"https://reactjs.org/docs/react-dom.html#finddomnode\"><code class=\"gatsby-code-text\">findDOMNode()</code></a>, but it is discouraged and deprecated in&nbsp;<a href=\"https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\"><code class=\"gatsby-code-text\">StrictMode</code></a>.</p>\n" +
                    "<h3 id=\"callback-refs\">Callback Refs</h3>\n" +
                    "<p>React also supports another way to set refs called &ldquo;callback refs&rdquo;, which gives more fine-grain control over when refs are set and unset.</p>\n" +
                    "<p>Instead of passing a&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;attribute created by&nbsp;<code class=\"gatsby-code-text\">createRef()</code>, you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.</p>\n" +
                    "<p>The example below implements a common pattern: using the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;callback to store a reference to a DOM node in an instance property.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setTextInputRef</span> <span class=\"token operator\">=</span> element <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">focusTextInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Focus the text input using the raw DOM API</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// autofocus the input on mount</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "</span>  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// Use the `ref` callback to store a reference to the text input DOM</span>\n" +
                    "    <span class=\"token comment\">// element in an instance field (for example, this.textInput).</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setTextInputRef<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>        <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input\n" +
                    "          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n" +
                    "          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>        <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>React will call the&nbsp;<code class=\"gatsby-code-text\">ref</code>&nbsp;callback with the DOM element when the component mounts, and call it with&nbsp;<code class=\"gatsby-code-text\">null</code>&nbsp;when it unmounts. Refs are guaranteed to be up-to-date before&nbsp;<code class=\"gatsby-code-text\">componentDidMount</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">componentDidUpdate</code>&nbsp;fires.</p>\n" +
                    "<p>You can pass callback refs between components like you can with object refs that were created with&nbsp;<code class=\"gatsby-code-text\">React.createRef()</code>.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "</span>    <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CustomTextInput\n" +
                    "<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span>\n" +
                    "</span>      <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>In the example above,&nbsp;<code class=\"gatsby-code-text\">Parent</code>&nbsp;passes its ref callback as an&nbsp;<code class=\"gatsby-code-text\">inputRef</code>&nbsp;prop to the&nbsp;<code class=\"gatsby-code-text\">CustomTextInput</code>, and the&nbsp;<code class=\"gatsby-code-text\">CustomTextInput</code>&nbsp;passes the same function as a special&nbsp;<code class=\"gatsby-code-text\">ref</code>attribute to the&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>. As a result,&nbsp;<code class=\"gatsby-code-text\">this.inputElement</code>&nbsp;in&nbsp;<code class=\"gatsby-code-text\">Parent</code>&nbsp;will be set to the DOM node corresponding to the&nbsp;<code class=\"gatsby-code-text\">&lt;input&gt;</code>&nbsp;element in the&nbsp;<code class=\"gatsby-code-text\">CustomTextInput</code>.</p>\n" +
                    "<h3 id=\"legacy-api-string-refs\">&nbsp;</h3>");
            sec5React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec5React7);

            Section sec6React7 = new Section();
            sec6React7.setOrdinalNumber(6);
            sec6React7.setDescription("Render Props");
            sec6React7.setContent("<p>A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataProvider <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Libraries that use render props include&nbsp;<a href=\"https://reacttraining.com/react-router/web/api/Route/Route-render-methods\">React Router</a>&nbsp;and&nbsp;<a href=\"https://github.com/paypal/downshift\">Downshift</a>.</p>\n" +
                    "<p>In this document, we&rsquo;ll discuss why render props are useful, and how to write your own.</p>\n" +
                    "<h2 id=\"use-render-props-for-cross-cutting-concerns\">Use Render Props for Cross-Cutting Concerns</h2>\n" +
                    "<p>Components are the primary unit of code reuse in React, but it&rsquo;s not always obvious how to share the state or behavior that one component encapsulates to other components that need that same state.</p>\n" +
                    "<p>For example, the following component tracks the mouse position in a web app:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      x<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n" +
                    "      y<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientY\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>As the cursor moves around the screen, the component displays its (x, y) coordinates in a&nbsp;<code class=\"gatsby-code-text\">&lt;p&gt;</code>.</p>\n" +
                    "<p>Now the question is: How can we reuse this behavior in another component? In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?</p>\n" +
                    "<p>Since components are the basic unit of code reuse in React, let&rsquo;s try refactoring the code a bit to use a&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;component that encapsulates the behavior we need to reuse elsewhere.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// The &lt;Mouse&gt; component encapsulates the behavior we need...</span>\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      x<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n" +
                    "      y<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientY\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...but how do we render something other than a &lt;p&gt;? */</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mouse <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now the&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;component encapsulates all behavior associated with listening for&nbsp;<code class=\"gatsby-code-text\">mousemove</code>&nbsp;events and storing the (x, y) position of the cursor, but it&rsquo;s not yet truly reusable.</p>\n" +
                    "<p>For example, let&rsquo;s say we have a&nbsp;<code class=\"gatsby-code-text\">&lt;Cat&gt;</code>&nbsp;component that renders the image of a cat chasing the mouse around the screen. We might use a&nbsp;<code class=\"gatsby-code-text\">&lt;Cat mouse={{ x, y }}&gt;</code>&nbsp;prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.</p>\n" +
                    "<p>As a first pass, you might try rendering the&nbsp;<code class=\"gatsby-code-text\">&lt;Cat&gt;</code>&nbsp;<em>inside&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&rsquo;s&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method</em>, like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token punctuation\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseWithCat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      x<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n" +
                    "      y<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientY\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n" +
                    "          We could just swap out the &lt;p&gt; for a &lt;Cat&gt; here ... but then\n" +
                    "          we would need to create a separate &lt;MouseWithSomethingElse&gt;\n" +
                    "          component every time we need to use it, so &lt;MouseWithCat&gt;\n" +
                    "          isn't really reusable yet.\n" +
                    "        */</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Cat <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MouseWithCat <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This approach will work for our specific use case, but we haven&rsquo;t achieved the objective of truly encapsulating the behavior in a reusable way. Now, every time we want the mouse position for a different use case, we have to create a new component (i.e. essentially another&nbsp;<code class=\"gatsby-code-text\">&lt;MouseWithCat&gt;</code>) that renders something specifically for that use case.</p>\n" +
                    "<p>Here&rsquo;s where the render prop comes in: Instead of hard-coding a&nbsp;<code class=\"gatsby-code-text\">&lt;Cat&gt;</code>&nbsp;inside a&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>component, and effectively changing its rendered output, we can provide&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;with a function prop that it uses to dynamically determine what to render&ndash;a render prop.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token punctuation\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n" +
                    "      x<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n" +
                    "      y<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>clientY\n" +
                    "    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span>\n" +
                    "\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n" +
                    "          Instead of providing a static representation of what &lt;Mouse&gt; renders,\n" +
                    "          use the `render` prop to dynamically determine what to render.\n" +
                    "        */</span><span class=\"token punctuation\">}</span>\n" +
                    "        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span>\n" +
                    "\n" +
                    "<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mouse <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token punctuation\">&lt;</span>Cat <span class=\"token attr-name\">mouse</span><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Now, instead of effectively cloning the&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;component and hard-coding something else in its&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;method to solve for a specific use case, we provide a&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;prop that&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>can use to dynamically determine what it renders.</p>\n" +
                    "<p>More concretely,&nbsp;<strong>a render prop is a function prop that a component uses to know what to render.</strong></p>\n" +
                    "<p>This technique makes the behavior that we need to share extremely portable. To get that behavior, render a&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;with a&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;prop that tells it what to render with the current (x, y) of the cursor.</p>\n" +
                    "<p>One interesting thing to note about render props is that you can implement most&nbsp;<a href=\"https://reactjs.org/docs/higher-order-components.html\">higher-order components</a>&nbsp;(HOC) using a regular component with a render prop. For example, if you would prefer to have a&nbsp;<code class=\"gatsby-code-text\">withMouse</code>&nbsp;HOC instead of a&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;component, you could easily create one using a regular&nbsp;<code class=\"gatsby-code-text\">&lt;Mouse&gt;</code>&nbsp;with a render prop:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// If you really want a HOC for some reason, you can easily</span>\n" +
                    "<span class=\"token comment\">// create one using a regular component with a render prop!</span>\n" +
                    "<span class=\"token keyword\">function</span> <span class=\"token function\">withMouse</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n" +
                    "      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n" +
                    "        <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mouse <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "          <span class=\"token punctuation\">&lt;</span>Component <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">this</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">/&gt;</span>\n" +
                    "        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span>\n" +
                    "      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n" +
                    "    <span class=\"token punctuation\">}</span>\n" +
                    "  <span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>So using a render prop makes it possible to use either pattern.</p>\n" +
                    "<h2 id=\"using-props-other-than-render\">Using Props Other Than&nbsp;<code class=\"gatsby-code-text\">render</code></h2>\n" +
                    "<p>It&rsquo;s important to remember that just because the pattern is called &ldquo;render props&rdquo; you don&rsquo;t&nbsp;<em>have to use a prop named&nbsp;<code class=\"gatsby-code-text\">render</code>&nbsp;to use this pattern</em>. In fact,&nbsp;<a href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\"><em>any</em>&nbsp;prop that is a function that a component uses to know what to render is technically a &ldquo;render prop&rdquo;</a>.</p>\n" +
                    "<p>Although the examples above use&nbsp;<code class=\"gatsby-code-text\">render</code>, we could just as easily use the&nbsp;<code class=\"gatsby-code-text\">children</code>&nbsp;prop!</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mouse <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "  <span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span>\n" +
                    "<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>And remember, the&nbsp;<code class=\"gatsby-code-text\">children</code>&nbsp;prop doesn&rsquo;t actually need to be named in the list of &ldquo;attributes&rdquo; in your JSX element. Instead, you can put it directly&nbsp;<em>inside</em>&nbsp;the element!</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mouse<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">{</span>mouse <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n" +
                    "    <span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p<span class=\"token punctuation\">&gt;</span></span>\n" +
                    "  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n" +
                    "<span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Mouse<span class=\"token punctuation\">&gt;</span></span></code></pre>\n" +
                    "</div>\n" +
                    "<p>You&rsquo;ll see this technique used in the&nbsp;<a href=\"https://github.com/chenglou/react-motion\">react-motion</a>&nbsp;API.</p>\n" +
                    "<p>Since this technique is a little unusual, you&rsquo;ll probably want to explicitly state that&nbsp;<code class=\"gatsby-code-text\">children</code>should be a function in your&nbsp;<code class=\"gatsby-code-text\">propTypes</code>&nbsp;when designing an API like this.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">Mouse<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n" +
                    "  children<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired\n" +
                    "<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n" +
                    "</div>");
            sec6React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec6React7);

            Section sec7React7 = new Section();
            sec7React7.setOrdinalNumber(7);
            sec7React7.setDescription("Static Type Checking");
            sec7React7.setContent("<p><a href=\"https://flow.org/\">Flow</a>&nbsp;is a static type checker for your JavaScript code. It is developed at Facebook and is often used with React. It lets you annotate the variables, functions, and React components with a special type syntax, and catch mistakes early. You can read an&nbsp;<a href=\"https://flow.org/en/docs/getting-started/\">introduction to Flow</a>&nbsp;to learn its basics.</p>\n" +
                    "<p>To use Flow, you need to:</p>\n" +
                    "<ul>\n" +
                    "<li>Add Flow to your project as a dependency.</li>\n" +
                    "<li>Ensure that Flow syntax is stripped from the compiled code.</li>\n" +
                    "<li>Add type annotations and run Flow to check them.</li>\n" +
                    "</ul>\n" +
                    "<p>We will explain these steps below in detail.</p>\n" +
                    "<h3 id=\"adding-flow-to-a-project\">Adding Flow to a Project</h3>\n" +
                    "<p>First, navigate to your project directory in the terminal. You will need to run the following command:</p>\n" +
                    "<p>If you use&nbsp;<a href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn add --dev flow-bin</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use&nbsp;<a href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev flow-bin</code></pre>\n" +
                    "</div>\n" +
                    "<p>This command installs the latest version of Flow into your project.</p>\n" +
                    "<p>Now, add&nbsp;<code class=\"gatsby-code-text\">flow</code>&nbsp;to the&nbsp;<code class=\"gatsby-code-text\">\"scripts\"</code>&nbsp;section of your&nbsp;<code class=\"gatsby-code-text\">package.json</code>&nbsp;to be able to use this from the terminal:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span>\n" +
                    "</span>    <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Finally, run one of the following commands:</p>\n" +
                    "<p>If you use&nbsp;<a href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn run flow init</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use&nbsp;<a href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> run flow init</code></pre>\n" +
                    "</div>\n" +
                    "<p>This command will create a Flow configuration file that you will need to commit.</p>\n" +
                    "<h3 id=\"stripping-flow-syntax-from-the-compiled-code\">Stripping Flow Syntax from the Compiled Code</h3>\n" +
                    "<p>Flow extends the JavaScript language with a special syntax for type annotations. However, browsers aren&rsquo;t aware of this syntax, so we need to make sure it doesn&rsquo;t end up in the compiled JavaScript bundle that is sent to the browser.</p>\n" +
                    "<p>The exact way to do this depends on the tools you use to compile JavaScript.</p>\n" +
                    "<h4 id=\"create-react-app\">Create React App</h4>\n" +
                    "<p>If your project was set up using&nbsp;<a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, congratulations! The Flow annotations are already being stripped by default so you don&rsquo;t need to do anything else in this step.</p>\n" +
                    "<h4 id=\"babel\">Babel</h4>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>These instructions are&nbsp;<em>not</em>&nbsp;for Create React App users. Even though Create React App uses Babel under the hood, it is already configured to understand Flow. Only follow this step if you&nbsp;<em>don&rsquo;t</em>&nbsp;use Create React App.</p>\n" +
                    "</blockquote>\n" +
                    "<p>If you manually configured Babel for your project, you will need to install a special preset for Flow.</p>\n" +
                    "<p>If you use Yarn, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn add --dev babel-preset-flow</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use npm, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev babel-preset-flow</code></pre>\n" +
                    "</div>\n" +
                    "<p>Then add the&nbsp;<code class=\"gatsby-code-text\">flow</code>&nbsp;preset to your&nbsp;<a href=\"https://babeljs.io/docs/usage/babelrc/\">Babel configuration</a>. For example, if you configure Babel through&nbsp;<code class=\"gatsby-code-text\">.babelrc</code>&nbsp;file, it could look like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token string\">\"presets\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span>\n" +
                    "</span>    <span class=\"token string\">\"react\"</span>\n" +
                    "  <span class=\"token punctuation\">]</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>This will let you use the Flow syntax in your code.</p>\n" +
                    "<blockquote>\n" +
                    "<p>Note:</p>\n" +
                    "<p>Flow does not require the&nbsp;<code class=\"gatsby-code-text\">react</code>&nbsp;preset, but they are often used together. Flow itself understands JSX syntax out of the box.</p>\n" +
                    "</blockquote>\n" +
                    "<h4 id=\"other-build-setups\">Other Build Setups</h4>\n" +
                    "<p>If you don&rsquo;t use either Create React App or Babel, you can use&nbsp;<a href=\"https://github.com/flowtype/flow-remove-types\">flow-remove-types</a>&nbsp;to strip the type annotations.</p>\n" +
                    "<h3 id=\"running-flow\">Running Flow</h3>\n" +
                    "<p>If you followed the instructions above, you should be able to run Flow for the first time.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn flow</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use npm, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> run flow</code></pre>\n" +
                    "</div>\n" +
                    "<p>You should see a message like:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">No errors!\n" +
                    "✨  Done in 0.17s.</code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"adding-flow-type-annotations\">Adding Flow Type Annotations</h3>\n" +
                    "<p>By default, Flow only checks the files that include this annotation:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// @flow</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Typically it is placed at the top of a file. Try adding it to some files in your project and run&nbsp;<code class=\"gatsby-code-text\">yarn flow</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">npm run flow</code>&nbsp;to see if Flow already found any issues.</p>\n" +
                    "<p>There is also&nbsp;<a href=\"https://flow.org/en/docs/config/options/#toc-all-boolean\">an option</a>&nbsp;to force Flow to check&nbsp;<em>all</em>&nbsp;files regardless of the annotation. This can be too noisy for existing projects, but is reasonable for a new project if you want to fully type it with Flow.</p>\n" +
                    "<p>Now you&rsquo;re all set! We recommend to check out the following resources to learn more about Flow:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://flow.org/en/docs/types/\">Flow Documentation: Type Annotations</a></li>\n" +
                    "<li><a href=\"https://flow.org/en/docs/editors/\">Flow Documentation: Editors</a></li>\n" +
                    "<li><a href=\"https://flow.org/en/docs/react/\">Flow Documentation: React</a></li>\n" +
                    "<li><a href=\"https://medium.com/flow-type/linting-in-flow-7709d7a7e969\">Linting in Flow</a></li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"typescript\">TypeScript</h2>\n" +
                    "<p><a href=\"https://www.typescriptlang.org/\">TypeScript</a>&nbsp;is a programming language developed by Microsoft. It is a typed superset of JavaScript, and includes its own compiler. Being a typed language, TypeScript can catch errors and bugs at build time, long before your app goes live. You can learn more about using TypeScript with React&nbsp;<a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">here</a>.</p>\n" +
                    "<p>To use TypeScript, you need to:</p>\n" +
                    "<ul>\n" +
                    "<li>Add TypeScript as a dependency to your project</li>\n" +
                    "<li>Configure the TypeScript compiler options</li>\n" +
                    "<li>Use the right file extensions</li>\n" +
                    "<li>Add definitions for libraries you use</li>\n" +
                    "</ul>\n" +
                    "<p>Let&rsquo;s go over these in detail.</p>\n" +
                    "<h3 id=\"adding-typescript-to-a-project\">Adding TypeScript to a Project</h3>\n" +
                    "<p>It all begins with running one command in your terminal.</p>\n" +
                    "<p>If you use&nbsp;<a href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn add --dev typescript</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use&nbsp;<a href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript</code></pre>\n" +
                    "</div>\n" +
                    "<p>Congrats! You&rsquo;ve installed the latest version of TypeScript into your project. Installing TypeScript gives us access to the&nbsp;<code class=\"gatsby-code-text\">tsc</code>&nbsp;command. Before configuration, let&rsquo;s add&nbsp;<code class=\"gatsby-code-text\">tsc</code>&nbsp;to the &ldquo;scripts&rdquo; section in our&nbsp;<code class=\"gatsby-code-text\">package.json</code>:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n" +
                    "</span>    <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "  <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<h3 id=\"configuring-the-typescript-compiler\">Configuring the TypeScript Compiler</h3>\n" +
                    "<p>The compiler is of no help to us until we tell it what to do. In TypeScript, these rules are defined in a special file called&nbsp;<code class=\"gatsby-code-text\">tsconfig.json</code>. To generate this file run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">tsc --init</code></pre>\n" +
                    "</div>\n" +
                    "<p>Looking at the now generated&nbsp;<code class=\"gatsby-code-text\">tsconfig.json</code>, you can see that there are many options you can use to configure the compiler. For a detailed description of all the options, check&nbsp;<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">here</a>.</p>\n" +
                    "<p>Of the many options, we&rsquo;ll look at&nbsp;<code class=\"gatsby-code-text\">rootDir</code>&nbsp;and&nbsp;<code class=\"gatsby-code-text\">outDir</code>. In its true fashion, the compiler will take in typescript files and generate javascript files. However we don&rsquo;t want to get confused with our source files and the generated output.</p>\n" +
                    "<p>We&rsquo;ll address this in two steps:</p>\n" +
                    "<ul>\n" +
                    "<li>Firstly, let&rsquo;s arrange our project structure like this. We&rsquo;ll place all our source code in the&nbsp;<code class=\"gatsby-code-text\">src</code>&nbsp;directory.</li>\n" +
                    "</ul>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"text\">\n" +
                    "<pre class=\"gatsby-code-text\"><code class=\"gatsby-code-text\">├── package.json\n" +
                    "├── src\n" +
                    "│   └── index.ts\n" +
                    "└── tsconfig.json</code></pre>\n" +
                    "</div>\n" +
                    "<ul>\n" +
                    "<li>Next, we&rsquo;ll tell the compiler where our source code is and where the output should go.</li>\n" +
                    "</ul>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"jsx\">\n" +
                    "<pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// tsconfig.json</span>\n" +
                    "\n" +
                    "<span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n" +
                    "    <span class=\"token comment\">// ...</span>\n" +
                    "<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"rootDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n" +
                    "</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"outDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"build\"</span>\n" +
                    "</span>    <span class=\"token comment\">// ...</span>\n" +
                    "  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>\n" +
                    "<p>Great! Now when we run our build script the compiler will output the generated javascript to the&nbsp;<code class=\"gatsby-code-text\">build</code>&nbsp;folder. The&nbsp;<a href=\"https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json\">TypeScript React Starter</a>&nbsp;provides a&nbsp;<code class=\"gatsby-code-text\">tsconfig.json</code>&nbsp;with a good set of rules to get you started.</p>\n" +
                    "<p>Generally, you don&rsquo;t want to keep the generated javascript in your source control, so be sure to add the build folder to your&nbsp;<code class=\"gatsby-code-text\">.gitignore</code>.</p>\n" +
                    "<h3 id=\"file-extensions\">File extensions</h3>\n" +
                    "<p>In React, you most likely write your components in a&nbsp;<code class=\"gatsby-code-text\">.js</code>&nbsp;file. In TypeScript we have 2 file extensions:</p>\n" +
                    "<p><code class=\"gatsby-code-text\">.ts</code>&nbsp;is the default file extension while&nbsp;<code class=\"gatsby-code-text\">.tsx</code>&nbsp;is a special extension used for files which contain&nbsp;<code class=\"gatsby-code-text\">JSX</code>.</p>\n" +
                    "<h3 id=\"running-typescript\">Running TypeScript</h3>\n" +
                    "<p>If you followed the instructions above, you should be able to run TypeScript for the first time.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\">yarn build</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you use npm, run:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token function\">npm</span> run build</code></pre>\n" +
                    "</div>\n" +
                    "<p>If you see no output, it means that it completed successfully.</p>\n" +
                    "<h3 id=\"type-definitions\">Type Definitions</h3>\n" +
                    "<p>To be able to show errors and hints from other packages, the compiler relies on declaration files. A declaration file provides all the type information about a library. This enables us to use javascript libraries like those on npm in our project.</p>\n" +
                    "<p>There are two main ways to get declarations for a library:</p>\n" +
                    "<p><strong>Bundled</strong>&nbsp;- The library bundles its own declaration file. This is great for us, since all we need to do is install the library, and we can use it right away. To check if a library has bundled types, look for an&nbsp;<code class=\"gatsby-code-text\">index.d.ts</code>&nbsp;file in the project. Some libraries will have it specified in their&nbsp;<code class=\"gatsby-code-text\">package.json</code>&nbsp;under the&nbsp;<code class=\"gatsby-code-text\">typings</code>&nbsp;or&nbsp;<code class=\"gatsby-code-text\">types</code>&nbsp;field.</p>\n" +
                    "<p><strong><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a></strong>&nbsp;- DefinitelyTyped is a huge repository of declarations for libraries that don&rsquo;t bundle a declaration file. The declarations are crowd-sourced and managed by Microsoft and open source contributors. React for example doesn&rsquo;t bundle its own declaration file. Instead we can get it from DefinitelyTyped. To do so enter this command in your terminal.</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"bash\">\n" +
                    "<pre class=\"gatsby-code-bash\"><code class=\"gatsby-code-bash\"><span class=\"token comment\"># yarn</span>\n" +
                    "yarn add --dev @types/react\n" +
                    "\n" +
                    "<span class=\"token comment\"># npm</span>\n" +
                    "<span class=\"token function\">npm</span> i --save-dev @types/react</code></pre>\n" +
                    "</div>\n" +
                    "<p><strong>Local Declarations</strong>&nbsp;Sometimes the package that you want to use doesn&rsquo;t bundle declarations nor is it available on DefinitelyTyped. In that case, we can have a local declaration file. To do this, create a&nbsp;<code class=\"gatsby-code-text\">declarations.d.ts</code>&nbsp;file in the root of your source directory. A simple declaration could look like this:</p>\n" +
                    "<div class=\"gatsby-highlight\" data-language=\"typescript\">\n" +
                    "<pre class=\"gatsby-code-typescript\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'querystring'</span> <span class=\"token punctuation\">{</span>\n" +
                    "  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n" +
                    "  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> object\n" +
                    "<span class=\"token punctuation\">}</span></code></pre>\n" +
                    "</div>");
            sec7React7.setLesson(reactJsLesson7);
            reactJsLesson7.getSections().add(sec7React7);

            Section sec1Vue1 = new Section();
            sec1Vue1.setOrdinalNumber(1);
            sec1Vue1.setDescription("Template Syntax");
            sec1Vue1.setContent("<p>Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance&rsquo;s data. All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.</p>\n" +
                    "<p>Under the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the reactivity system, Vue is able to intelligently figure out the minimal number of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.</p>\n" +
                    "<p>If you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also&nbsp;<a href=\"https://vuejs.org/v2/guide/render-function.html\">directly write render functions</a>&nbsp;instead of templates, with optional JSX support.</p>\n" +
                    "<h2 id=\"Interpolations\"><a class=\"headerlink\" title=\"Interpolations\" href=\"https://vuejs.org/v2/guide/syntax.html#Interpolations\" data-scroll=\"\">Interpolations</a></h2>\n" +
                    "<h3 id=\"Text\"><a class=\"headerlink\" title=\"Text\" href=\"https://vuejs.org/v2/guide/syntax.html#Text\" data-scroll=\"\">Text</a></h3>\n" +
                    "<p>The most basic form of data binding is text interpolation using the &ldquo;Mustache&rdquo; syntax (double curly braces):</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: {{ msg }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The mustache tag will be replaced with the value of the&nbsp;<code>msg</code>&nbsp;property on the corresponding data object. It will also be updated whenever the data object&rsquo;s&nbsp;<code>msg</code>property changes.</p>\n" +
                    "<p>You can also perform one-time interpolations that do not update on data change by using the&nbsp;<a href=\"https://vuejs.org/v2/api/#v-once\">v-once directive</a>, but keep in mind this will also affect any other bindings on the same node:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: {{ msg }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Raw-HTML\"><a class=\"headerlink\" title=\"Raw HTML\" href=\"https://vuejs.org/v2/guide/syntax.html#Raw-HTML\" data-scroll=\"\">Raw HTML</a></h3>\n" +
                    "<p>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the&nbsp;<code>v-html</code>&nbsp;directive:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: {{ rawHtml }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example1\" class=\"demo\">\n" +
                    "<p>Using mustaches: &lt;span style=\"color: red\"&gt;This should be red.&lt;/span&gt;</p>\n" +
                    "<p>Using v-html directive:&nbsp;This should be red.</p>\n" +
                    "</div>\n" +
                    "<p>The contents of the&nbsp;<code>span</code>&nbsp;will be replaced with the value of the&nbsp;<code>rawHtml</code>&nbsp;property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use&nbsp;<code>v-html</code>&nbsp;to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</p>\n" +
                    "<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to&nbsp;<a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"noopener\">XSS vulnerabilities</a>. Only use HTML interpolation on trusted content and&nbsp;<strong>never</strong>&nbsp;on user-provided content.</p>\n" +
                    "<h3 id=\"Attributes\"><a class=\"headerlink\" title=\"Attributes\" href=\"https://vuejs.org/v2/guide/syntax.html#Attributes\" data-scroll=\"\">Attributes</a></h3>\n" +
                    "<p>Mustaches cannot be used inside HTML attributes. Instead, use a&nbsp;<a href=\"https://vuejs.org/v2/api/#v-bind\">v-bind directive</a>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In the case of boolean attributes, where their mere existence implies&nbsp;<code>true</code>,&nbsp;<code>v-bind</code>works a little differently. In this example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"isButtonDisabled\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If&nbsp;<code>isButtonDisabled</code>&nbsp;has the value of&nbsp;<code>null</code>,&nbsp;<code>undefined</code>, or&nbsp;<code>false</code>, the&nbsp;<code>disabled</code>attribute will not even be included in the rendered&nbsp;<code>&lt;button&gt;</code>&nbsp;element.</p>\n" +
                    "<h3 id=\"Using-JavaScript-Expressions\"><a class=\"headerlink\" title=\"Using JavaScript Expressions\" href=\"https://vuejs.org/v2/guide/syntax.html#Using-JavaScript-Expressions\" data-scroll=\"\">Using JavaScript Expressions</a></h3>\n" +
                    "<p>So far we&rsquo;ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{{ number + 1 }}</span><br /><br /><span class=\"line\">{{ ok ? 'YES' : 'NO' }}</span><br /><br /><span class=\"line\">{{ message.split('').reverse().join('') }}</span><br /><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain&nbsp;<strong>one single expression</strong>, so the following will&nbsp;<strong>NOT</strong>&nbsp;work:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- this is a statement, not an expression: --&gt;</span></span><br /><span class=\"line\">{{ var a = 1 }}</span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- flow control won't work either, use ternary expressions --&gt;</span></span><br /><span class=\"line\">{{ if (ok) { return message } }}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p class=\"tip\">Template expressions are sandboxed and only have access to a whitelist of globals such as&nbsp;<code>Math</code>&nbsp;and&nbsp;<code>Date</code>. You should not attempt to access user defined globals in template expressions.</p>\n" +
                    "<h2 id=\"Directives\"><a class=\"headerlink\" title=\"Directives\" href=\"https://vuejs.org/v2/guide/syntax.html#Directives\" data-scroll=\"\">Directives</a></h2>\n" +
                    "<p>Directives are special attributes with the&nbsp;<code>v-</code>&nbsp;prefix. Directive attribute values are expected to be&nbsp;<strong>a single JavaScript expression</strong>&nbsp;(with the exception of&nbsp;<code>v-for</code>, which will be discussed later). A directive&rsquo;s job is to reactively apply side effects to the DOM when the value of its expression changes. Let&rsquo;s review the example we saw in the introduction:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>Now you see me<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Here, the&nbsp;<code>v-if</code>&nbsp;directive would remove/insert the&nbsp;<code>&lt;p&gt;</code>&nbsp;element based on the truthiness of the value of the expression&nbsp;<code>seen</code>.</p>\n" +
                    "<h3 id=\"Arguments\"><a class=\"headerlink\" title=\"Arguments\" href=\"https://vuejs.org/v2/guide/syntax.html#Arguments\" data-scroll=\"\">Arguments</a></h3>\n" +
                    "<p>Some directives can take an &ldquo;argument&rdquo;, denoted by a colon after the directive name. For example, the&nbsp;<code>v-bind</code>&nbsp;directive is used to reactively update an HTML attribute:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Here&nbsp;<code>href</code>&nbsp;is the argument, which tells the&nbsp;<code>v-bind</code>&nbsp;directive to bind the element&rsquo;s&nbsp;<code>href</code>&nbsp;attribute to the value of the expression&nbsp;<code>url</code>.</p>\n" +
                    "<p>Another example is the&nbsp;<code>v-on</code>&nbsp;directive, which listens to DOM events:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Here the argument is the event name to listen to. We will talk about event handling in more detail too.</p>\n" +
                    "<h3 id=\"Modifiers\"><a class=\"headerlink\" title=\"Modifiers\" href=\"https://vuejs.org/v2/guide/syntax.html#Modifiers\" data-scroll=\"\">Modifiers</a></h3>\n" +
                    "<p>Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the&nbsp;<code>.prevent</code>&nbsp;modifier tells the&nbsp;<code>v-on</code>directive to call&nbsp;<code>event.preventDefault()</code>&nbsp;on the triggered event:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You&rsquo;ll see other examples of modifiers later,&nbsp;<a href=\"https://vuejs.org/v2/guide/events.html#Event-Modifiers\">for&nbsp;<code>v-on</code></a>&nbsp;and&nbsp;<a href=\"https://vuejs.org/v2/guide/forms.html#Modifiers\">for&nbsp;<code>v-model</code></a>, when we explore those features.</p>\n" +
                    "<h2 id=\"Shorthands\"><a class=\"headerlink\" title=\"Shorthands\" href=\"https://vuejs.org/v2/guide/syntax.html#Shorthands\" data-scroll=\"\">Shorthands</a></h2>\n" +
                    "<p>The&nbsp;<code>v-</code>&nbsp;prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the&nbsp;<code>v-</code>&nbsp;prefix becomes less important when you are building a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\" rel=\"noopener\">SPA</a>where Vue.js manages every template. Therefore, Vue.js provides special shorthands for two of the most often used directives,&nbsp;<code>v-bind</code>&nbsp;and&nbsp;<code>v-on</code>:</p>\n" +
                    "<h3 id=\"v-bind-Shorthand\"><a class=\"headerlink\" title=\"v-bind Shorthand\" href=\"https://vuejs.org/v2/guide/syntax.html#v-bind-Shorthand\" data-scroll=\"\"><code>v-bind</code>&nbsp;Shorthand</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"v-on-Shorthand\"><a class=\"headerlink\" title=\"v-on Shorthand\" href=\"https://vuejs.org/v2/guide/syntax.html#v-on-Shorthand\" data-scroll=\"\"><code>v-on</code>&nbsp;Shorthand</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- full syntax --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>They may look a bit different from normal HTML, but&nbsp;<code>:</code>&nbsp;and&nbsp;<code>@</code>&nbsp;are valid chars for attribute names and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</p>");
            sec1Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec1Vue1);

            Section sec2Vue1 = new Section();
            sec2Vue1.setOrdinalNumber(2);
            sec2Vue1.setDescription("Computed Properties and Watchers");
            sec2Vue1.setContent("<p>In-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br /><span class=\"line\">  {{ message.split('').reverse().join('') }}</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>At this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays&nbsp;<code>message</code>&nbsp;in reverse. The problem is made worse when you want to include the reversed message in your template more than once.</p>\n" +
                    "<p>That&rsquo;s why for any complex logic, you should use a&nbsp;<strong>computed property</strong>.</p>\n" +
                    "<h3 id=\"Basic-Example\"><a class=\"headerlink\" title=\"Basic Example\" href=\"https://vuejs.org/v2/guide/computed.html#Basic-Example\" data-scroll=\"\">Basic Example</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: \"{{ message }}\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: \"{{ reversedMessage }}\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    <span class=\"comment\">// a computed getter</span></span><br /><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"comment\">// `this` points to the vm instance</span></span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<div id=\"example\" class=\"demo\">\n" +
                    "<p>Original message: \"Hello\"</p>\n" +
                    "<p>Computed reversed message: \"olleH\"</p>\n" +
                    "</div>\n" +
                    "<p>Here we have declared a computed property&nbsp;<code>reversedMessage</code>. The function we provided will be used as the getter function for the property&nbsp;<code>vm.reversedMessage</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; 'olleH'</span></span><br /><span class=\"line\">vm.message = <span class=\"string\">'Goodbye'</span></span><br /><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; 'eybdooG'</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can open the console and play with the example vm yourself. The value of&nbsp;<code>vm.reversedMessage</code>&nbsp;is always dependent on the value of&nbsp;<code>vm.message</code>.</p>\n" +
                    "<p>You can data-bind to computed properties in templates just like a normal property. Vue is aware that&nbsp;<code>vm.reversedMessage</code>&nbsp;depends on&nbsp;<code>vm.message</code>, so it will update any bindings that depend on&nbsp;<code>vm.reversedMessage</code>&nbsp;when&nbsp;<code>vm.message</code>&nbsp;changes. And the best part is that we&rsquo;ve created this dependency relationship declaratively: the computed getter function has no side effects, which makes it easier to test and understand.</p>\n" +
                    "<h3 id=\"Computed-Caching-vs-Methods\"><a class=\"headerlink\" title=\"Computed Caching vs Methods\" href=\"https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods\" data-scroll=\"\">Computed Caching vs Methods</a></h3>\n" +
                    "<p>You may have noticed we can achieve the same result by invoking a method in the expression:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: \"{{ reverseMessage() }}\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// in component</span></span><br /><span class=\"line\">methods: {</span><br /><span class=\"line\">  reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same. However, the difference is that&nbsp;<strong>computed properties are cached based on their dependencies.</strong>&nbsp;A computed property will only re-evaluate when some of its dependencies have changed. This means as long as&nbsp;<code>message</code>&nbsp;has not changed, multiple access to the&nbsp;<code>reversedMessage</code>&nbsp;computed property will immediately return the previously computed result without having to run the function again.</p>\n" +
                    "<p>This also means the following computed property will never update, because&nbsp;<code>Date.now()</code>&nbsp;is not a reactive dependency:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">computed: {</span><br /><span class=\"line\">  now: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In comparison, a method invocation will&nbsp;<strong>always</strong>&nbsp;run the function whenever a re-render happens.</p>\n" +
                    "<p>Why do we need caching? Imagine we have an expensive computed property&nbsp;<strong>A</strong>, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on&nbsp;<strong>A</strong>. Without caching, we would be executing&nbsp;<strong>A</strong>&rsquo;s getter many more times than necessary! In cases where you do not want caching, use a method instead.</p>\n" +
                    "<h3 id=\"Computed-vs-Watched-Property\"><a class=\"headerlink\" title=\"Computed vs Watched Property\" href=\"https://vuejs.org/v2/guide/computed.html#Computed-vs-Watched-Property\" data-scroll=\"\">Computed vs Watched Property</a></h3>\n" +
                    "<p>Vue does provide a more generic way to observe and react to data changes on a Vue instance:&nbsp;<strong>watch properties</strong>. When you have some data that needs to change based on some other data, it is tempting to overuse&nbsp;<code>watch</code>&nbsp;- especially if you are coming from an AngularJS background. However, it is often a better idea to use a computed property rather than an imperative&nbsp;<code>watch</code>&nbsp;callback. Consider this example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span>{{ fullName }}<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#demo'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br /><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span>,</span><br /><span class=\"line\">    fullName: <span class=\"string\">'Foo Bar'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  watch: {</span><br /><span class=\"line\">    firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = val + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br /><span class=\"line\">    },</span><br /><span class=\"line\">    lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.fullName = <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + val</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The above code is imperative and repetitive. Compare it with a computed property version:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#demo'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</span><br /><span class=\"line\">    lastName: <span class=\"string\">'Bar'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    fullName: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Much better, isn&rsquo;t it?</p>\n" +
                    "<h3 id=\"Computed-Setter\"><a class=\"headerlink\" title=\"Computed Setter\" href=\"https://vuejs.org/v2/guide/computed.html#Computed-Setter\" data-scroll=\"\">Computed Setter</a></h3>\n" +
                    "<p>Computed properties are by default getter-only, but you can also provide a setter when you need it:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br /><span class=\"line\">computed: {</span><br /><span class=\"line\">  fullName: {</span><br /><span class=\"line\">    <span class=\"comment\">// getter</span></span><br /><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br /><span class=\"line\">    },</span><br /><span class=\"line\">    <span class=\"comment\">// setter</span></span><br /><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><span class=\"line\"><span class=\"comment\">// ...</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now when you run&nbsp;<code>vm.fullName = 'John Doe'</code>, the setter will be invoked and&nbsp;<code>vm.firstName</code>&nbsp;and&nbsp;<code>vm.lastName</code>&nbsp;will be updated accordingly.</p>");
            sec2Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec2Vue1);

            Section sec3Vue1 = new Section();
            sec3Vue1.setOrdinalNumber(3);
            sec3Vue1.setDescription("Class and Style Bindings");
            sec3Vue1.setContent("<h2 id=\"Binding-HTML-Classes\"><a class=\"headerlink\" title=\"Binding HTML Classes\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Binding-HTML-Classes\" data-scroll=\"\">Binding HTML Classes</a></h2>\n" +
                    "<h3 id=\"Object-Syntax\"><a class=\"headerlink\" title=\"Object Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Object-Syntax\" data-scroll=\"\">Object Syntax</a></h3>\n" +
                    "<p>We can pass an object to&nbsp;<code>v-bind:class</code>&nbsp;to dynamically toggle classes:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The above syntax means the presence of the&nbsp;<code>active</code>&nbsp;class will be determined by the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener\">truthiness</a>&nbsp;of the data property&nbsp;<code>isActive</code>.</p>\n" +
                    "<p>You can have multiple classes toggled by having more fields in the object. In addition, the&nbsp;<code>v-bind:class</code>&nbsp;directive can also co-exist with the plain&nbsp;<code>class</code>&nbsp;attribute. So given the following template:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive, 'text-danger': hasError }\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>And the following data:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">  hasError: <span class=\"literal\">false</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It will render:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When&nbsp;<code>isActive</code>&nbsp;or&nbsp;<code>hasError</code>&nbsp;changes, the class list will be updated accordingly. For example, if&nbsp;<code>hasError</code>&nbsp;becomes&nbsp;<code>true</code>, the class list will become&nbsp;<code>\"static active text-danger\"</code>.</p>\n" +
                    "<p>The bound object doesn&rsquo;t have to be inline:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  classObject: {</span><br /><span class=\"line\">    active: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">    <span class=\"string\">'text-danger'</span>: <span class=\"literal\">false</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This will render the same result. We can also bind to a&nbsp;<a href=\"https://vuejs.org/v2/guide/computed.html\">computed property</a>&nbsp;that returns an object. This is a common and powerful pattern:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">  error: <span class=\"literal\">null</span></span><br /><span class=\"line\">},</span><br /><span class=\"line\">computed: {</span><br /><span class=\"line\">  classObject: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      active: <span class=\"keyword\">this</span>.isActive &amp;&amp; !<span class=\"keyword\">this</span>.error,</span><br /><span class=\"line\">      <span class=\"string\">'text-danger'</span>: <span class=\"keyword\">this</span>.error &amp;&amp; <span class=\"keyword\">this</span>.error.type === <span class=\"string\">'fatal'</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Array-Syntax\"><a class=\"headerlink\" title=\"Array Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Array-Syntax\" data-scroll=\"\">Array Syntax</a></h3>\n" +
                    "<p>We can pass an array to&nbsp;<code>v-bind:class</code>&nbsp;to apply a list of classes:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[activeClass, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  activeClass: <span class=\"string\">'active'</span>,</span><br /><span class=\"line\">  errorClass: <span class=\"string\">'text-danger'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Which will render:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? activeClass : '', errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This will always apply&nbsp;<code>errorClass</code>, but will only apply&nbsp;<code>activeClass</code>&nbsp;when&nbsp;<code>isActive</code>is truthy.</p>\n" +
                    "<p>However, this can be a bit verbose if you have multiple conditional classes. That&rsquo;s why it&rsquo;s also possible to use the object syntax inside array syntax:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[{ active: isActive }, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"With-Components\"><a class=\"headerlink\" title=\"With Components\" href=\"https://vuejs.org/v2/guide/class-and-style.html#With-Components\" data-scroll=\"\">With Components</a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>This section assumes knowledge of&nbsp;<a href=\"https://vuejs.org/v2/guide/components.html\">Vue Components</a>. Feel free to skip it and come back later.</p>\n" +
                    "</blockquote>\n" +
                    "<p>When you use the&nbsp;<code>class</code>&nbsp;attribute on a custom component, those classes will be added to the component&rsquo;s root element. Existing classes on this element will not be overwritten.</p>\n" +
                    "<p>For example, if you declare this component:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, {</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then add some classes when using it:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The rendered HTML will be:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The same is true for class bindings:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When&nbsp;<code>isActive</code>&nbsp;is truthy, the rendered HTML will be:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec3Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec3Vue1);

            Section sec4Vue1 = new Section();
            sec4Vue1.setOrdinalNumber(4);
            sec4Vue1.setDescription("Conditional Rendering");
            sec4Vue1.setContent("<h2 id=\"v-if\"><a class=\"headerlink\" title=\"v-if\" href=\"https://vuejs.org/v2/guide/conditional.html#v-if\" data-scroll=\"\"><code>v-if</code></a></h2>\n" +
                    "<p>In string templates, for example&nbsp;<a href=\"https://handlebarsjs.com/\" target=\"_blank\" rel=\"noopener\">Handlebars</a>, we would write a conditional block like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- Handlebars template --&gt;</span></span><br /><span class=\"line\">{{#if ok}}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">{{/if}}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In Vue, we use the&nbsp;<code>v-if</code>&nbsp;directive to achieve the same:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It is also possible to add an &ldquo;else block&rdquo; with&nbsp;<code>v-else</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Conditional-Groups-with-v-if-on-lt-template-gt\"><a class=\"headerlink\" style=\"text-decoration: none; color: #2c3e50; font-weight: 600; pointer-events: auto;\" title=\"Conditional Groups with v-if on &lt;template&gt;\" href=\"https://vuejs.org/v2/guide/conditional.html#Conditional-Groups-with-v-if-on-lt-template-gt\" data-scroll=\"\">Conditional Groups with&nbsp;<code>v-if</code>&nbsp;on&nbsp;<code>&lt;template&gt;</code></a></h3>\n" +
                    "<p>Because&nbsp;<code>v-if</code>&nbsp;is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use&nbsp;<code>v-if</code>&nbsp;on a&nbsp;<code>&lt;template&gt;</code>&nbsp;element, which serves as an invisible wrapper. The final rendered result will not include the&nbsp;<code>&lt;template&gt;</code>&nbsp;element.</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"v-else\"><a class=\"headerlink\" title=\"v-else\" href=\"https://vuejs.org/v2/guide/conditional.html#v-else\" data-scroll=\"\"><code>v-else</code></a></h3>\n" +
                    "<p>You can use the&nbsp;<code>v-else</code>&nbsp;directive to indicate an &ldquo;else block&rdquo; for&nbsp;<code>v-if</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></span><br /><span class=\"line\">  Now you see me</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  Now you don't</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>A&nbsp;<code>v-else</code>&nbsp;element must immediately follow a&nbsp;<code>v-if</code>&nbsp;or a&nbsp;<code>v-else-if</code>&nbsp;element - otherwise it will not be recognized.</p>\n" +
                    "<h3 id=\"v-else-if\"><a class=\"headerlink\" title=\"v-else-if\" href=\"https://vuejs.org/v2/guide/conditional.html#v-else-if\" data-scroll=\"\"><code>v-else-if</code></a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.1.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>The&nbsp;<code>v-else-if</code>, as the name suggests, serves as an &ldquo;else if block&rdquo; for&nbsp;<code>v-if</code>. It can also be chained multiple times:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br /><span class=\"line\">  A</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br /><span class=\"line\">  B</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br /><span class=\"line\">  C</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  Not A/B/C</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Similar to&nbsp;<code>v-else</code>, a&nbsp;<code>v-else-if</code>&nbsp;element must immediately follow a&nbsp;<code>v-if</code>&nbsp;or a&nbsp;<code>v-else-if</code>&nbsp;element.</p>\n" +
                    "<h3 id=\"Controlling-Reusable-Elements-with-key\"><a class=\"headerlink\" title=\"Controlling Reusable Elements with key\" href=\"https://vuejs.org/v2/guide/conditional.html#Controlling-Reusable-Elements-with-key\" data-scroll=\"\">Controlling Reusable Elements with&nbsp;<code>key</code></a></h3>\n" +
                    "<p>Vue tries to render elements as efficiently as possible, often re-using them instead of rendering from scratch. Beyond helping make Vue very fast, this can have some useful advantages. For example, if you allow users to toggle between multiple login types:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then switching the&nbsp;<code>loginType</code>&nbsp;in the code above will not erase what the user has already entered. Since both templates use the same elements, the&nbsp;<code>&lt;input&gt;</code>&nbsp;is not replaced - just its&nbsp;<code>placeholder</code>.</p>\n" +
                    "<p>Check it out for yourself by entering some text in the input, then pressing the toggle button:</p>\n" +
                    "<div id=\"no-key-example\" class=\"demo\">\n" +
                    "<div><label>Username</label>&nbsp;<input type=\"text\" placeholder=\"Enter your username\" /></div>\n" +
                    "<button>Toggle login type</button></div>\n" +
                    "<p>This isn&rsquo;t always desirable though, so Vue offers a way for you to say, &ldquo;These two elements are completely separate - don&rsquo;t re-use them.&rdquo; Add a&nbsp;<code>key</code>&nbsp;attribute with unique values:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"username-input\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"email-input\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now those inputs will be rendered from scratch each time you toggle. See for yourself:</p>\n" +
                    "<div id=\"key-example\" class=\"demo\">\n" +
                    "<div><label>Username</label>&nbsp;<input type=\"text\" placeholder=\"Enter your username\" /></div>\n" +
                    "<button>Toggle login type</button></div>\n" +
                    "<p>Note that the&nbsp;<code>&lt;label&gt;</code>&nbsp;elements are still efficiently re-used, because they don&rsquo;t have&nbsp;<code>key</code>&nbsp;attributes.</p>\n" +
                    "<h2 id=\"v-show\"><a class=\"headerlink\" title=\"v-show\" href=\"https://vuejs.org/v2/guide/conditional.html#v-show\" data-scroll=\"\"><code>v-show</code></a></h2>\n" +
                    "<p>Another option for conditionally displaying an element is the&nbsp;<code>v-show</code>&nbsp;directive. The usage is largely the same:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The difference is that an element with&nbsp;<code>v-show</code>&nbsp;will always be rendered and remain in the DOM;&nbsp;<code>v-show</code>&nbsp;only toggles the&nbsp;<code>display</code>&nbsp;CSS property of the element.</p>\n" +
                    "<p class=\"tip\">Note that&nbsp;<code>v-show</code>&nbsp;doesn&rsquo;t support the&nbsp;<code>&lt;template&gt;</code>&nbsp;element, nor does it work with&nbsp;<code>v-else</code>.</p>\n" +
                    "<h2 id=\"v-if-vs-v-show\"><a class=\"headerlink\" title=\"v-if vs v-show\" href=\"https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show\" data-scroll=\"\"><code>v-if</code>&nbsp;vs&nbsp;<code>v-show</code></a></h2>\n" +
                    "<p><code>v-if</code>&nbsp;is &ldquo;real&rdquo; conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.</p>\n" +
                    "<p><code>v-if</code>&nbsp;is also&nbsp;<strong>lazy</strong>: if the condition is false on initial render, it will not do anything - the conditional block won&rsquo;t be rendered until the condition becomes true for the first time.</p>\n" +
                    "<p>In comparison,&nbsp;<code>v-show</code>&nbsp;is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.</p>\n" +
                    "<p>Generally speaking,&nbsp;<code>v-if</code>&nbsp;has higher toggle costs while&nbsp;<code>v-show</code>&nbsp;has higher initial render costs. So prefer&nbsp;<code>v-show</code>&nbsp;if you need to toggle something very often, and prefer&nbsp;<code>v-if</code>&nbsp;if the condition is unlikely to change at runtime.</p>\n" +
                    "<h2 id=\"v-if-with-v-for\"><a class=\"headerlink\" title=\"v-if with v-for\" href=\"https://vuejs.org/v2/guide/conditional.html#v-if-with-v-for\" data-scroll=\"\"><code>v-if</code>&nbsp;with&nbsp;<code>v-for</code></a></h2>\n" +
                    "<p class=\"tip\">Using&nbsp;<code>v-if</code>&nbsp;and&nbsp;<code>v-for</code>&nbsp;together is&nbsp;<strong>not recommended</strong>. See the&nbsp;<a href=\"https://vuejs.org/v2/style-guide/#Avoid-v-if-with-v-for-essential\">style guide</a>&nbsp;for further information.</p>\n" +
                    "<p>When used together with&nbsp;<code>v-if</code>,&nbsp;<code>v-for</code>&nbsp;has a higher priority than&nbsp;<code>v-if</code>. See the&nbsp;<a href=\"https://vuejs.org/v2/guide/list.html#V-for-and-v-if\">list rendering guide</a>&nbsp;for details.</p>");
            sec4Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec4Vue1);

            Section sec5Vue1 = new Section();
            sec5Vue1.setOrdinalNumber(5);
            sec5Vue1.setDescription("Component Registration");
            sec5Vue1.setContent("<h2 id=\"Component-Names\"><a class=\"headerlink\" title=\"Component Names\" href=\"https://vuejs.org/v2/guide/components-registration.html#Component-Names\" data-scroll=\"\">Component Names</a></h2>\n" +
                    "<p>When registering a component, it will always be given a name. For example, in the global registration we&rsquo;ve seen so far:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, { <span class=\"comment\">/* ... */</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The component&rsquo;s name is the first argument of&nbsp;<code>Vue.component</code>.</p>\n" +
                    "<p>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or&nbsp;<a href=\"https://vuejs.org/v2/guide/single-file-components.html\">single-file component</a>), we strongly recommend following the&nbsp;<a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\" target=\"_blank\" rel=\"noopener\">W3C rules</a>&nbsp;for custom tag names (all-lowercase, must contain a hyphen). This helps you avoid conflicts with current and future HTML elements.</p>\n" +
                    "<p>You can see other recommendations for component names in the&nbsp;<a href=\"https://vuejs.org/v2/style-guide/#Base-component-names-strongly-recommended\">Style Guide</a>.</p>\n" +
                    "<h3 id=\"Name-Casing\"><a class=\"headerlink\" title=\"Name Casing\" href=\"https://vuejs.org/v2/guide/components-registration.html#Name-Casing\" data-scroll=\"\">Name Casing</a></h3>\n" +
                    "<p>You have two options when defining component names:</p>\n" +
                    "<h4 id=\"With-kebab-case\">With kebab-case</h4>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, { <span class=\"comment\">/* ... */</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When defining a component with kebab-case, you must also use kebab-case when referencing its custom element, such as in&nbsp;<code>&lt;my-component-name&gt;</code>.</p>\n" +
                    "<h4 id=\"With-PascalCase\">With PascalCase</h4>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'MyComponentName'</span>, { <span class=\"comment\">/* ... */</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When defining a component with PascalCase, you can use either case when referencing its custom element. That means both&nbsp;<code>&lt;my-component-name&gt;</code>&nbsp;and&nbsp;<code>&lt;MyComponentName&gt;</code>are acceptable. Note, however, that only kebab-case names are valid directly in the DOM (i.e. non-string templates).</p>\n" +
                    "<h2 id=\"Global-Registration\"><a class=\"headerlink\" title=\"Global Registration\" href=\"https://vuejs.org/v2/guide/components-registration.html#Global-Registration\" data-scroll=\"\">Global Registration</a></h2>\n" +
                    "<p>So far, we&rsquo;ve only created components using&nbsp;<code>Vue.component</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, {</span><br /><span class=\"line\">  <span class=\"comment\">// ... options ...</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>These components are&nbsp;<strong>globally registered</strong>. That means they can be used in the template of any root Vue instance (<code>new Vue</code>) created after registration. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'component-a'</span>, { <span class=\"comment\">/* ... */</span> })</span><br /><span class=\"line\">Vue.component(<span class=\"string\">'component-b'</span>, { <span class=\"comment\">/* ... */</span> })</span><br /><span class=\"line\">Vue.component(<span class=\"string\">'component-c'</span>, { <span class=\"comment\">/* ... */</span> })</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({ <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-b</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-c</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-c</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This even applies to all subcomponents, meaning all three of these components will also be available&nbsp;<em>inside each other</em>.</p>\n" +
                    "<h2 id=\"Local-Registration\"><a class=\"headerlink\" title=\"Local Registration\" href=\"https://vuejs.org/v2/guide/components-registration.html#Local-Registration\" data-scroll=\"\">Local Registration</a></h2>\n" +
                    "<p>Global registration often isn&rsquo;t ideal. For example, if you&rsquo;re using a build system like Webpack, globally registering all components means that even if you stop using a component, it could still be included in your final build. This unnecessarily increases the amount of JavaScript your users have to download.</p>\n" +
                    "<p>In these cases, you can define your components as plain JavaScript objects:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = { <span class=\"comment\">/* ... */</span> }</span><br /><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = { <span class=\"comment\">/* ... */</span> }</span><br /><span class=\"line\"><span class=\"keyword\">var</span> ComponentC = { <span class=\"comment\">/* ... */</span> }</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then define the components you&rsquo;d like to use in a&nbsp;<code>components</code>&nbsp;option:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br /><span class=\"line\">  components: {</span><br /><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA,</span><br /><span class=\"line\">    <span class=\"string\">'component-b'</span>: ComponentB</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>For each property in the&nbsp;<code>components</code>&nbsp;object, the key will be the name of the custom element, while the value will contain the options object for the component.</p>\n" +
                    "<p>Note that&nbsp;<strong>locally registered components are&nbsp;<em>not</em>&nbsp;also available in subcomponents</strong>. For example, if you wanted&nbsp;<code>ComponentA</code>&nbsp;to be available in&nbsp;<code>ComponentB</code>, you&rsquo;d have to use:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = { <span class=\"comment\">/* ... */</span> }</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = {</span><br /><span class=\"line\">  components: {</span><br /><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Or if you&rsquo;re using ES2015 modules, such as through Babel and Webpack, that might look more like:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> ComponentA <span class=\"keyword\">from</span> <span class=\"string\">'./ComponentA.vue'</span></span><br /><br /><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br /><span class=\"line\">  components: {</span><br /><span class=\"line\">    ComponentA</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Note that in ES2015+, placing a variable name like&nbsp;<code>ComponentA</code>&nbsp;inside an object is shorthand for&nbsp;<code>ComponentA: ComponentA</code>, meaning the name of the variable is both:</p>\n" +
                    "<ul>\n" +
                    "<li>the custom element name to use in the template, and</li>\n" +
                    "<li>the name of the variable containing the component options</li>\n" +
                    "</ul>");
            sec5Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec5Vue1);

            Section sec6Vue1 = new Section();
            sec6Vue1.setOrdinalNumber(6);
            sec6Vue1.setDescription("Props");
            sec6Vue1.setContent("Prop Casing (camelCase vs kebab-case)\n" +
                    "HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you’re using in-DOM templates, camelCased prop names need to use their kebab-cased (hyphen-delimited) equivalents:\n" +
                    "\n" +
                    "Vue.component('blog-post', {\n" +
                    "  // camelCase in JavaScript\n" +
                    "  props: ['postTitle'],\n" +
                    "  template: '<h3>{{ postTitle }}</h3>'\n" +
                    "})\n" +
                    "<!-- kebab-case in HTML -->\n" +
                    "<blog-post post-title=\"hello!\"></blog-post>\n" +
                    "Again, if you’re using string templates, this limitation does not apply.\n" +
                    "\n" +
                    "Prop Types\n" +
                    "So far, we’ve only seen props listed as an array of strings:\n" +
                    "\n" +
                    "props: ['title', 'likes', 'isPublished', 'commentIds', 'author']\n" +
                    "Usually though, you’ll want every prop to be a specific type of value. In these cases, you can list props as an object, where the properties’ names and values contain the prop names and types, respectively:\n" +
                    "\n" +
                    "props: {\n" +
                    "  title: String,\n" +
                    "  likes: Number,\n" +
                    "  isPublished: Boolean,\n" +
                    "  commentIds: Array,\n" +
                    "  author: Object\n" +
                    "}\n" +
                    "This not only documents your component, but will also warn users in the browser’s JavaScript console if they pass the wrong type. You’ll learn much more about type checks and other prop validations further down this page.\n" +
                    "\n" +
                    "Passing Static or Dynamic Props\n" +
                    "So far, you’ve seen props passed a static value, like in:\n" +
                    "\n" +
                    "<blog-post title=\"My journey with Vue\"></blog-post>\n" +
                    "You’ve also seen props assigned dynamically with v-bind, such as in:\n" +
                    "\n" +
                    "<!-- Dynamically assign the value of a variable -->\n" +
                    "<blog-post v-bind:title=\"post.title\"></blog-post>\n" +
                    "\n" +
                    "<!-- Dynamically assign the value of a complex expression -->\n" +
                    "<blog-post v-bind:title=\"post.title + ' by ' + post.author.name\"></blog-post>\n" +
                    "In the two examples above, we happen to pass string values, but any type of value can actually be passed to a prop.\n" +
                    "\n" +
                    "Passing a Number\n" +
                    "<!-- Even though `42` is static, we need v-bind to tell Vue that -->\n" +
                    "<!-- this is a JavaScript expression rather than a string.       -->\n" +
                    "<blog-post v-bind:likes=\"42\"></blog-post>\n" +
                    "\n" +
                    "<!-- Dynamically assign to the value of a variable. -->\n" +
                    "<blog-post v-bind:likes=\"post.likes\"></blog-post>\n" +
                    "Passing a Boolean\n" +
                    "<!-- Including the prop with no value will imply `true`. -->\n" +
                    "<blog-post is-published></blog-post>\n" +
                    "\n" +
                    "<!-- Even though `false` is static, we need v-bind to tell Vue that -->\n" +
                    "<!-- this is a JavaScript expression rather than a string.          -->\n" +
                    "<blog-post v-bind:is-published=\"false\"></blog-post>\n" +
                    "\n" +
                    "<!-- Dynamically assign to the value of a variable. -->\n" +
                    "<blog-post v-bind:is-published=\"post.isPublished\"></blog-post>\n" +
                    "Passing an Array\n" +
                    "<!-- Even though the array is static, we need v-bind to tell Vue that -->\n" +
                    "<!-- this is a JavaScript expression rather than a string.            -->\n" +
                    "<blog-post v-bind:comment-ids=\"[234, 266, 273]\"></blog-post>\n" +
                    "\n" +
                    "<!-- Dynamically assign to the value of a variable. -->\n" +
                    "<blog-post v-bind:comment-ids=\"post.commentIds\"></blog-post>\n" +
                    "Passing an Object\n" +
                    "<!-- Even though the object is static, we need v-bind to tell Vue that -->\n" +
                    "<!-- this is a JavaScript expression rather than a string.             -->\n" +
                    "<blog-post v-bind:author=\"{ name: 'Veronica', company: 'Veridian Dynamics' }\"></blog-post>\n" +
                    "\n" +
                    "<!-- Dynamically assign to the value of a variable. -->\n" +
                    "<blog-post v-bind:author=\"post.author\"></blog-post>\n" +
                    "Passing the Properties of an Object\n" +
                    "If you want to pass all the properties of an object as props, you can use v-bind without an argument (v-bind instead of v-bind:prop-name). For example, given a post object:\n" +
                    "\n" +
                    "post: {\n" +
                    "  id: 1,\n" +
                    "  title: 'My Journey with Vue'\n" +
                    "}\n" +
                    "The following template:\n" +
                    "\n" +
                    "<blog-post v-bind=\"post\"></blog-post>\n" +
                    "Will be equivalent to:\n" +
                    "\n" +
                    "<blog-post\n" +
                    "  v-bind:id=\"post.id\"\n" +
                    "  v-bind:title=\"post.title\"\n" +
                    "></blog-post>");
            sec6Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec6Vue1);

            Section sec7Vue1 = new Section();
            sec7Vue1.setOrdinalNumber(7);
            sec7Vue1.setDescription("Custom Events");
            sec7Vue1.setContent("<h2 id=\"Event-Names\"><a class=\"headerlink\" title=\"Event Names\" href=\"https://vuejs.org/v2/guide/components-custom-events.html#Event-Names\" data-scroll=\"\">Event Names</a></h2>\n" +
                    "<p>Unlike components and props, event names don&rsquo;t provide any automatic case transformation. Instead, the name of an emitted event must exactly match the name used to listen to that event. For example, if emitting a camelCased event name:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'myEvent'</span>)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Listening to the kebab-cased version will have no effect:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:my-event</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Unlike components and props, event names will never be used as variable or property names in JavaScript, so there&rsquo;s no reason to use camelCase or PascalCase. Additionally,&nbsp;<code>v-on</code>&nbsp;event listeners inside DOM templates will be automatically transformed to lowercase (due to HTML&rsquo;s case-insensitivity), so&nbsp;<code>v-on:myEvent</code>&nbsp;would become&nbsp;<code>v-on:myevent</code>&nbsp;&ndash; making&nbsp;<code>myEvent</code>&nbsp;impossible to listen to.</p>\n" +
                    "<p>For these reasons, we recommend you&nbsp;<strong>always use kebab-case for event names</strong>.</p>\n" +
                    "<h2 id=\"Customizing-Component-v-model\"><a class=\"headerlink\" title=\"Customizing Component v-model\" href=\"https://vuejs.org/v2/guide/components-custom-events.html#Customizing-Component-v-model\" data-scroll=\"\">Customizing Component&nbsp;<code>v-model</code></a></h2>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.2.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>By default,&nbsp;<code>v-model</code>&nbsp;on a component uses&nbsp;<code>value</code>&nbsp;as the prop and&nbsp;<code>input</code>&nbsp;as the event, but some input types such as checkboxes and radio buttons may want to use the&nbsp;<code>value</code>&nbsp;attribute for a&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value\" target=\"_blank\" rel=\"noopener\">different purpose</a>. Using the&nbsp;<code>model</code>&nbsp;option can avoid a conflict in such cases:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'base-checkbox'</span>, {</span><br /><span class=\"line\">  model: {</span><br /><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br /><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  props: {</span><br /><span class=\"line\">    checked: <span class=\"built_in\">Boolean</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  template: <span class=\"string\">`</span></span><br /><span class=\"line\"><span class=\"string\">    &lt;input</span></span><br /><span class=\"line\"><span class=\"string\">      type=\"checkbox\"</span></span><br /><span class=\"line\"><span class=\"string\">      v-bind:checked=\"checked\"</span></span><br /><span class=\"line\"><span class=\"string\">      v-on:change=\"$emit('change', $event.target.checked)\"</span></span><br /><span class=\"line\"><span class=\"string\">    &gt;</span></span><br /><span class=\"line\"><span class=\"string\">  `</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now when using&nbsp;<code>v-model</code>&nbsp;on this component:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"lovingVue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-checkbox</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>the value of&nbsp;<code>lovingVue</code>&nbsp;will be passed to the&nbsp;<code>checked</code>&nbsp;prop. The&nbsp;<code>lovingVue</code>&nbsp;property will then be updated when&nbsp;<code>&lt;base-checkbox&gt;</code>&nbsp;emits a&nbsp;<code>change</code>&nbsp;event with a new value.</p>\n" +
                    "<p class=\"tip\">Note that you still have to declare the&nbsp;<code>checked</code>&nbsp;prop in component&rsquo;s&nbsp;<code>props</code>option.</p>\n" +
                    "<h2 id=\"Binding-Native-Events-to-Components\"><a class=\"headerlink\" title=\"Binding Native Events to Components\" href=\"https://vuejs.org/v2/guide/components-custom-events.html#Binding-Native-Events-to-Components\" data-scroll=\"\">Binding Native Events to Components</a></h2>\n" +
                    "<p>There may be times when you want to listen directly to a native event on the root element of a component. In these cases, you can use the&nbsp;<code>.native</code>&nbsp;modifier for&nbsp;<code>v-on</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">v-on:focus.native</span>=<span class=\"string\">\"onFocus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This can be useful sometimes, but it&rsquo;s not a good idea when you&rsquo;re trying to listen on a very specific element, like an&nbsp;<code>&lt;input&gt;</code>. For example, the&nbsp;<code>&lt;base-input&gt;</code>&nbsp;component above might refactor so that the root element is actually a&nbsp;<code>&lt;label&gt;</code>&nbsp;element:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  {{ label }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"value\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"$emit('input', $event.target.value)\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In that case, the&nbsp;<code>.native</code>&nbsp;listener in the parent would silently break. There would be no errors, but the&nbsp;<code>onFocus</code>&nbsp;handler wouldn&rsquo;t be called when we expected it to.</p>\n" +
                    "<p>To solve this problem, Vue provides a&nbsp;<code>$listeners</code>&nbsp;property containing an object of listeners being used on the component. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{</span><br /><span class=\"line\">  focus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{ <span class=\"comment\">/* ... */</span> }</span><br /><span class=\"line\">  input: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>{ <span class=\"comment\">/* ... */</span> },</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Using the&nbsp;<code>$listeners</code>&nbsp;property, you can forward all event listeners on the component to a specific child element with&nbsp;<code>v-on=\"$listeners\"</code>. For elements like&nbsp;<code>&lt;input&gt;</code>, that you also want to work with&nbsp;<code>v-model</code>, it&rsquo;s often useful to create a new computed property for listeners, like&nbsp;<code>inputListeners</code>&nbsp;below:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'base-input'</span>, {</span><br /><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br /><span class=\"line\">  props: [<span class=\"string\">'label'</span>, <span class=\"string\">'value'</span>],</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    inputListeners: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br /><span class=\"line\">      <span class=\"comment\">// `Object.assign` merges objects together to form a new object</span></span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign({},</span><br /><span class=\"line\">        <span class=\"comment\">// We add all the listeners from the parent</span></span><br /><span class=\"line\">        <span class=\"keyword\">this</span>.$listeners,</span><br /><span class=\"line\">        <span class=\"comment\">// Then we can add custom listeners or override the</span></span><br /><span class=\"line\">        <span class=\"comment\">// behavior of some listeners.</span></span><br /><span class=\"line\">        {</span><br /><span class=\"line\">          <span class=\"comment\">// This ensures that the component works with v-model</span></span><br /><span class=\"line\">          input: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span><br /><span class=\"line\">            vm.$emit(<span class=\"string\">'input'</span>, event.target.value)</span><br /><span class=\"line\">          }</span><br /><span class=\"line\">        }</span><br /><span class=\"line\">      )</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  template: <span class=\"string\">`</span></span><br /><span class=\"line\"><span class=\"string\">    &lt;label&gt;</span></span><br /><span class=\"line\"><span class=\"string\">      {{ label }}</span></span><br /><span class=\"line\"><span class=\"string\">      &lt;input</span></span><br /><span class=\"line\"><span class=\"string\">        v-bind=\"$attrs\"</span></span><br /><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"</span></span><br /><span class=\"line\"><span class=\"string\">        v-on=\"inputListeners\"</span></span><br /><span class=\"line\"><span class=\"string\">      &gt;</span></span><br /><span class=\"line\"><span class=\"string\">    &lt;/label&gt;</span></span><br /><span class=\"line\"><span class=\"string\">  `</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now the&nbsp;<code>&lt;base-input&gt;</code>&nbsp;component is a&nbsp;<strong>fully transparent wrapper</strong>, meaning it can be used exactly like a normal&nbsp;<code>&lt;input&gt;</code>&nbsp;element: all the same attributes and listeners will work, without the&nbsp;<code>.native</code>&nbsp;modifier.</p>\n" +
                    "<h2 id=\"sync-Modifier\"><a class=\"headerlink\" title=\".sync Modifier\" href=\"https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier\" data-scroll=\"\"><code>.sync</code>&nbsp;Modifier</a></h2>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.3.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>In some cases, we may need &ldquo;two-way binding&rdquo; for a prop. Unfortunately, true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child.</p>\n" +
                    "<p>That&rsquo;s why instead, we recommend emitting events in the pattern of&nbsp;<code>update:myPropName</code>. For example, in a hypothetical component with a&nbsp;<code>title</code>&nbsp;prop, we could communicate the intent of assigning a new value with:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:title'</span>, newTitle)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then the parent can listen to that event and update a local data property, if it wants to. For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span></span></span><br /><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"doc.title\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:update:title</span>=<span class=\"string\">\"doc.title = $event\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>For convenience, we offer a shorthand for this pattern with the&nbsp;<code>.sync</code>&nbsp;modifier:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind:title.sync</span>=<span class=\"string\">\"doc.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p class=\"tip\">Note that&nbsp;<code>v-bind</code>&nbsp;with the&nbsp;<code>.sync</code>&nbsp;modifier does&nbsp;<strong>not</strong>&nbsp;work with expressions (e.g.&nbsp;<code>v-bind:title.sync=&rdquo;doc.title + &lsquo;!&rsquo;&rdquo;</code>&nbsp;is invalid). Instead, you must only provide the name of the property you want to bind, similar to&nbsp;<code>v-model</code>.</p>\n" +
                    "<p>The&nbsp;<code>.sync</code>&nbsp;modifier can also be used with&nbsp;<code>v-bind</code>&nbsp;when using an object to set multiple props at once:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind.sync</span>=<span class=\"string\">\"doc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This passes each property in the&nbsp;<code>doc</code>&nbsp;object (e.g.&nbsp;<code>title</code>) as an individual prop, then adds&nbsp;<code>v-on</code>&nbsp;update listeners for each one.</p>\n" +
                    "<p class=\"tip\">Using&nbsp;<code>v-bind.sync</code>&nbsp;with a literal object, such as in&nbsp;<code>v-bind.sync=&rdquo;{ title: doc.title }&rdquo;</code>, will not work, because there are too many edge cases to consider in parsing a complex expression like this.</p>");
            sec7Vue1.setLesson(vueJsLesson1);
            vueJsLesson1.getSections().add(sec7Vue1);

            Section sec1Vue2 = new Section();
            sec1Vue2.setOrdinalNumber(1);
            sec1Vue2.setDescription("Production Deployment");
            sec1Vue2.setContent("<h2 id=\"Turn-on-Production-Mode\"><a class=\"headerlink\" title=\"Turn on Production Mode\" href=\"https://vuejs.org/v2/guide/deployment.html#Turn-on-Production-Mode\" data-scroll=\"\">Turn on Production Mode</a></h2>\n" +
                    "<p>During development, Vue provides a lot of warnings to help you with common errors and pitfalls. However, these warning strings become useless in production and bloat your app&rsquo;s payload size. In addition, some of these warning checks have small runtime costs that can be avoided in production mode.</p>\n" +
                    "<h3 id=\"Without-Build-Tools\"><a class=\"headerlink\" title=\"Without Build Tools\" href=\"https://vuejs.org/v2/guide/deployment.html#Without-Build-Tools\" data-scroll=\"\">Without Build Tools</a></h3>\n" +
                    "<p>If you are using the full build, i.e. directly including Vue via a script tag without a build tool, make sure to use the minified version (<code>vue.min.js</code>) for production. Both versions can be found in the&nbsp;<a href=\"https://vuejs.org/v2/guide/installation.html#Direct-lt-script-gt-Include\">Installation guide</a>.</p>\n" +
                    "<h3 id=\"With-Build-Tools\"><a class=\"headerlink\" title=\"With Build Tools\" href=\"https://vuejs.org/v2/guide/deployment.html#With-Build-Tools\" data-scroll=\"\">With Build Tools</a></h3>\n" +
                    "<p>When using a build tool like Webpack or Browserify, the production mode will be determined by&nbsp;<code>process.env.NODE_ENV</code>&nbsp;inside Vue&rsquo;s source code, and it will be in development mode by default. Both build tools provide ways to overwrite this variable to enable Vue&rsquo;s production mode, and warnings will be stripped by minifiers during the build. All&nbsp;<code>vue-cli</code>&nbsp;templates have these pre-configured for you, but it would be beneficial to know how it is done:</p>\n" +
                    "<h4 id=\"Webpack\">Webpack</h4>\n" +
                    "<p>In Webpack 4+, you can use the&nbsp;<code>mode</code>&nbsp;option:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br /><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>But in Webpack 3 and earlier, you&rsquo;ll need to use&nbsp;<a href=\"https://webpack.js.org/plugins/define-plugin/\" target=\"_blank\" rel=\"noopener\">DefinePlugin</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br /><br /><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">  plugins: [</span><br /><span class=\"line\">    <span class=\"comment\">// ...</span></span><br /><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin({</span><br /><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br /><span class=\"line\">    })</span><br /><span class=\"line\">  ]</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h4 id=\"Browserify\">Browserify</h4>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p>Run your bundling command with the actual&nbsp;<code>NODE_ENV</code>&nbsp;environment variable set to&nbsp;<code>\"production\"</code>. This tells&nbsp;<code>vueify</code>&nbsp;to avoid including hot-reload and development related code.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Apply a global&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;transform to your bundle. This allows the minifier to strip out all the warnings in Vue&rsquo;s source code wrapped in env variable conditional blocks. For example:</p>\n" +
                    "<figure class=\"highlight bash\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">NODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m &gt; build.js</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Or, using&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;with Gulp:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Use the envify custom module to specify environment variables</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> envify = <span class=\"built_in\">require</span>(<span class=\"string\">'envify/custom'</span>)</span><br /><br /><span class=\"line\">browserify(browserifyOptions)</span><br /><span class=\"line\">  .transform(vueify)</span><br /><span class=\"line\">  .transform(</span><br /><span class=\"line\">    <span class=\"comment\">// Required in order to process node_modules files</span></span><br /><span class=\"line\">    { <span class=\"attr\">global</span>: <span class=\"literal\">true</span> },</span><br /><span class=\"line\">    envify({ <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'production'</span> })</span><br /><span class=\"line\">  )</span><br /><span class=\"line\">  .bundle()</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Or, using&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;with Grunt and&nbsp;<a href=\"https://github.com/jmreidy/grunt-browserify\" target=\"_blank\" rel=\"noopener\">grunt-browserify</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Use the envify custom module to specify environment variables</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> envify = <span class=\"built_in\">require</span>(<span class=\"string\">'envify/custom'</span>)</span><br /><br /><span class=\"line\">browserify: {</span><br /><span class=\"line\">  dist: {</span><br /><span class=\"line\">    options: {</span><br /><span class=\"line\">      <span class=\"comment\">// Function to deviate from grunt-browserify's default order</span></span><br /><span class=\"line\">      configure: <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b</span><br /><span class=\"line\">        .transform(<span class=\"string\">'vueify'</span>)</span><br /><span class=\"line\">        .transform(</span><br /><span class=\"line\">          <span class=\"comment\">// Required in order to process node_modules files</span></span><br /><span class=\"line\">          { <span class=\"attr\">global</span>: <span class=\"literal\">true</span> },</span><br /><span class=\"line\">          envify({ <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'production'</span> })</span><br /><span class=\"line\">        )</span><br /><span class=\"line\">        .bundle()</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<h4 id=\"Rollup\">Rollup</h4>\n" +
                    "<p>Use&nbsp;<a href=\"https://github.com/rollup/rollup-plugin-replace\" target=\"_blank\" rel=\"noopener\">rollup-plugin-replace</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">'rollup-plugin-replace'</span>)</span><br /><br /><span class=\"line\">rollup({</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">  plugins: [</span><br /><span class=\"line\">    replace({</span><br /><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify( <span class=\"string\">'production'</span> )</span><br /><span class=\"line\">    })</span><br /><span class=\"line\">  ]</span><br /><span class=\"line\">}).then(...)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Pre-Compiling-Templates\"><a class=\"headerlink\" title=\"Pre-Compiling Templates\" href=\"https://vuejs.org/v2/guide/deployment.html#Pre-Compiling-Templates\" data-scroll=\"\">Pre-Compiling Templates</a></h2>\n" +
                    "<p>When using in-DOM templates or in-JavaScript template strings, the template-to-render-function compilation is performed on the fly. This is usually fast enough in most cases, but is best avoided if your application is performance-sensitive.</p>\n" +
                    "<p>The easiest way to pre-compile templates is using&nbsp;<a href=\"https://vuejs.org/v2/guide/single-file-components.html\">Single-File Components</a>&nbsp;- the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</p>\n" +
                    "<p>If you are using Webpack, and prefer separating JavaScript and template files, you can use&nbsp;<a href=\"https://github.com/ktsn/vue-template-loader\" target=\"_blank\" rel=\"noopener\">vue-template-loader</a>, which also transforms the template files into JavaScript render functions during the build step.</p>");
            sec1Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec1Vue2);

            Section sec2Vue2 = new Section();
            sec2Vue2.setOrdinalNumber(2);
            sec2Vue2.setDescription("Single File Components");
            sec2Vue2.setContent("<p>In many Vue projects, global components will be defined using&nbsp;<code>Vue.component</code>, followed by&nbsp;<code>new Vue({ el: '#container' })</code>&nbsp;to target a container element in the body of every page.</p>\n" +
                    "<p>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</p>\n" +
                    "<ul>\n" +
                    "<li><strong>Global definitions</strong>&nbsp;force unique names for every component</li>\n" +
                    "<li><strong>String templates</strong>&nbsp;lack syntax highlighting and require ugly slashes for multiline HTML</li>\n" +
                    "<li><strong>No CSS support</strong>&nbsp;means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</li>\n" +
                    "<li><strong>No build step</strong>&nbsp;restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</li>\n" +
                    "</ul>\n" +
                    "<p>All of these are solved by&nbsp;<strong>single-file components</strong>&nbsp;with a&nbsp;<code>.vue</code>&nbsp;extension, made possible with build tools such as Webpack or Browserify.</p>\n" +
                    "<p>Here&rsquo;s an example of a file we&rsquo;ll call&nbsp;<code>Hello.vue</code>:</p>\n" +
                    "<p><a href=\"https://gist.github.com/chrisvfritz/e2b6a6110e0829d78fa4aedf7cf6b235\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://vuejs.org/images/vue-component.png\" alt=\"Single-file component example (click for code as text)\" /></a></p>\n" +
                    "<p>Now we get:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/vuejs/awesome-vue#source-code-editing\" target=\"_blank\" rel=\"noopener\">Complete syntax highlighting</a></li>\n" +
                    "<li><a href=\"https://webpack.js.org/concepts/modules/#what-is-a-webpack-module\" target=\"_blank\" rel=\"noopener\">CommonJS modules</a></li>\n" +
                    "<li><a href=\"https://vue-loader.vuejs.org/en/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\">Component-scoped CSS</a></li>\n" +
                    "</ul>\n" +
                    "<p>As promised, we can also use preprocessors such as Pug, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</p>\n" +
                    "<p><a href=\"https://gist.github.com/chrisvfritz/1c9f2daea9bc078dcb47e9a82e5f7587\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://vuejs.org/images/vue-component-with-preprocessors.png\" alt=\"Single-file component example with preprocessors (click for code as text)\" /></a></p>\n" +
                    "<p>These specific languages are only examples. You could as easily use Bubl&eacute;, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with&nbsp;<code>vue-loader</code>, it also has first-class support for CSS Modules.</p>\n" +
                    "<h3 id=\"What-About-Separation-of-Concerns\"><a class=\"headerlink\" title=\"What About Separation of Concerns?\" href=\"https://vuejs.org/v2/guide/single-file-components.html#What-About-Separation-of-Concerns\" data-scroll=\"\">What About Separation of Concerns?</a></h3>\n" +
                    "<p>One important thing to note is that&nbsp;<strong>separation of concerns is not equal to separation of file types.</strong>&nbsp;In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic and styles are inherently coupled, and collocating them actually makes the component more cohesive and maintainable.</p>\n" +
                    "<p>Even if you don&rsquo;t like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- my-component.vue --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This will be pre-compiled<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./my-component.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./my-component.css\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Getting-Started\"><a class=\"headerlink\" title=\"Getting Started\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Getting-Started\" data-scroll=\"\">Getting Started</a></h2>\n" +
                    "<h3 id=\"Example-Sandbox\"><a class=\"headerlink\" title=\"Example Sandbox\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Example-Sandbox\" data-scroll=\"\">Example Sandbox</a></h3>\n" +
                    "<p>If you want to dive right in and start playing with single-file components, check out&nbsp;<a href=\"https://codesandbox.io/s/o29j95wx9\" target=\"_blank\" rel=\"noopener\">this simple todo app</a>&nbsp;on CodeSandbox.</p>\n" +
                    "<h3 id=\"For-Users-New-to-Module-Build-Systems-in-JavaScript\"><a class=\"headerlink\" title=\"For Users New to Module Build Systems in JavaScript\" href=\"https://vuejs.org/v2/guide/single-file-components.html#For-Users-New-to-Module-Build-Systems-in-JavaScript\" data-scroll=\"\">For Users New to Module Build Systems in JavaScript</a></h3>\n" +
                    "<p>With&nbsp;<code>.vue</code>&nbsp;components, we&rsquo;re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven&rsquo;t already:</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><strong>Node Package Manager (NPM)</strong>: Read the&nbsp;<a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"noopener\">Getting Started guide</a>&nbsp;through section&nbsp;<em>10: Uninstalling global packages</em>.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><strong>Modern JavaScript with ES2015/16</strong>: Read through Babel&rsquo;s&nbsp;<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">Learn ES2015 guide</a>. You don&rsquo;t have to memorize every feature right now, but keep this page as a reference you can come back to.</p>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<p>After you&rsquo;ve taken a day to dive into these resources, we recommend checking out the&nbsp;<a href=\"https://vuejs-templates.github.io/webpack\" target=\"_blank\" rel=\"noopener\">webpack</a>&nbsp;template. Follow the instructions and you should have a Vue project with&nbsp;<code>.vue</code>&nbsp;components, ES2015, and hot-reloading in no time!</p>\n" +
                    "<p>To learn more about Webpack itself, check out&nbsp;<a href=\"https://webpack.js.org/configuration/\" target=\"_blank\" rel=\"noopener\">their official docs</a>&nbsp;and&nbsp;<a href=\"https://webpack.academy/p/the-core-concepts\" target=\"_blank\" rel=\"noopener\">Webpack Academy</a>. In Webpack, each file can be transformed by a &ldquo;loader&rdquo; before being included in the bundle, and Vue offers the&nbsp;<a href=\"https://vue-loader.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue-loader</a>&nbsp;plugin to translate single-file (<code>.vue</code>) components.</p>");
            sec2Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec2Vue2);

            Section sec3Vue2 = new Section();
            sec3Vue2.setOrdinalNumber(3);
            sec3Vue2.setDescription("Unit Testing");
            sec3Vue2.setContent("<p>Anything compatible with a module-based build system will work, but if you&rsquo;re looking for a specific recommendation try the&nbsp;<a href=\"http://karma-runner.github.io/\" target=\"_blank\" rel=\"noopener\">Karma</a>&nbsp;test runner. It has a lot of community plugins, including support for&nbsp;<a href=\"https://github.com/webpack/karma-webpack\" target=\"_blank\" rel=\"noopener\">Webpack</a>&nbsp;and&nbsp;<a href=\"https://github.com/Nikku/karma-browserify\" target=\"_blank\" rel=\"noopener\">Browserify</a>. For detailed setup please refer to each project&rsquo;s respective documentation. These example Karma configurations for&nbsp;<a href=\"https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js\" target=\"_blank\" rel=\"noopener\">Webpack</a>&nbsp;and&nbsp;<a href=\"https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js\" target=\"_blank\" rel=\"noopener\">Browserify</a>&nbsp;can help you get started.</p>\n" +
                    "<h2 id=\"Simple-Assertions\"><a class=\"headerlink\" title=\"Simple Assertions\" href=\"https://vuejs.org/v2/guide/unit-testing.html#Simple-Assertions\" data-scroll=\"\">Simple Assertions</a></h2>\n" +
                    "<p>You don&rsquo;t have to do anything special in your components to make them testable. Export the raw options:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>{{ message }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span></span><br /><span class=\"line\"><span class=\"undefined\">    data () {</span></span><br /><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> {</span></span><br /><span class=\"line\"><span class=\"javascript\">        message: <span class=\"string\">'hello!'</span></span></span><br /><span class=\"line\"><span class=\"undefined\">      }</span></span><br /><span class=\"line\"><span class=\"undefined\">    },</span></span><br /><span class=\"line\"><span class=\"undefined\">    created () {</span></span><br /><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'bye!'</span></span></span><br /><span class=\"line\"><span class=\"undefined\">    }</span></span><br /><span class=\"line\"><span class=\"undefined\">  }</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then import the component options along with Vue, and you can make many common assertions:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Import Vue and the component being tested</span></span><br /><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'path/to/MyComponent.vue'</span></span><br /><br /><span class=\"line\"><span class=\"comment\">// Here are some Jasmine 2.0 tests, though you can</span></span><br /><span class=\"line\"><span class=\"comment\">// use any test runner / assertion library combo you prefer</span></span><br /><span class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; {</span><br /><span class=\"line\">  <span class=\"comment\">// Inspect the raw component options</span></span><br /><span class=\"line\">  it(<span class=\"string\">'has a created hook'</span>, () =&gt; {</span><br /><span class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.created).toBe(<span class=\"string\">'function'</span>)</span><br /><span class=\"line\">  })</span><br /><br /><span class=\"line\">  <span class=\"comment\">// Evaluate the results of functions in</span></span><br /><span class=\"line\">  <span class=\"comment\">// the raw component options</span></span><br /><span class=\"line\">  it(<span class=\"string\">'sets the correct default data'</span>, () =&gt; {</span><br /><span class=\"line\">    expect(<span class=\"keyword\">typeof</span> MyComponent.data).toBe(<span class=\"string\">'function'</span>)</span><br /><span class=\"line\">    <span class=\"keyword\">const</span> defaultData = MyComponent.data()</span><br /><span class=\"line\">    expect(defaultData.message).toBe(<span class=\"string\">'hello!'</span>)</span><br /><span class=\"line\">  })</span><br /><br /><span class=\"line\">  <span class=\"comment\">// Inspect the component instance on mount</span></span><br /><span class=\"line\">  it(<span class=\"string\">'correctly sets the message when created'</span>, () =&gt; {</span><br /><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</span><br /><span class=\"line\">    expect(vm.message).toBe(<span class=\"string\">'bye!'</span>)</span><br /><span class=\"line\">  })</span><br /><br /><span class=\"line\">  <span class=\"comment\">// Mount an instance and inspect the render output</span></span><br /><span class=\"line\">  it(<span class=\"string\">'renders the correct message'</span>, () =&gt; {</span><br /><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(MyComponent)</span><br /><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br /><span class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'bye!'</span>)</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Writing-Testable-Components\"><a class=\"headerlink\" title=\"Writing Testable Components\" href=\"https://vuejs.org/v2/guide/unit-testing.html#Writing-Testable-Components\" data-scroll=\"\">Writing Testable Components</a></h2>\n" +
                    "<p>A component&rsquo;s render output is primarily determined by the props it receives. If a component&rsquo;s render output solely depends on its props it becomes straightforward to test, similar to asserting the return value of a pure function with different arguments. Take a simplified example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>{{ msg }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span></span><br /><span class=\"line\"><span class=\"javascript\">    props: [<span class=\"string\">'msg'</span>]</span></span><br /><span class=\"line\"><span class=\"undefined\">  }</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can assert its render output with different props using the&nbsp;<code>propsData</code>&nbsp;option:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><span class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.vue'</span></span><br /><br /><span class=\"line\"><span class=\"comment\">// helper function that mounts and returns the rendered text</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRenderedText</span> (<span class=\"params\">Component, propsData</span>) </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> Constructor = Vue.extend(Component)</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor({ <span class=\"attr\">propsData</span>: propsData }).$mount()</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> vm.$el.textContent</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\">describe(<span class=\"string\">'MyComponent'</span>, () =&gt; {</span><br /><span class=\"line\">  it(<span class=\"string\">'renders correctly with different props'</span>, () =&gt; {</span><br /><span class=\"line\">    expect(getRenderedText(MyComponent, {</span><br /><span class=\"line\">      msg: <span class=\"string\">'Hello'</span></span><br /><span class=\"line\">    })).toBe(<span class=\"string\">'Hello'</span>)</span><br /><br /><span class=\"line\">    expect(getRenderedText(MyComponent, {</span><br /><span class=\"line\">      msg: <span class=\"string\">'Bye'</span></span><br /><span class=\"line\">    })).toBe(<span class=\"string\">'Bye'</span>)</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Asserting-Asynchronous-Updates\"><a class=\"headerlink\" title=\"Asserting Asynchronous Updates\" href=\"https://vuejs.org/v2/guide/unit-testing.html#Asserting-Asynchronous-Updates\" data-scroll=\"\">Asserting Asynchronous Updates</a></h2>\n" +
                    "<p>Since Vue&nbsp;<a href=\"https://vuejs.org/v2/guide/reactivity.html#Async-Update-Queue\">performs DOM updates asynchronously</a>, assertions on DOM updates resulting from state change will have to be made in a&nbsp;<code>Vue.nextTick</code>&nbsp;callback:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Inspect the generated HTML after a state update</span></span><br /><span class=\"line\">it(<span class=\"string\">'updates the rendered message when vm.message updates'</span>, done =&gt; {</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(MyComponent).$mount()</span><br /><span class=\"line\">  vm.message = <span class=\"string\">'foo'</span></span><br /><br /><span class=\"line\">  <span class=\"comment\">// wait a \"tick\" after state change before asserting DOM updates</span></span><br /><span class=\"line\">  Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {</span><br /><span class=\"line\">    expect(vm.$el.textContent).toBe(<span class=\"string\">'foo'</span>)</span><br /><span class=\"line\">    done()</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>We are planning to work on a collection of common test helpers to make it easier to render components with different constraints (e.g. shallow rendering that ignores child components) and assert their output.</p>");
            sec3Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec3Vue2);

            Section sec4Vue2 = new Section();
            sec4Vue2.setOrdinalNumber(4);
            sec4Vue2.setDescription("TypeScript Support");
            sec4Vue2.setContent("<p>A static type system can help prevent many potential runtime errors, especially as applications grow. That&rsquo;s why Vue ships with&nbsp;<a href=\"https://github.com/vuejs/vue/tree/dev/types\" target=\"_blank\" rel=\"noopener\">official type declarations</a>&nbsp;for&nbsp;<a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript</a>&nbsp;- not only in Vue core, but also for&nbsp;<a href=\"https://github.com/vuejs/vue-router/tree/dev/types\" target=\"_blank\" rel=\"noopener\">vue-router</a>&nbsp;and&nbsp;<a href=\"https://github.com/vuejs/vuex/tree/dev/types\" target=\"_blank\" rel=\"noopener\">vuex</a>&nbsp;as well.</p>\n" +
                    "<p>Since these are&nbsp;<a href=\"https://cdn.jsdelivr.net/npm/vue/types/\" target=\"_blank\" rel=\"noopener\">published on NPM</a>, and the latest TypeScript knows how to resolve type declarations in NPM packages, this means when installed via NPM, you don&rsquo;t need any additional tooling to use TypeScript with Vue.</p>\n" +
                    "<h2 id=\"Recommended-Configuration\"><a class=\"headerlink\" title=\"Recommended Configuration\" href=\"https://vuejs.org/v2/guide/typescript.html#Recommended-Configuration\" data-scroll=\"\">Recommended Configuration</a></h2>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br /><span class=\"line\">{</span><br /><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: {</span><br /><span class=\"line\">    <span class=\"comment\">// this aligns with Vue's browser support</span></span><br /><span class=\"line\">    <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br /><span class=\"line\">    <span class=\"comment\">// this enables stricter inference for data properties on `this`</span></span><br /><span class=\"line\">    <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">    <span class=\"comment\">// if using webpack 2+ or rollup, to leverage tree shaking:</span></span><br /><span class=\"line\">    <span class=\"string\">\"module\"</span>: <span class=\"string\">\"es2015\"</span>,</span><br /><span class=\"line\">    <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Note that you have to include&nbsp;<code>strict: true</code>&nbsp;(or at least&nbsp;<code>noImplicitThis: true</code>which is a part of&nbsp;<code>strict</code>&nbsp;flag) to leverage type checking of&nbsp;<code>this</code>&nbsp;in component methods otherwise it is always treated as&nbsp;<code>any</code>&nbsp;type.</p>\n" +
                    "<p>See&nbsp;<a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\" target=\"_blank\" rel=\"noopener\">TypeScript compiler options docs</a>&nbsp;for more details.</p>\n" +
                    "<h2 id=\"Development-Tooling\"><a class=\"headerlink\" title=\"Development Tooling\" href=\"https://vuejs.org/v2/guide/typescript.html#Development-Tooling\" data-scroll=\"\">Development Tooling</a></h2>\n" +
                    "<h3 id=\"Project-Creation\"><a class=\"headerlink\" title=\"Project Creation\" href=\"https://vuejs.org/v2/guide/typescript.html#Project-Creation\" data-scroll=\"\">Project Creation</a></h3>\n" +
                    "<p><a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">Vue CLI 3</a>&nbsp;can generate new projects that use TypeScript. To get started:</p>\n" +
                    "<figure class=\"highlight bash\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\"># 1. Install Vue CLI, if it's not already installed</span></span><br /><span class=\"line\">npm install --global @vue/cli</span><br /><br /><span class=\"line\"><span class=\"comment\"># 2. Create a new project, then choose the \"Manually select features\" option</span></span><br /><span class=\"line\">vue create my-project-name</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Editor-Support\"><a class=\"headerlink\" title=\"Editor Support\" href=\"https://vuejs.org/v2/guide/typescript.html#Editor-Support\" data-scroll=\"\">Editor Support</a></h3>\n" +
                    "<p>For developing Vue applications with TypeScript, we strongly recommend using&nbsp;<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>, which provides great out-of-the-box support for TypeScript. If you are using&nbsp;<a href=\"https://vuejs.org/v2/guide/single-file-components.html\">single-file components</a>&nbsp;(SFCs), get the awesome&nbsp;<a href=\"https://github.com/vuejs/vetur\" target=\"_blank\" rel=\"noopener\">Vetur extension</a>, which provides TypeScript inference inside SFCs and many other great features.</p>\n" +
                    "<p><a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"noopener\">WebStorm</a>&nbsp;also provides out-of-the-box support for both TypeScript and Vue.</p>\n" +
                    "<h2 id=\"Basic-Usage\"><a class=\"headerlink\" title=\"Basic Usage\" href=\"https://vuejs.org/v2/guide/typescript.html#Basic-Usage\" data-scroll=\"\">Basic Usage</a></h2>\n" +
                    "<p>To let TypeScript properly infer types inside Vue component options, you need to define components with&nbsp;<code>Vue.component</code>&nbsp;or&nbsp;<code>Vue.extend</code>:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> Component = Vue.extend({</span><br /><span class=\"line\">  <span class=\"comment\">// type inference enabled</span></span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> Component = {</span><br /><span class=\"line\">  <span class=\"comment\">// this will NOT have type inference,</span></span><br /><span class=\"line\">  <span class=\"comment\">// because TypeScript can't tell this is options for a Vue component.</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Class-Style-Vue-Components\"><a class=\"headerlink\" title=\"Class-Style Vue Components\" href=\"https://vuejs.org/v2/guide/typescript.html#Class-Style-Vue-Components\" data-scroll=\"\">Class-Style Vue Components</a></h2>\n" +
                    "<p>If you prefer a class-based API when declaring components, you can use the officially maintained&nbsp;<a href=\"https://github.com/vuejs/vue-class-component\" target=\"_blank\" rel=\"noopener\">vue-class-component</a>&nbsp;decorator:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">'vue-class-component'</span></span><br /><br /><span class=\"line\"><span class=\"comment\">// The @Component decorator indicates the class is a Vue component</span></span><br /><span class=\"line\"><span class=\"meta\">@Component</span>({</span><br /><span class=\"line\">  <span class=\"comment\">// All component options are allowed in here</span></span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;button @click=\"onClick\"&gt;Click!&lt;/button&gt;'</span></span><br /><span class=\"line\">})</span><br /><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> MyComponent <span class=\"keyword\">extends</span> Vue {</span><br /><span class=\"line\">  <span class=\"comment\">// Initial data can be declared as instance properties</span></span><br /><span class=\"line\">  message: <span class=\"built_in\">string</span> = <span class=\"string\">'Hello!'</span></span><br /><br /><span class=\"line\">  <span class=\"comment\">// Component methods can be declared as instance methods</span></span><br /><span class=\"line\">  onClick (): <span class=\"built_in\">void</span> {</span><br /><span class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.message)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Augmenting-Types-for-Use-with-Plugins\"><a class=\"headerlink\" title=\"Augmenting Types for Use with Plugins\" href=\"https://vuejs.org/v2/guide/typescript.html#Augmenting-Types-for-Use-with-Plugins\" data-scroll=\"\">Augmenting Types for Use with Plugins</a></h2>\n" +
                    "<p>Plugins may add to Vue&rsquo;s global/instance properties and component options. In these cases, type declarations are needed to make plugins compile in TypeScript. Fortunately, there&rsquo;s a TypeScript feature to augment existing types called&nbsp;<a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\" target=\"_blank\" rel=\"noopener\">module augmentation</a>.</p>\n" +
                    "<p>For example, to declare an instance property&nbsp;<code>$myProperty</code>&nbsp;with type&nbsp;<code>string</code>:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// 1. Make sure to import 'vue' before declaring augmented types</span></span><br /><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><br /><span class=\"line\"><span class=\"comment\">// 2. Specify a file with the types you want to augment</span></span><br /><span class=\"line\"><span class=\"comment\">//    Vue has the constructor type in types/vue.d.ts</span></span><br /><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> 'vue/types/vue' {</span><br /><span class=\"line\">  <span class=\"comment\">// 3. Declare augmentation for Vue</span></span><br /><span class=\"line\">  <span class=\"keyword\">interface</span> Vue {</span><br /><span class=\"line\">    $myProperty: <span class=\"built_in\">string</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>After including the above code as a declaration file (like&nbsp;<code>my-property.d.ts</code>) in your project, you can use&nbsp;<code>$myProperty</code>&nbsp;on a Vue instance.</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue()</span><br /><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.$myProperty) <span class=\"comment\">// This should compile successfully</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can also declare additional global properties and component options:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><br /><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> 'vue/types/vue' {</span><br /><span class=\"line\">  <span class=\"comment\">// Global properties can be declared</span></span><br /><span class=\"line\">  <span class=\"comment\">// on the `VueConstructor` interface</span></span><br /><span class=\"line\">  <span class=\"keyword\">interface</span> VueConstructor {</span><br /><span class=\"line\">    $myGlobal: <span class=\"built_in\">string</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"comment\">// ComponentOptions is declared in types/options.d.ts</span></span><br /><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> 'vue/types/options' {</span><br /><span class=\"line\">  <span class=\"keyword\">interface</span> ComponentOptions&lt;V <span class=\"keyword\">extends</span> Vue&gt; {</span><br /><span class=\"line\">    myOption?: <span class=\"built_in\">string</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The above declarations allow the following code to be compiled:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Global property</span></span><br /><span class=\"line\"><span class=\"built_in\">console</span>.log(Vue.$myGlobal)</span><br /><br /><span class=\"line\"><span class=\"comment\">// Additional component option</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  myOption: <span class=\"string\">'Hello'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec4Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec4Vue2);

            Section sec5Vue2 = new Section();
            sec5Vue2.setOrdinalNumber(5);
            sec5Vue2.setDescription("Routing");
            sec5Vue2.setContent("<p>For most Single Page Applications, it&rsquo;s recommended to use the officially-supported&nbsp;<a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router library</a>. For more details, see vue-router&rsquo;s&nbsp;<a href=\"https://router.vuejs.org/\" target=\"_blank\" rel=\"noopener\">documentation</a>.</p>\n" +
                    "<h2 id=\"Simple-Routing-From-Scratch\"><a class=\"headerlink\" title=\"Simple Routing From Scratch\" href=\"https://vuejs.org/v2/guide/routing.html#Simple-Routing-From-Scratch\" data-scroll=\"\">Simple Routing From Scratch</a></h2>\n" +
                    "<p>If you only need very simple routing and do not wish to involve a full-featured router library, you can do so by dynamically rendering a page-level component like this:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">const</span> NotFound = { <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;Page not found&lt;/p&gt;'</span> }</span><br /><span class=\"line\"><span class=\"keyword\">const</span> Home = { <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;home page&lt;/p&gt;'</span> }</span><br /><span class=\"line\"><span class=\"keyword\">const</span> About = { <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;about page&lt;/p&gt;'</span> }</span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> routes = {</span><br /><span class=\"line\">  <span class=\"string\">'/'</span>: Home,</span><br /><span class=\"line\">  <span class=\"string\">'/about'</span>: About</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    currentRoute: <span class=\"built_in\">window</span>.location.pathname</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    ViewComponent () {</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> routes[<span class=\"keyword\">this</span>.currentRoute] || NotFound</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  render (h) { <span class=\"keyword\">return</span> h(<span class=\"keyword\">this</span>.ViewComponent) }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Combined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out&nbsp;<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example\" target=\"_blank\" rel=\"noopener\">this example app</a>.</p>\n" +
                    "<h2 id=\"Integrating-3rd-Party-Routers\"><a class=\"headerlink\" title=\"Integrating 3rd-Party Routers\" href=\"https://vuejs.org/v2/guide/routing.html#Integrating-3rd-Party-Routers\" data-scroll=\"\">Integrating 3rd-Party Routers</a></h2>\n" +
                    "<p>If there&rsquo;s a 3rd-party router you prefer to use, such as&nbsp;<a href=\"https://github.com/visionmedia/page.js\" target=\"_blank\" rel=\"noopener\">Page.js</a>&nbsp;or&nbsp;<a href=\"https://github.com/flatiron/director\" target=\"_blank\" rel=\"noopener\">Director</a>, integration is&nbsp;<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs\" target=\"_blank\" rel=\"noopener\">similarly easy</a>. Here&rsquo;s a&nbsp;<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs\" target=\"_blank\" rel=\"noopener\">complete example</a>&nbsp;using Page.js.</p>");
            sec5Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec5Vue2);

            Section sec6Vue2 = new Section();
            sec6Vue2.setOrdinalNumber(6);
            sec6Vue2.setDescription("State Management");
            sec6Vue2.setContent("<p>Large applications can often grow in complexity, due to multiple pieces of state scattered across many components and the interactions between them. To solve this problem, Vue offers&nbsp;<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">vuex</a>: our own Elm-inspired state management library. It even integrates into&nbsp;<a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>, providing zero-setup access to&nbsp;<a href=\"https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif\" target=\"_blank\" rel=\"noopener\">time travel debugging</a>.</p>\n" +
                    "<h3 id=\"Information-for-React-Developers\"><a class=\"headerlink\" title=\"Information for React Developers\" href=\"https://vuejs.org/v2/guide/state-management.html#Information-for-React-Developers\" data-scroll=\"\">Information for React Developers</a></h3>\n" +
                    "<p>If you&rsquo;re coming from React, you may be wondering how vuex compares to&nbsp;<a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"noopener\">redux</a>, the most popular Flux implementation in that ecosystem. Redux is actually view-layer agnostic, so it can easily be used with Vue via&nbsp;<a href=\"https://yarnpkg.com/en/packages?q=redux%20vue&amp;p=1\" target=\"_blank\" rel=\"noopener\">simple bindings</a>. Vuex is different in that it&nbsp;<em>knows</em>&nbsp;it&rsquo;s in a Vue app. This allows it to better integrate with Vue, offering a more intuitive API and improved development experience.</p>\n" +
                    "<h2 id=\"Simple-State-Management-from-Scratch\"><a class=\"headerlink\" title=\"Simple State Management from Scratch\" href=\"https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch\" data-scroll=\"\">Simple State Management from Scratch</a></h2>\n" +
                    "<p>It is often overlooked that the source of truth in Vue applications is the raw&nbsp;<code>data</code>&nbsp;object - a Vue instance only proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you can share it by identity:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">const</span> sourceOfTruth = {}</span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> vmA = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: sourceOfTruth</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> vmB = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: sourceOfTruth</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now whenever&nbsp;<code>sourceOfTruth</code>&nbsp;is mutated, both&nbsp;<code>vmA</code>&nbsp;and&nbsp;<code>vmB</code>&nbsp;will update their views automatically. Subcomponents within each of these instances would also have access via&nbsp;<code>this.$root.$data</code>. We have a single source of truth now, but debugging would be a nightmare. Any piece of data could be changed by any part of our app at any time, without leaving a trace.</p>\n" +
                    "<p>To help solve this problem, we can adopt a&nbsp;<strong>store pattern</strong>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> store = {</span><br /><span class=\"line\">  debug: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">  state: {</span><br /><span class=\"line\">    message: <span class=\"string\">'Hello!'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  setMessageAction (newValue) {</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'setMessageAction triggered with'</span>, newValue)</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = newValue</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  clearMessageAction () {</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'clearMessageAction triggered'</span>)</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = <span class=\"string\">''</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Notice all actions that mutate the store&rsquo;s state are put inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen and how are they triggered. Now when something goes wrong, we&rsquo;ll also have a log of what happened leading up to the bug.</p>\n" +
                    "<p>In addition, each instance/component can still own and manage its own private state:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vmA = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    privateState: {},</span><br /><span class=\"line\">    sharedState: store.state</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> vmB = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    privateState: {},</span><br /><span class=\"line\">    sharedState: store.state</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p><img src=\"https://vuejs.org/images/state.png\" alt=\"State Management\" /></p>\n" +
                    "<p class=\"tip\">It&rsquo;s important to note that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for mutations to be observed.</p>\n" +
                    "<p>As we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the&nbsp;<a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"noopener\">Flux</a>&nbsp;architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.</p>\n" +
                    "<p>This brings us full circle back to&nbsp;<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">vuex</a>, so if you&rsquo;ve read this far it&rsquo;s probably time to try it out!</p>");
            sec6Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec6Vue2);

            Section sec7Vue2 = new Section();
            sec7Vue2.setOrdinalNumber(7);
            sec7Vue2.setDescription("Server-Side Rendering");
            sec7Vue2.setContent("<p>We have created a standalone guide for creating server-rendered Vue applications. This is a very in-depth guide for those who are already familiar with client-side Vue development, server-side Node.js development and webpack. Check it out at&nbsp;<a href=\"https://ssr.vuejs.org/\" target=\"_blank\" rel=\"noopener\">ssr.vuejs.org</a>.</p>\n" +
                    "<h2 id=\"Nuxt-js\"><a class=\"headerlink\" title=\"Nuxt.js\" href=\"https://vuejs.org/v2/guide/ssr.html#Nuxt-js\" data-scroll=\"\">Nuxt.js</a></h2>\n" +
                    "<p>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier:&nbsp;<a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">Nuxt.js</a>. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</p>");
            sec7Vue2.setLesson(vueJsLesson2);
            vueJsLesson2.getSections().add(sec7Vue2);

            Section sec1Vue3 = new Section();
            sec1Vue3.setOrdinalNumber(1);
            sec1Vue3.setDescription("List Rendering");
            sec1Vue3.setContent("<h2 id=\"Mapping-an-Array-to-Elements-with-v-for\"><a class=\"headerlink\" title=\"Mapping an Array to Elements with v-for\" href=\"https://vuejs.org/v2/guide/list.html#Mapping-an-Array-to-Elements-with-v-for\" data-scroll=\"\">Mapping an Array to Elements with&nbsp;<code>v-for</code></a></h2>\n" +
                    "<p>We can use the&nbsp;<code>v-for</code>&nbsp;directive to render a list of items based on an array. The&nbsp;<code>v-for</code>directive requires a special syntax in the form of&nbsp;<code>item in items</code>, where&nbsp;<code>items</code>&nbsp;is the source data array and&nbsp;<code>item</code>&nbsp;is an&nbsp;<strong>alias</strong>&nbsp;for the array element being iterated on:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br /><span class=\"line\">    {{ item.message }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    items: [</span><br /><span class=\"line\">      { <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> }</span><br /><span class=\"line\">    ]</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<ul id=\"example-1\" class=\"demo\">\n" +
                    "<li>Foo</li>\n" +
                    "<li>Bar</li>\n" +
                    "</ul>\n" +
                    "<p>Inside&nbsp;<code>v-for</code>&nbsp;blocks we have full access to parent scope properties.&nbsp;<code>v-for</code>&nbsp;also supports an optional second argument for the index of the current item.</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></span><br /><span class=\"line\">    {{ parentMessage }} - {{ index }} - {{ item.message }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-2'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    parentMessage: <span class=\"string\">'Parent'</span>,</span><br /><span class=\"line\">    items: [</span><br /><span class=\"line\">      { <span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> }</span><br /><span class=\"line\">    ]</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<ul id=\"example-2\" class=\"demo\">\n" +
                    "<li>Parent - 0 - Foo</li>\n" +
                    "<li>Parent - 1 - Bar</li>\n" +
                    "</ul>\n" +
                    "<p>You can also use&nbsp;<code>of</code>&nbsp;as the delimiter instead of&nbsp;<code>in</code>, so that it is closer to JavaScript&rsquo;s syntax for iterators:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item of items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"v-for-with-an-Object\"><a class=\"headerlink\" title=\"v-for with an Object\" href=\"https://vuejs.org/v2/guide/list.html#v-for-with-an-Object\" data-scroll=\"\"><code>v-for</code>&nbsp;with an Object</a></h2>\n" +
                    "<p>You can also use&nbsp;<code>v-for</code>&nbsp;to iterate through the properties of an object.</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"v-for-object\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span></span><br /><span class=\"line\">    {{ value }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#v-for-object'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    object: {</span><br /><span class=\"line\">      firstName: <span class=\"string\">'John'</span>,</span><br /><span class=\"line\">      lastName: <span class=\"string\">'Doe'</span>,</span><br /><span class=\"line\">      age: <span class=\"number\">30</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<ul id=\"v-for-object\" class=\"demo\">\n" +
                    "<li>John</li>\n" +
                    "<li>Doe</li>\n" +
                    "<li>30</li>\n" +
                    "</ul>\n" +
                    "<p>You can also provide a second argument for the key:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key) in object\"</span>&gt;</span></span><br /><span class=\"line\">  {{ key }}: {{ value }}</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"v-for-object-value-key\" class=\"demo\">\n" +
                    "<div>firstName: John</div>\n" +
                    "<div>lastName: Doe</div>\n" +
                    "<div>age: 30</div>\n" +
                    "</div>\n" +
                    "<p>And another for the index:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key, index) in object\"</span>&gt;</span></span><br /><span class=\"line\">  {{ index }}. {{ key }}: {{ value }}</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"v-for-object-value-key-index\" class=\"demo\">\n" +
                    "<div>0. firstName: John</div>\n" +
                    "<div>1. lastName: Doe</div>\n" +
                    "<div>2. age: 30</div>\n" +
                    "</div>\n" +
                    "<p class=\"tip\">When iterating over an object, the order is based on the key enumeration order of&nbsp;<code>Object.keys()</code>, which is&nbsp;<strong>not</strong>&nbsp;guaranteed to be consistent across JavaScript engine implementations.</p>\n" +
                    "<h2 id=\"key\"><a class=\"headerlink\" title=\"key\" href=\"https://vuejs.org/v2/guide/list.html#key\" data-scroll=\"\"><code>key</code></a></h2>\n" +
                    "<p>When Vue is updating a list of elements rendered with&nbsp;<code>v-for</code>, by default it uses an &ldquo;in-place patch&rdquo; strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index. This is similar to the behavior of&nbsp;<code>track-by=\"$index\"</code>&nbsp;in Vue 1.x.</p>\n" +
                    "<p>This default mode is efficient, but only suitable&nbsp;<strong>when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)</strong>.</p>\n" +
                    "<p>To give Vue a hint so that it can track each node&rsquo;s identity, and thus reuse and reorder existing elements, you need to provide a unique&nbsp;<code>key</code>&nbsp;attribute for each item. An ideal value for&nbsp;<code>key</code>&nbsp;would be the unique id of each item. This special attribute is a rough equivalent to&nbsp;<code>track-by</code>&nbsp;in 1.x, but it works like an attribute, so you need to use&nbsp;<code>v-bind</code>&nbsp;to bind it to dynamic values (using shorthand here):</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- content --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It is recommended to provide a&nbsp;<code>key</code>&nbsp;with&nbsp;<code>v-for</code>&nbsp;whenever possible, unless the iterated DOM content is simple, or you are intentionally relying on the default behavior for performance gains.</p>\n" +
                    "<p>Since it&rsquo;s a generic mechanism for Vue to identify nodes, the&nbsp;<code>key</code>&nbsp;also has other uses that are not specifically tied to&nbsp;<code>v-for</code>, as we will see later in the guide.</p>");
            sec1Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec1Vue3);

            Section sec2Vue3 = new Section();
            sec2Vue3.setOrdinalNumber(2);
            sec2Vue3.setDescription("Event Handling");
            sec2Vue3.setContent("<p>We can use the&nbsp;<code>v-on</code>&nbsp;directive to listen to DOM events and run some JavaScript when they&rsquo;re triggered.</p>\n" +
                    "<p>For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked {{ counter }} times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    counter: <span class=\"number\">0</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<div id=\"example-1\" class=\"demo\"><button>Add 1</button>\n" +
                    "<p>The button above has been clicked 0 times.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Method-Event-Handlers\"><a class=\"headerlink\" title=\"Method Event Handlers\" href=\"https://vuejs.org/v2/guide/events.html#Method-Event-Handlers\" data-scroll=\"\">Method Event Handlers</a></h2>\n" +
                    "<p>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the&nbsp;<code>v-on</code>&nbsp;attribute isn&rsquo;t feasible. That&rsquo;s why&nbsp;<code>v-on</code>&nbsp;can also accept the name of a method you&rsquo;d like to call.</p>\n" +
                    "<p>For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-2\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- `greet` is the name of a method defined below --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"greet\"</span>&gt;</span>Greet<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> example2 = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-2'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    name: <span class=\"string\">'Vue.js'</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  <span class=\"comment\">// define methods under the `methods` object</span></span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>{</span><br /><span class=\"line\">      <span class=\"comment\">// `this` inside methods points to the Vue instance</span></span><br /><span class=\"line\">      alert(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>)</span><br /><span class=\"line\">      <span class=\"comment\">// `event` is the native DOM event</span></span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (event) {</span><br /><span class=\"line\">        alert(event.target.tagName)</span><br /><span class=\"line\">      }</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"comment\">// you can invoke methods in JavaScript too</span></span><br /><span class=\"line\">example2.greet() <span class=\"comment\">// =&gt; 'Hello Vue.js!'</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<div id=\"example-2\" class=\"demo\"><button>Greet</button></div>\n" +
                    "<h2 id=\"Methods-in-Inline-Handlers\"><a class=\"headerlink\" title=\"Methods in Inline Handlers\" href=\"https://vuejs.org/v2/guide/events.html#Methods-in-Inline-Handlers\" data-scroll=\"\">Methods in Inline Handlers</a></h2>\n" +
                    "<p>Instead of binding directly to a method name, we can also use methods in an inline JavaScript statement:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-3\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('hi')\"</span>&gt;</span>Say hi<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('what')\"</span>&gt;</span>Say what<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-3'</span>,</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    say: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>{</span><br /><span class=\"line\">      alert(message)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Result:</p>\n" +
                    "<div id=\"example-3\" class=\"demo\"><button>Say hi</button>&nbsp;<button>Say what</button></div>\n" +
                    "<p>&nbsp;</p>\n" +
                    "<p>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special&nbsp;<code>$event</code>&nbsp;variable:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span></span><br /><span class=\"line\">  Submit</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br /><span class=\"line\">methods: {</span><br /><span class=\"line\">  warn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, event</span>) </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// now we have access to the native event</span></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (event) event.preventDefault()</span><br /><span class=\"line\">    alert(message)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec2Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec2Vue3);

            Section sec3Vue3 = new Section();
            sec3Vue3.setOrdinalNumber(3);
            sec3Vue3.setDescription("Form Input Bindings");
            sec3Vue3.setContent("<p>You can use the&nbsp;<code>v-model</code>&nbsp;directive to create two-way data bindings on form input, textarea, and select elements. It automatically picks the correct way to update the element based on the input type. Although a bit magical,&nbsp;<code>v-model</code>&nbsp;is essentially syntax sugar for updating data on user input events, plus special care for some edge cases.</p>\n" +
                    "<p class=\"tip\"><code>v-model</code>&nbsp;will ignore the initial&nbsp;<code>value</code>,&nbsp;<code>checked</code>&nbsp;or&nbsp;<code>selected</code>&nbsp;attributes found on any form elements. It will always treat the Vue instance data as the source of truth. You should declare the initial value on the JavaScript side, inside the&nbsp;<code>data</code>&nbsp;option of your component.</p>\n" +
                    "<p id=\"vmodel-ime-tip\" class=\"tip\">For languages that require an&nbsp;<a href=\"https://en.wikipedia.org/wiki/Input_method\" target=\"_blank\" rel=\"noopener\">IME</a>&nbsp;(Chinese, Japanese, Korean etc.), you&rsquo;ll notice that&nbsp;<code>v-model</code>&nbsp;doesn&rsquo;t get updated during IME composition. If you want to cater for these updates as well, use&nbsp;<code>input</code>&nbsp;event instead.</p>\n" +
                    "<h3 id=\"Text\"><a class=\"headerlink\" title=\"Text\" href=\"https://vuejs.org/v2/guide/forms.html#Text\" data-scroll=\"\">Text</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: {{ message }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-1\" class=\"demo\"><input type=\"text\" placeholder=\"edit me\" />\n" +
                    "<p>Message is:</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"Multiline-text\"><a class=\"headerlink\" title=\"Multiline text\" href=\"https://vuejs.org/v2/guide/forms.html#Multiline-text\" data-scroll=\"\">Multiline text</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Multiline message is:<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"white-space: pre-line;\"</span>&gt;</span>{{ message }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"add multiple lines\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-textarea\" class=\"demo\">Multiline message is:\n" +
                    "<p>&nbsp;</p>\n" +
                    "<br /><textarea placeholder=\"add multiple lines\"></textarea></div>\n" +
                    "<p class=\"tip\">Interpolation on textareas (<code>&lt;textarea&gt;{{text}}&lt;/textarea&gt;</code>) won't work. Use&nbsp;<code>v-model</code>&nbsp;instead.</p>\n" +
                    "<h3 id=\"Checkbox\"><a class=\"headerlink\" title=\"Checkbox\" href=\"https://vuejs.org/v2/guide/forms.html#Checkbox\" data-scroll=\"\">Checkbox</a></h3>\n" +
                    "<p>Single checkbox, boolean value:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>{{ checked }}<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-2\" class=\"demo\"><input id=\"checkbox\" type=\"checkbox\" />&nbsp;<label for=\"checkbox\">false</label></div>\n" +
                    "<p>Multiple checkboxes, bound to the same Array:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'example-3'</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: {{ checkedNames }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-3'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    checkedNames: []</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-3\" class=\"demo\"><input id=\"jack\" type=\"checkbox\" value=\"Jack\" />&nbsp;<label for=\"jack\">Jack</label>&nbsp;<input id=\"john\" type=\"checkbox\" value=\"John\" />&nbsp;<label for=\"john\">John</label>&nbsp;<input id=\"mike\" type=\"checkbox\" value=\"Mike\" />&nbsp;<label for=\"mike\">Mike</label>&nbsp;<br />Checked names: []</div>\n" +
                    "<h3 id=\"Radio\"><a class=\"headerlink\" title=\"Radio\" href=\"https://vuejs.org/v2/guide/forms.html#Radio\" data-scroll=\"\">Radio</a></h3>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: {{ picked }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-4\" class=\"demo\"><input id=\"one\" type=\"radio\" value=\"One\" />&nbsp;<label for=\"one\">One</label>&nbsp;<br /><input id=\"two\" type=\"radio\" value=\"Two\" />&nbsp;<label for=\"two\">Two</label>&nbsp;<br />Picked:</div>\n" +
                    "<h3 id=\"Select\"><a class=\"headerlink\" title=\"Select\" href=\"https://vuejs.org/v2/guide/forms.html#Select\" data-scroll=\"\">Select</a></h3>\n" +
                    "<p>Single select:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>Please select one<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: {{ selected }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'...'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    selected: <span class=\"string\">''</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-5\" class=\"demo\"><select>\n" +
                    "<option disabled=\"disabled\" value=\"\">Please select one</option>\n" +
                    "&nbsp;\n" +
                    "<option>A</option>\n" +
                    "&nbsp;\n" +
                    "<option>B</option>\n" +
                    "&nbsp;\n" +
                    "<option>C</option>\n" +
                    "</select>&nbsp;Selected:</div>\n" +
                    "<p class=\"tip\">If the initial value of your&nbsp;<code>v-model</code>&nbsp;expression does not match any of the options, the&nbsp;<code>&lt;select&gt;</code>&nbsp;element will render in an &ldquo;unselected&rdquo; state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above.</p>\n" +
                    "<p>Multiple select (bound to Array):</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: {{ selected }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-6\" class=\"demo\"><select multiple=\"multiple\">\n" +
                    "<option>A</option>\n" +
                    "&nbsp;\n" +
                    "<option>B</option>\n" +
                    "&nbsp;\n" +
                    "<option>C</option>\n" +
                    "</select>&nbsp;<br />Selected: []</div>\n" +
                    "<p>Dynamic options rendered with&nbsp;<code>v-for</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"option in options\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"option.value\"</span>&gt;</span></span><br /><span class=\"line\">    {{ option.text }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: {{ selected }}<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'...'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    selected: <span class=\"string\">'A'</span>,</span><br /><span class=\"line\">    options: [</span><br /><span class=\"line\">      { <span class=\"attr\">text</span>: <span class=\"string\">'One'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'A'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">text</span>: <span class=\"string\">'Two'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'B'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">text</span>: <span class=\"string\">'Three'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'C'</span> }</span><br /><span class=\"line\">    ]</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-7\" class=\"demo\"><select>\n" +
                    "<option value=\"A\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;One&nbsp; &nbsp; &nbsp;</option>\n" +
                    "<option value=\"B\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Two&nbsp; &nbsp; &nbsp;</option>\n" +
                    "<option value=\"C\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Three&nbsp; &nbsp; &nbsp;</option>\n" +
                    "</select>&nbsp;Selected: A</div>");
            sec3Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec3Vue3);

            Section sec4Vue3 = new Section();
            sec4Vue3.setOrdinalNumber(4);
            sec4Vue3.setDescription("Components Basics");
            sec4Vue3.setContent("<p>Here&rsquo;s an example of a Vue component:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Define a new component called button-counter</span></span><br /><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, {</span><br /><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      count: <span class=\"number\">0</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Components are reusable Vue instances with a name: in this case,&nbsp;<code>&lt;button-counter&gt;</code>. We can use this component as a custom element inside a root Vue instance created with&nbsp;<code>new Vue</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({ <span class=\"attr\">el</span>: <span class=\"string\">'#components-demo'</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"components-demo\" class=\"demo\"><button>You clicked me 0 times.</button></div>\n" +
                    "<p>Since components are reusable Vue instances, they accept the same options as&nbsp;<code>new Vue</code>, such as&nbsp;<code>data</code>,&nbsp;<code>computed</code>,&nbsp;<code>watch</code>,&nbsp;<code>methods</code>, and lifecycle hooks. The only exceptions are a few root-specific options like&nbsp;<code>el</code>.</p>\n" +
                    "<h2 id=\"Reusing-Components\"><a class=\"headerlink\" title=\"Reusing Components\" href=\"https://vuejs.org/v2/guide/components.html#Reusing-Components\" data-scroll=\"\">Reusing Components</a></h2>\n" +
                    "<p>Components can be reused as many times as you want:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"components-demo2\" class=\"demo\"><button>You clicked me 0 times.</button>&nbsp;<button>You clicked me 0 times.</button>&nbsp;<button>You clicked me 0 times.</button></div>\n" +
                    "<p>Notice that when clicking on the buttons, each one maintains its own, separate&nbsp;<code>count</code>. That&rsquo;s because each time you use a component, a new&nbsp;<strong>instance</strong>&nbsp;of it is created.</p>\n" +
                    "<h3 id=\"data-Must-Be-a-Function\"><a class=\"headerlink\" title=\"data Must Be a Function\" href=\"https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function\" data-scroll=\"\"><code>data</code>&nbsp;Must Be a Function</a></h3>\n" +
                    "<p>When we defined the&nbsp;<code>&lt;button-counter&gt;</code>&nbsp;component, you may have noticed that&nbsp;<code>data</code>&nbsp;wasn&rsquo;t directly provided an object, like this:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  count: <span class=\"number\">0</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Instead,&nbsp;<strong>a component&rsquo;s&nbsp;<code>data</code>&nbsp;option must be a function</strong>, so that each instance can maintain an independent copy of the returned data object:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">    count: <span class=\"number\">0</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If Vue didn&rsquo;t have this rule, clicking on one button would affect the data of&nbsp;<em>all other instances</em>, like below:</p>\n" +
                    "<div id=\"components-demo3\" class=\"demo\"><button>You clicked me 0 times.</button>&nbsp;<button>You clicked me 0 times.</button>&nbsp;<button>You clicked me 0 times.</button></div>\n" +
                    "<h2 id=\"Organizing-Components\"><a class=\"headerlink\" title=\"Organizing Components\" href=\"https://vuejs.org/v2/guide/components.html#Organizing-Components\" data-scroll=\"\">Organizing Components</a></h2>\n" +
                    "<p>It&rsquo;s common for an app to be organized into a tree of nested components:</p>\n" +
                    "<p><img src=\"https://vuejs.org/images/components.png\" alt=\"Component Tree\" /></p>\n" +
                    "<p>For example, you might have components for a header, sidebar, and content area, each typically containing other components for navigation links, blog posts, etc.</p>\n" +
                    "<p>To use these components in templates, they must be registered so that Vue knows about them. There are two types of component registration:&nbsp;<strong>global</strong>&nbsp;and&nbsp;<strong>local</strong>. So far, we&rsquo;ve only registered components globally, using&nbsp;<code>Vue.component</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, {</span><br /><span class=\"line\">  <span class=\"comment\">// ... options ...</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Globally registered components can be used in the template of any root Vue instance (<code>new Vue</code>) created afterwards &ndash; and even inside all subcomponents of that Vue instance&rsquo;s component tree.</p>\n" +
                    "<p>That&rsquo;s all you need to know about registration for now, but once you&rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on&nbsp;<a href=\"https://vuejs.org/v2/guide/components-registration.html\">Component Registration</a>.</p>");
            sec4Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec4Vue3);

            Section sec5Vue3 = new Section();
            sec5Vue3.setOrdinalNumber(5);
            sec5Vue3.setDescription("Slots");
            sec5Vue3.setContent("<p>Vue implements a content distribution API that&rsquo;s modeled after the current&nbsp;<a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" target=\"_blank\" rel=\"noopener\">Web Components spec draft</a>, using the&nbsp;<code>&lt;slot&gt;</code>&nbsp;element to serve as distribution outlets for content.</p>\n" +
                    "<p>This allows you to compose components like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br /><span class=\"line\">  Your Profile</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then in the template for&nbsp;<code>&lt;navigation-link&gt;</code>, you might have:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span></span></span><br /><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"nav-link\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When the component renders, the&nbsp;<code>&lt;slot&gt;</code>&nbsp;element will be replaced by &ldquo;Your Profile&rdquo;. Slots can contain any template code, including HTML:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- Add a Font Awesome icon --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\">  Your Profile</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Or even other components:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- Use a component to add an icon --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">font-awesome-icon</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">font-awesome-icon</span>&gt;</span></span><br /><span class=\"line\">  Your Profile</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If&nbsp;<code>&lt;navigation-link&gt;</code>&nbsp;did&nbsp;<strong>not</strong>&nbsp;contain a&nbsp;<code>&lt;slot&gt;</code>&nbsp;element, any content passed to it would simply be discarded.</p>\n" +
                    "<h2 id=\"Named-Slots\"><a class=\"headerlink\" title=\"Named Slots\" href=\"https://vuejs.org/v2/guide/components-slots.html#Named-Slots\" data-scroll=\"\">Named Slots</a></h2>\n" +
                    "<p>There are times when it&rsquo;s useful to have multiple slots. For example, in a hypothetical&nbsp;<code>base-layout</code>&nbsp;component with the following template:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- We want header content here --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- We want main content here --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- We want footer content here --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>For these cases, the&nbsp;<code>&lt;slot&gt;</code>&nbsp;element has a special attribute,&nbsp;<code>name</code>, which can be used to define additional slots:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>To provide content to named slots, we can use the&nbsp;<code>slot</code>&nbsp;attribute on a&nbsp;<code>&lt;template&gt;</code>element in the parent:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Or, the&nbsp;<code>slot</code>&nbsp;attribute can also be used directly on a normal element:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>There can still be one unnamed slot, which is the&nbsp;<strong>default slot</strong>&nbsp;that serves as a catch-all outlet for any unmatched content. In both examples above, the rendered HTML would be:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Default-Slot-Content\"><a class=\"headerlink\" title=\"Default Slot Content\" href=\"https://vuejs.org/v2/guide/components-slots.html#Default-Slot-Content\" data-scroll=\"\">Default Slot Content</a></h2>\n" +
                    "<p>There are cases when it&rsquo;s useful to provide a slot with default content. For example, a&nbsp;<code>&lt;submit-button&gt;</code>&nbsp;component might want the content of the button to be &ldquo;Submit&rdquo; by default, but also allow users to override with &ldquo;Save&rdquo;, &ldquo;Upload&rdquo;, or anything else.</p>\n" +
                    "<p>To achieve this, specify the default content in between the&nbsp;<code>&lt;slot&gt;</code>&nbsp;tags in your component&rsquo;s template:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If the slot is provided content by the parent, it will replace the default content.</p>");
            sec5Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec5Vue3);

            Section sec6Vue3 = new Section();
            sec6Vue3.setOrdinalNumber(6);
            sec6Vue3.setDescription("Dynamic & Async Components");
            sec6Vue3.setContent("<p>Earlier, we used the&nbsp;<code>is</code>&nbsp;attribute to switch between components in a tabbed interface:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When switching between these components though, you&rsquo;ll sometimes want to maintain their state or avoid re-rendering for performance reasons. For example, when expanding our tabbed interface a little:</p>\n" +
                    "<div id=\"dynamic-component-demo\" class=\"demo\"><button class=\"dynamic-component-demo-tab-button dynamic-component-demo-active\">Posts</button><button class=\"dynamic-component-demo-tab-button\">Archive</button>\n" +
                    "<div class=\"dynamic-component-demo-posts-tab dynamic-component-demo-tab\">\n" +
                    "<ul class=\"dynamic-component-demo-posts-sidebar\">\n" +
                    "<li class=\"\">Cat Ipsum</li>\n" +
                    "<li class=\"\">Hipster Ipsum</li>\n" +
                    "<li class=\"\">Cupcake Ipsum</li>\n" +
                    "</ul>\n" +
                    "<div class=\"dynamic-component-demo-post-container\"><strong>Click on a blog title to the left to view it.</strong></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<p>You&rsquo;ll notice that if you select a post, switch to the&nbsp;<em>Archive</em>&nbsp;tab, then switch back to&nbsp;<em>Posts</em>, it&rsquo;s no longer showing the post you selected. That&rsquo;s because each time you switch to a new tab, Vue creates a new instance of the&nbsp;<code>currentTabComponent</code>.</p>\n" +
                    "<p>Recreating dynamic components is normally useful behavior, but in this case, we&rsquo;d really like those tab component instances to be cached once they&rsquo;re created for the first time. To solve this problem, we can wrap our dynamic component with a&nbsp;<code>&lt;keep-alive&gt;</code>element:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- Inactive components will be cached! --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Check out the result below:</p>\n" +
                    "<div id=\"dynamic-component-keep-alive-demo\" class=\"demo\"><button class=\"dynamic-component-demo-tab-button dynamic-component-demo-active\">Posts</button><button class=\"dynamic-component-demo-tab-button\">Archive</button>\n" +
                    "<div class=\"dynamic-component-demo-posts-tab dynamic-component-demo-tab\">\n" +
                    "<ul class=\"dynamic-component-demo-posts-sidebar\">\n" +
                    "<li class=\"\">Cat Ipsum</li>\n" +
                    "<li class=\"\">Hipster Ipsum</li>\n" +
                    "<li class=\"\">Cupcake Ipsum</li>\n" +
                    "</ul>\n" +
                    "<div class=\"dynamic-component-demo-post-container\"><strong>Click on a blog title to the left to view it.</strong></div>\n" +
                    "</div>\n" +
                    "</div>\n" +
                    "<p>Now the&nbsp;<em>Posts</em>&nbsp;tab maintains its state (the selected post) even when it&rsquo;s not rendered. See&nbsp;<a href=\"https://jsfiddle.net/chrisvfritz/Lp20op9o/\" target=\"_blank\" rel=\"noopener\">this fiddle</a>&nbsp;for the complete code.</p>\n" +
                    "<p class=\"tip\">Note that&nbsp;<code>&lt;keep-alive&gt;</code>&nbsp;requires the components being switched between to all have names, either using the&nbsp;<code>name</code>&nbsp;option on a component, or through local/global registration.</p>\n" +
                    "<p>Check out more details on&nbsp;<code>&lt;keep-alive&gt;</code>&nbsp;in the&nbsp;<a href=\"https://vuejs.org/v2/api/#keep-alive\">API reference</a>.</p>");
            sec6Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec6Vue3);

            Section sec7Vue3 = new Section();
            sec7Vue3.setOrdinalNumber(7);
            sec7Vue3.setDescription("Handling Edge Cases");
            sec7Vue3.setContent("<p>In most cases, it&rsquo;s best to avoid reaching into other component instances or manually manipulating DOM elements. There are cases, however, when it can be appropriate.</p>\n" +
                    "<h3 id=\"Accessing-the-Root-Instance\"><a class=\"headerlink\" title=\"Accessing the Root Instance\" href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance\" data-scroll=\"\">Accessing the Root Instance</a></h3>\n" +
                    "<p>In every subcomponent of a&nbsp;<code>new Vue</code>&nbsp;instance, this root instance can be accessed with the&nbsp;<code>$root</code>&nbsp;property. For example, in this root instance:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// The root Vue instance</span></span><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    foo: <span class=\"number\">1</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{ <span class=\"comment\">/* ... */</span> }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    baz: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{ <span class=\"comment\">/* ... */</span> }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>All subcomponents will now be able to access this instance and use it as a global store:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Get root data</span></span><br /><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo</span><br /><br /><span class=\"line\"><span class=\"comment\">// Set root data</span></span><br /><span class=\"line\"><span class=\"keyword\">this</span>.$root.foo = <span class=\"number\">2</span></span><br /><br /><span class=\"line\"><span class=\"comment\">// Access root computed properties</span></span><br /><span class=\"line\"><span class=\"keyword\">this</span>.$root.bar</span><br /><br /><span class=\"line\"><span class=\"comment\">// Call root methods</span></span><br /><span class=\"line\"><span class=\"keyword\">this</span>.$root.baz()</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p class=\"tip\">This can be convenient for demos or very small apps with a handful of components. However, the pattern does not scale well to medium or large-scale applications, so we strongly recommend using&nbsp;<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>&nbsp;to manage state in most cases.</p>\n" +
                    "<h3 id=\"Accessing-the-Parent-Component-Instance\"><a class=\"headerlink\" title=\"Accessing the Parent Component Instance\" href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Parent-Component-Instance\" data-scroll=\"\">Accessing the Parent Component Instance</a></h3>\n" +
                    "<p>Similar to&nbsp;<code>$root</code>, the&nbsp;<code>$parent</code>&nbsp;property can be used to access the parent instance from a child. This can be tempting to reach for as a lazy alternative to passing data with a prop.</p>\n" +
                    "<p class=\"tip\">In most cases, reaching into the parent makes your application more difficult to debug and understand, especially if you mutate data in the parent. When looking at that component later, it will be very difficult to figure out where that mutation came from.</p>\n" +
                    "<p>There are cases however, particularly shared component libraries, when this&nbsp;<em>might</em>&nbsp;be appropriate. For example, in abstract components that interact with JavaScript APIs instead of rendering HTML, like these hypothetical Google Maps components:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">google-map</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">google-map-markers</span> <span class=\"attr\">v-bind:places</span>=<span class=\"string\">\"iceCreamShops\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">google-map-markers</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The&nbsp;<code>&lt;google-map&gt;</code>&nbsp;component might define a&nbsp;<code>map</code>&nbsp;property that all subcomponents need access to. In this case&nbsp;<code>&lt;google-map-markers&gt;</code>&nbsp;might want to access that map with something like&nbsp;<code>this.$parent.getMap</code>, in order to add a set of markers to it. You can see this pattern&nbsp;<a href=\"https://jsfiddle.net/chrisvfritz/ttzutdxh/\" target=\"_blank\" rel=\"noopener\">in action here</a>.</p>\n" +
                    "<p>Keep in mind, however, that components built with this pattern are still inherently fragile. For example, imagine we add a new&nbsp;<code>&lt;google-map-region&gt;</code>&nbsp;component and when&nbsp;<code>&lt;google-map-markers&gt;</code>&nbsp;appears within that, it should only render markers that fall within that region:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">google-map</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">google-map-region</span> <span class=\"attr\">v-bind:shape</span>=<span class=\"string\">\"cityBoundaries\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">google-map-markers</span> <span class=\"attr\">v-bind:places</span>=<span class=\"string\">\"iceCreamShops\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">google-map-markers</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">google-map-region</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then inside&nbsp;<code>&lt;google-map-markers&gt;</code>&nbsp;you might find yourself reaching for a hack like this:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">this</span>.$parent.map || <span class=\"keyword\">this</span>.$parent.$parent.map</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This has quickly gotten out of hand. That&rsquo;s why to provide context information to descendent components arbitrarily deep, we instead recommend&nbsp;<a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Dependency-Injection\">dependency injection</a>.</p>\n" +
                    "<h3 id=\"Accessing-Child-Component-Instances-amp-Child-Elements\"><a class=\"headerlink\" title=\"Accessing Child Component Instances &amp; Child Elements\" href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-Child-Component-Instances-amp-Child-Elements\" data-scroll=\"\">Accessing Child Component Instances &amp; Child Elements</a></h3>\n" +
                    "<p>Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you can assign a reference ID to the child component using the&nbsp;<code>ref</code>&nbsp;attribute. For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"usernameInput\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now in the component where you&rsquo;ve defined this&nbsp;<code>ref</code>, you can use:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">this</span>.$refs.usernameInput</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>to access the&nbsp;<code>&lt;base-input&gt;</code>&nbsp;instance. This may be useful when you want to, for example, programmatically focus this input from a parent. In that case, the&nbsp;<code>&lt;base-input&gt;</code>&nbsp;component may similarly use a&nbsp;<code>ref</code>&nbsp;to provide access to specific elements inside it, such as:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"input\"</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>And even define methods for use by the parent:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">methods: {</span><br /><span class=\"line\">  <span class=\"comment\">// Used to focus the input from the parent</span></span><br /><span class=\"line\">  focus: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.$refs.input.focus()</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Thus allowing the parent component to focus the input inside&nbsp;<code>&lt;base-input&gt;</code>&nbsp;with:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">this</span>.$refs.usernameInput.focus()</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When&nbsp;<code>ref</code>&nbsp;is used together with&nbsp;<code>v-for</code>, the ref you get will be an array containing the child components mirroring the data source.</p>\n" +
                    "<p class=\"tip\"><code>$refs</code>&nbsp;are only populated after the component has been rendered, and they are not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid accessing&nbsp;<code>$refs</code>&nbsp;from within templates or computed properties.</p>\n" +
                    "<h3 id=\"Dependency-Injection\"><a class=\"headerlink\" title=\"Dependency Injection\" href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Dependency-Injection\" data-scroll=\"\">Dependency Injection</a></h3>\n" +
                    "<p>Earlier, when we described&nbsp;<a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Parent-Component-Instance\">Accessing the Parent Component Instance</a>, we showed an example like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">google-map</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">google-map-region</span> <span class=\"attr\">v-bind:shape</span>=<span class=\"string\">\"cityBoundaries\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">google-map-markers</span> <span class=\"attr\">v-bind:places</span>=<span class=\"string\">\"iceCreamShops\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">google-map-markers</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">google-map-region</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">google-map</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In this component, all descendants of&nbsp;<code>&lt;google-map&gt;</code>&nbsp;needed access to a&nbsp;<code>getMap</code>method, in order to know which map to interact with. Unfortunately, using the&nbsp;<code>$parent</code>&nbsp;property didn&rsquo;t scale well to more deeply nested components. That&rsquo;s where dependency injection can be useful, using two new instance options:&nbsp;<code>provide</code>&nbsp;and&nbsp;<code>inject</code>.</p>\n" +
                    "<p>The&nbsp;<code>provide</code>&nbsp;options allows us to specify the data/methods we want to&nbsp;<strong>provide</strong>&nbsp;to descendent components. In this case, that&rsquo;s the&nbsp;<code>getMap</code>&nbsp;method inside&nbsp;<code>&lt;google-map&gt;</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">provide: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">    getMap: <span class=\"keyword\">this</span>.getMap</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then in any descendants, we can use the&nbsp;<code>inject</code>&nbsp;option to receive specific properties we&rsquo;d like to add to that instance:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">inject: [<span class=\"string\">'getMap'</span>]</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can see the&nbsp;<a href=\"https://jsfiddle.net/chrisvfritz/tdv8dt3s/\" target=\"_blank\" rel=\"noopener\">full example here</a>. The advantage over using&nbsp;<code>$parent</code>&nbsp;is that we can access&nbsp;<code>getMap</code>&nbsp;in&nbsp;<em>any</em>&nbsp;descendant component, without exposing the entire instance of&nbsp;<code>&lt;google-map&gt;</code>. This allows us to more safely keep developing that component, without fear that we might change/remove something that a child component is relying on. The interface between these components remains clearly defined, just as with&nbsp;<code>props</code>.</p>\n" +
                    "<p>In fact, you can think of dependency injection as sort of &ldquo;long-range props&rdquo;, except:</p>\n" +
                    "<ul>\n" +
                    "<li>ancestor components don&rsquo;t need to know which descendants use the properties it provides</li>\n" +
                    "<li>descendant components don&rsquo;t need to know where injected properties are coming from</li>\n" +
                    "</ul>\n" +
                    "<p class=\"tip\">However, there are downsides to dependency injection. It couples components in your application to the way they&rsquo;re currently organized, making refactoring more difficult. Provided properties are also not reactive. This is by design, because using them to create a central data store scales just as poorly as&nbsp;<a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance\">using&nbsp;<code>$root</code></a>&nbsp;for the same purpose. If the properties you want to share are specific to your app, rather than generic, or if you ever want to update provided data inside ancestors, then that&rsquo;s a good sign that you probably need a real state management solution like&nbsp;<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">Vuex</a>&nbsp;instead.</p>\n" +
                    "<p>Learn more about dependency injection in&nbsp;<a href=\"https://vuejs.org/v2/api/#provide-inject\">the API doc</a>.</p>");
            sec7Vue3.setLesson(vueJsLesson3);
            vueJsLesson3.getSections().add(sec7Vue3);

            Section sec1Vue4 = new Section();
            sec1Vue4.setOrdinalNumber(1);
            sec1Vue4.setDescription("Enter/Leave & List Transitions");
            sec1Vue4.setContent("<p>Vue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:</p>\n" +
                    "<ul>\n" +
                    "<li>automatically apply classes for CSS transitions and animations</li>\n" +
                    "<li>integrate 3rd-party CSS animation libraries, such as Animate.css</li>\n" +
                    "<li>use JavaScript to directly manipulate the DOM during transition hooks</li>\n" +
                    "<li>integrate 3rd-party JavaScript animation libraries, such as Velocity.js</li>\n" +
                    "</ul>\n" +
                    "<p>On this page, we&rsquo;ll only cover entering, leaving, and list transitions, but you can see the next section for&nbsp;<a href=\"https://vuejs.org/v2/guide/transitioning-state.html\">managing state transitions</a>.</p>\n" +
                    "<h2 id=\"Transitioning-Single-Elements-Components\"><a class=\"headerlink\" title=\"Transitioning Single Elements/Components\" href=\"https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components\" data-scroll=\"\">Transitioning Single Elements/Components</a></h2>\n" +
                    "<p>Vue provides a&nbsp;<code>transition</code>&nbsp;wrapper component, allowing you to add entering/leaving transitions for any element or component in the following contexts:</p>\n" +
                    "<ul>\n" +
                    "<li>Conditional rendering (using&nbsp;<code>v-if</code>)</li>\n" +
                    "<li>Conditional display (using&nbsp;<code>v-show</code>)</li>\n" +
                    "<li>Dynamic components</li>\n" +
                    "<li>Component root nodes</li>\n" +
                    "</ul>\n" +
                    "<p>This is what an example looks like in action:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"show = !show\"</span>&gt;</span></span><br /><span class=\"line\">    Toggle</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#demo'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    show: <span class=\"literal\">true</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight css\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>, <span class=\"selector-class\">.fade-leave-active</span> {</span><br /><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">5s</span>;</span><br /><span class=\"line\">}</span><br /><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>, <span class=\"selector-class\">.fade-leave-to</span> <span class=\"comment\">/* .fade-leave-active below version 2.1.8 */</span> {</span><br /><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"demo\"><button>Toggle</button>\n" +
                    "<p>hello</p>\n" +
                    "</div>\n" +
                    "<p>When an element wrapped in a&nbsp;<code>transition</code>&nbsp;component is inserted or removed, this is what happens:</p>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p>Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition classes will be added/removed at appropriate timings.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>If the transition component provided&nbsp;<a href=\"https://vuejs.org/v2/guide/transitions.html#JavaScript-Hooks\">JavaScript hooks</a>, these hooks will be called at appropriate timings.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>If no CSS transitions/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue&rsquo;s concept of&nbsp;<code>nextTick</code>).</p>\n" +
                    "</li>\n" +
                    "</ol>\n" +
                    "<h3 id=\"Transition-Classes\"><a class=\"headerlink\" title=\"Transition Classes\" href=\"https://vuejs.org/v2/guide/transitions.html#Transition-Classes\" data-scroll=\"\">Transition Classes</a></h3>\n" +
                    "<p>There are six classes applied for enter/leave transitions.</p>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p><code>v-enter</code>: Starting state for enter. Added before element is inserted, removed one frame after element is inserted.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>v-enter-active</code>: Active state for enter. Applied during the entire entering phase. Added before element is inserted, removed when transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>v-enter-to</code>:&nbsp;<strong>Only available in versions 2.1.8+.</strong>&nbsp;Ending state for enter. Added one frame after element is inserted (at the same time&nbsp;<code>v-enter</code>&nbsp;is removed), removed when transition/animation finishes.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>v-leave</code>: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>v-leave-active</code>: Active state for leave. Applied during the entire leaving phase. Added immediately when leave transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>v-leave-to</code>:&nbsp;<strong>Only available in versions 2.1.8+.</strong>&nbsp;Ending state for leave. Added one frame after a leaving transition is triggered (at the same time&nbsp;<code>v-leave</code>&nbsp;is removed), removed when the transition/animation finishes.</p>\n" +
                    "</li>\n" +
                    "</ol>\n" +
                    "<p><img src=\"https://vuejs.org/images/transition.png\" alt=\"Transition Diagram\" /></p>\n" +
                    "<p>Each of these classes will be prefixed with the name of the transition. Here the&nbsp;<code>v-</code>prefix is the default when you use a&nbsp;<code>&lt;transition&gt;</code>&nbsp;element with no name. If you use&nbsp;<code>&lt;transition name=\"my-transition\"&gt;</code>&nbsp;for example, then the&nbsp;<code>v-enter</code>&nbsp;class would instead be&nbsp;<code>my-transition-enter</code>.</p>\n" +
                    "<p><code>v-enter-active</code>&nbsp;and&nbsp;<code>v-leave-active</code>&nbsp;give you the ability to specify different easing curves for enter/leave transitions, which you&rsquo;ll see an example of in the following section.</p>");
            sec1Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec1Vue4);

            Section sec2Vue4 = new Section();
            sec2Vue4.setOrdinalNumber(2);
            sec2Vue4.setDescription("State Transitions");
            sec2Vue4.setContent("<p>Watchers allow us to animate changes of any numerical property into another property. That may sound complicated in the abstract, so let&rsquo;s dive into an example using&nbsp;<a href=\"https://greensock.com/\" target=\"_blank\" rel=\"noopener\">GreenSock</a>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenMax.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"animated-number-demo\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"20\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>{{ animatedNumber }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#animated-number-demo'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    number: <span class=\"number\">0</span>,</span><br /><span class=\"line\">    tweenedNumber: <span class=\"number\">0</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    animatedNumber: <span class=\"function\"><span class=\"keyword\">function</span>() </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tweenedNumber.toFixed(<span class=\"number\">0</span>);</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  watch: {</span><br /><span class=\"line\">    number: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>) </span>{</span><br /><span class=\"line\">      TweenLite.to(<span class=\"keyword\">this</span>.$data, <span class=\"number\">0.5</span>, { <span class=\"attr\">tweenedNumber</span>: newValue });</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"animated-number-demo\" class=\"demo\"><input step=\"20\" type=\"number\" />\n" +
                    "<p>0</p>\n" +
                    "</div>\n" +
                    "<p>When you update the number, the change is animated below the input. This makes for a nice demo, but what about something that isn&rsquo;t directly stored as a number, like any valid CSS color for example? Here&rsquo;s how we could accomplish this with&nbsp;<a href=\"https://github.com/tweenjs/tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a>&nbsp;and&nbsp;<a href=\"https://github.com/brehaut/color-js\" target=\"_blank\" rel=\"noopener\">Color.js</a>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/tween.js@16.3.4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/color-js@1.0.3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-7\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"colorQuery\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"updateColor\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter a color\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"updateColor\"</span>&gt;</span>Update<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Preview:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"{ backgroundColor: tweenedCSSColor }\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"example-7-color-preview\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>{{ tweenedCSSColor }}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> Color = net.brehaut.Color</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example-7'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    colorQuery: <span class=\"string\">''</span>,</span><br /><span class=\"line\">    color: {</span><br /><span class=\"line\">      red: <span class=\"number\">0</span>,</span><br /><span class=\"line\">      green: <span class=\"number\">0</span>,</span><br /><span class=\"line\">      blue: <span class=\"number\">0</span>,</span><br /><span class=\"line\">      alpha: <span class=\"number\">1</span></span><br /><span class=\"line\">    },</span><br /><span class=\"line\">    tweenedColor: {}</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.tweenedColor = <span class=\"built_in\">Object</span>.assign({}, <span class=\"keyword\">this</span>.color)</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  watch: {</span><br /><span class=\"line\">    color: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span> () </span>{</span><br /><span class=\"line\">        <span class=\"keyword\">if</span> (TWEEN.update()) {</span><br /><span class=\"line\">          requestAnimationFrame(animate)</span><br /><span class=\"line\">        }</span><br /><span class=\"line\">      }</span><br /><br /><span class=\"line\">      <span class=\"keyword\">new</span> TWEEN.Tween(<span class=\"keyword\">this</span>.tweenedColor)</span><br /><span class=\"line\">        .to(<span class=\"keyword\">this</span>.color, <span class=\"number\">750</span>)</span><br /><span class=\"line\">        .start()</span><br /><br /><span class=\"line\">      animate()</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    tweenedCSSColor: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color({</span><br /><span class=\"line\">        red: <span class=\"keyword\">this</span>.tweenedColor.red,</span><br /><span class=\"line\">        green: <span class=\"keyword\">this</span>.tweenedColor.green,</span><br /><span class=\"line\">        blue: <span class=\"keyword\">this</span>.tweenedColor.blue,</span><br /><span class=\"line\">        alpha: <span class=\"keyword\">this</span>.tweenedColor.alpha</span><br /><span class=\"line\">      }).toCSS()</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    updateColor: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.color = <span class=\"keyword\">new</span> Color(<span class=\"keyword\">this</span>.colorQuery).toRGB()</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.colorQuery = <span class=\"string\">''</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight css\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"selector-class\">.example-7-color-preview</span> {</span><br /><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br /><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br /><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div id=\"example-7\" class=\"demo\"><input type=\"text\" placeholder=\"Enter a color\" />&nbsp;<button>Update</button>\n" +
                    "<p>Preview:</p>\n" +
                    "<p>#000000</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Dynamic-State-Transitions\"><a class=\"headerlink\" title=\"Dynamic State Transitions\" href=\"https://vuejs.org/v2/guide/transitioning-state.html#Dynamic-State-Transitions\" data-scroll=\"\">Dynamic State Transitions</a></h2>\n" +
                    "<p>As with Vue&rsquo;s transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you&rsquo;ve played with the variables a little.</p>\n" +
                    "<div id=\"svg-polygon-demo\" class=\"demo\"><label>Sides: 10</label><input class=\"demo-range-input\" max=\"500\" min=\"3\" type=\"range\" /><label>Minimum Radius: 50%</label><input class=\"demo-range-input\" max=\"90\" min=\"0\" type=\"range\" /><label>Update Interval: 500 milliseconds</label><input class=\"demo-range-input\" max=\"2000\" min=\"10\" type=\"range\" /></div>\n" +
                    "<p>See&nbsp;<a href=\"https://jsfiddle.net/chrisvfritz/65gLu2b6/\" target=\"_blank\" rel=\"noopener\">this fiddle</a>&nbsp;for the complete code behind the above demo.</p>");
            sec2Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec2Vue4);

            Section sec3Vue4 = new Section();
            sec3Vue4.setOrdinalNumber(3);
            sec2Vue4.setDescription("Mixins");
            sec3Vue4.setContent("<p>Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be &ldquo;mixed&rdquo; into the component&rsquo;s own options.</p>\n" +
                    "<p>Example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// define a mixin object</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> myMixin = {</span><br /><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.hello()</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    hello: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello from mixin!'</span>)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"comment\">// define a component that uses this mixin</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend({</span><br /><span class=\"line\">  mixins: [myMixin]</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> Component() <span class=\"comment\">// =&gt; \"hello from mixin!\"</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Option-Merging\"><a class=\"headerlink\" title=\"Option Merging\" href=\"https://vuejs.org/v2/guide/mixins.html#Option-Merging\" data-scroll=\"\">Option Merging</a></h2>\n" +
                    "<p>When a mixin and the component itself contain overlapping options, they will be &ldquo;merged&rdquo; using appropriate strategies.</p>\n" +
                    "<p>For example, data objects undergo a shallow merge (one property deep), with the component&rsquo;s data taking priority in cases of conflicts.</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = {</span><br /><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      message: <span class=\"string\">'hello'</span>,</span><br /><span class=\"line\">      foo: <span class=\"string\">'abc'</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  mixins: [mixin],</span><br /><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      message: <span class=\"string\">'goodbye'</span>,</span><br /><span class=\"line\">      bar: <span class=\"string\">'def'</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$data)</span><br /><span class=\"line\">    <span class=\"comment\">// =&gt; { message: \"goodbye\", foo: \"abc\", bar: \"def\" }</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Hook functions with the same name are merged into an array so that all of them will be called. Mixin hooks will be called&nbsp;<strong>before</strong>&nbsp;the component&rsquo;s own hooks.</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = {</span><br /><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'mixin hook called'</span>)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  mixins: [mixin],</span><br /><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'component hook called'</span>)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"comment\">// =&gt; \"mixin hook called\"</span></span><br /><span class=\"line\"><span class=\"comment\">// =&gt; \"component hook called\"</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Options that expect object values, for example&nbsp;<code>methods</code>,&nbsp;<code>components</code>&nbsp;and&nbsp;<code>directives</code>, will be merged into the same object. The component&rsquo;s options will take priority when there are conflicting keys in these objects:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> mixin = {</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br /><span class=\"line\">    },</span><br /><span class=\"line\">    conflicting: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from mixin'</span>)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  mixins: [mixin],</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</span><br /><span class=\"line\">    },</span><br /><span class=\"line\">    conflicting: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'from self'</span>)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\">vm.foo() <span class=\"comment\">// =&gt; \"foo\"</span></span><br /><span class=\"line\">vm.bar() <span class=\"comment\">// =&gt; \"bar\"</span></span><br /><span class=\"line\">vm.conflicting() <span class=\"comment\">// =&gt; \"from self\"</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Note that the same merge strategies are used in&nbsp;<code>Vue.extend()</code>.</p>");
            sec3Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec3Vue4);

            Section sec4Vue4 = new Section();
            sec4Vue4.setOrdinalNumber(4);
            sec4Vue4.setDescription("Custom Directives");
            sec4Vue4.setContent("<p>In addition to the default set of directives shipped in core (<code>v-model</code>&nbsp;and&nbsp;<code>v-show</code>), Vue also allows you to register your own custom directives. Note that in Vue 2.0, the primary form of code reuse and abstraction is components - however there may be cases where you need some low-level DOM access on plain elements, and this is where custom directives would still be useful. An example would be focusing on an input element, like this one:</p>\n" +
                    "<div id=\"simplest-directive-example\" class=\"demo\"><input type=\"text\" /></div>\n" +
                    "<p>When the page loads, that element gains focus (note:&nbsp;<code>autofocus</code>&nbsp;doesn&rsquo;t work on mobile Safari). In fact, if you haven&rsquo;t clicked on anything else since visiting this page, the input above should be focused now. Now let&rsquo;s build the directive that accomplishes this:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Register a global custom directive called `v-focus`</span></span><br /><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, {</span><br /><span class=\"line\">  <span class=\"comment\">// When the bound element is inserted into the DOM...</span></span><br /><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// Focus the element</span></span><br /><span class=\"line\">    el.focus()</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you want to register a directive locally instead, components also accept a&nbsp;<code>directives</code>option:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">directives: {</span><br /><span class=\"line\">  focus: {</span><br /><span class=\"line\">    <span class=\"comment\">// directive definition</span></span><br /><span class=\"line\">    inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>{</span><br /><span class=\"line\">      el.focus()</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then in a template, you can use the new&nbsp;<code>v-focus</code>&nbsp;attribute on any element, like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-focus</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Hook-Functions\"><a class=\"headerlink\" title=\"Hook Functions\" href=\"https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions\" data-scroll=\"\">Hook Functions</a></h2>\n" +
                    "<p>A directive definition object can provide several hook functions (all optional):</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><code>bind</code>: called only once, when the directive is first bound to the element. This is where you can do one-time setup work.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>inserted</code>: called when the bound element has been inserted into its parent node (this only guarantees parent node presence, not necessarily in-document).</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>update</code>: called after the containing component&rsquo;s VNode has updated,&nbsp;<strong>but possibly before its children have updated</strong>. The directive&rsquo;s value may or may not have changed, but you can skip unnecessary updates by comparing the binding&rsquo;s current and old values (see below on hook arguments).</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>componentUpdated</code>: called after the containing component&rsquo;s VNode&nbsp;<strong>and the VNodes of its children</strong>&nbsp;have updated.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><code>unbind</code>: called only once, when the directive is unbound from the element.</p>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<p>We&rsquo;ll explore the arguments passed into these hooks (i.e.&nbsp;<code>el</code>,&nbsp;<code>binding</code>,&nbsp;<code>vnode</code>, and&nbsp;<code>oldVnode</code>) in the next section.</p>");
            sec4Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec4Vue4);

            Section sec5Vue4 = new Section();
            sec5Vue4.setOrdinalNumber(5);
            sec5Vue4.setDescription("Render Functions & JSX");
            sec5Vue4.setContent("<p>Vue recommends using templates to build your HTML in the vast majority of cases. There are situations however, where you really need the full programmatic power of JavaScript. That&rsquo;s where you can use the&nbsp;<strong>render function</strong>, a closer-to-the-compiler alternative to templates.</p>\n" +
                    "<p>Let&rsquo;s dive into a simple example where a&nbsp;<code>render</code>&nbsp;function would be practical. Say you want to generate anchored headings:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello-world\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#hello-world\"</span>&gt;</span></span><br /><span class=\"line\">    Hello world!</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>For the HTML above, you decide you want this component interface:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">anchored-heading</span> <span class=\"attr\">:level</span>=<span class=\"string\">\"1\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">anchored-heading</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When you get started with a component that only generates a heading based on the&nbsp;<code>level</code>&nbsp;prop, you quickly arrive at this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-template\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anchored-heading-template\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h1 v-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 1\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h2 v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 2\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h3 v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 3\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h4 v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 4\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h5 v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 5\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"javascript\">  &lt;h6 v-<span class=\"keyword\">else</span>-<span class=\"keyword\">if</span>=<span class=\"string\">\"level === 6\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"javascript\">    &lt;slot&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br /><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, {</span><br /><span class=\"line\">  template: <span class=\"string\">'#anchored-heading-template'</span>,</span><br /><span class=\"line\">  props: {</span><br /><span class=\"line\">    level: {</span><br /><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br /><span class=\"line\">      required: <span class=\"literal\">true</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>That template doesn&rsquo;t feel great. It&rsquo;s not only verbose, but we&rsquo;re duplicating&nbsp;<code>&lt;slot&gt;&lt;/slot&gt;</code>&nbsp;for every heading level and will have to do the same when we add the anchor element.</p>\n" +
                    "<p>While templates work great for most components, it&rsquo;s clear that this isn&rsquo;t one of them. So let&rsquo;s try rewriting it with a&nbsp;<code>render</code>&nbsp;function:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, {</span><br /><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> createElement(</span><br /><span class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,   <span class=\"comment\">// tag name</span></span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.$slots.default <span class=\"comment\">// array of children</span></span><br /><span class=\"line\">    )</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  props: {</span><br /><span class=\"line\">    level: {</span><br /><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br /><span class=\"line\">      required: <span class=\"literal\">true</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Much simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. In this case, you have to know that when you pass children without a&nbsp;<code>slot</code>&nbsp;attribute into a component, like the&nbsp;<code>Hello world!</code>&nbsp;inside of&nbsp;<code>anchored-heading</code>, those children are stored on the component instance at&nbsp;<code>$slots.default</code>. If you haven&rsquo;t already,&nbsp;<strong>it&rsquo;s recommended to read through the&nbsp;<a href=\"https://vuejs.org/v2/api/#Instance-Properties\">instance properties API</a>&nbsp;before diving into render functions.</strong></p>");
            sec5Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec5Vue4);

            Section sec6Vue4 = new Section();
            sec6Vue4.setOrdinalNumber(6);
            sec6Vue4.setDescription("Plugins");
            sec6Vue4.setContent("<p>Use plugins by calling the&nbsp;<code>Vue.use()</code>&nbsp;global method. This has to be done before you start your app by calling&nbsp;<code>new Vue()</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// calls `MyPlugin.install(Vue)`</span></span><br /><span class=\"line\">Vue.use(MyPlugin)</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  <span class=\"comment\">//... options</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can optionally pass in some options:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.use(MyPlugin, { <span class=\"attr\">someOption</span>: <span class=\"literal\">true</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p><code>Vue.use</code>&nbsp;automatically prevents you from using the same plugin more than once, so calling it multiple times on the same plugin will install the plugin only once.</p>\n" +
                    "<p>Some plugins provided by Vue.js official plugins such as&nbsp;<code>vue-router</code>&nbsp;automatically calls&nbsp;<code>Vue.use()</code>&nbsp;if&nbsp;<code>Vue</code>&nbsp;is available as a global variable. However in a module environment such as CommonJS, you always need to call&nbsp;<code>Vue.use()</code>&nbsp;explicitly:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// When using CommonJS via Browserify or Webpack</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</span><br /><span class=\"line\"><span class=\"keyword\">var</span> VueRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-router'</span>)</span><br /><br /><span class=\"line\"><span class=\"comment\">// Don't forget to call this</span></span><br /><span class=\"line\">Vue.use(VueRouter)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Checkout&nbsp;<a href=\"https://github.com/vuejs/awesome-vue#components--libraries\" target=\"_blank\" rel=\"noopener\">awesome-vue</a>&nbsp;for a huge collection of community-contributed plugins and libraries.</p>\n" +
                    "<h2 id=\"Writing-a-Plugin\"><a class=\"headerlink\" title=\"Writing a Plugin\" href=\"https://vuejs.org/v2/guide/plugins.html#Writing-a-Plugin\" data-scroll=\"\">Writing a Plugin</a></h2>\n" +
                    "<p>A Vue.js plugin should expose an&nbsp;<code>install</code>&nbsp;method. The method will be called with the&nbsp;<code>Vue</code>&nbsp;constructor as the first argument, along with possible options:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>{</span><br /><span class=\"line\">  <span class=\"comment\">// 1. add global method or property</span></span><br /><span class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// some logic ...</span></span><br /><span class=\"line\">  }</span><br /><br /><span class=\"line\">  <span class=\"comment\">// 2. add a global asset</span></span><br /><span class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, {</span><br /><span class=\"line\">    bind (el, binding, vnode, oldVnode) {</span><br /><span class=\"line\">      <span class=\"comment\">// some logic ...</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">    ...</span><br /><span class=\"line\">  })</span><br /><br /><span class=\"line\">  <span class=\"comment\">// 3. inject some component options</span></span><br /><span class=\"line\">  Vue.mixin({</span><br /><span class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"comment\">// some logic ...</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">    ...</span><br /><span class=\"line\">  })</span><br /><br /><span class=\"line\">  <span class=\"comment\">// 4. add an instance method</span></span><br /><span class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">methodOptions</span>) </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// some logic ...</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec6Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec6Vue4);

            Section sec7Vue4 = new Section();
            sec7Vue4.setOrdinalNumber(7);
            sec7Vue4.setDescription("Filters");
            sec7Vue4.setContent("<p>Vue.js allows you to define filters that can be used to apply common text formatting. Filters are usable in two places:&nbsp;<strong>mustache interpolations and&nbsp;<code>v-bind</code>&nbsp;expressions</strong>&nbsp;(the latter supported in 2.1.0+). Filters should be appended to the end of the JavaScript expression, denoted by the &ldquo;pipe&rdquo; symbol:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- in mustaches --&gt;</span></span><br /><span class=\"line\">{{ message | capitalize }}</span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can define local filters in a component&rsquo;s options:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">filters: {</span><br /><span class=\"line\">  capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br /><span class=\"line\">    value = value.toString()</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>or define a filter globally before creating the Vue instance:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.filter(<span class=\"string\">'capitalize'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br /><span class=\"line\">  value = value.toString()</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Below is an example of our&nbsp;<code>capitalize</code>&nbsp;filter being used:</p>\n" +
                    "<div id=\"example_1\" class=\"demo\"><input type=\"text\" />\n" +
                    "<p>John</p>\n" +
                    "</div>\n" +
                    "<p>The filter&rsquo;s function always receives the expression&rsquo;s value (the result of the former chain) as its first argument. In the above example, the&nbsp;<code>capitalize</code>&nbsp;filter function will receive the value of&nbsp;<code>message</code>&nbsp;as its argument.</p>\n" +
                    "<p>Filters can be chained:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{{ message | filterA | filterB }}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In this case,&nbsp;<code>filterA</code>, defined with a single argument, will receive the value of&nbsp;<code>message</code>, and then the&nbsp;<code>filterB</code>&nbsp;function will be called with the result of&nbsp;<code>filterA</code>passed into&nbsp;<code>filterB</code>&lsquo;s single argument.</p>\n" +
                    "<p>Filters are JavaScript functions, therefore they can take arguments:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{{ message | filterA('arg1', arg2) }}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Here&nbsp;<code>filterA</code>&nbsp;is defined as a function taking three arguments. The value of&nbsp;<code>message</code>will be passed into the first argument. The plain string&nbsp;<code>'arg1'</code>&nbsp;will be passed into the&nbsp;<code>filterA</code>&nbsp;as its second argument, and the value of expression&nbsp;<code>arg2</code>&nbsp;will be evaluated and passed in as the third argument.</p>");
            sec7Vue4.setLesson(vueJsLesson4);
            vueJsLesson4.getSections().add(sec7Vue4);

            Section sec1Vue5 = new Section();
            sec1Vue5.setOrdinalNumber(1);
            sec1Vue5.setDescription("Production Deployment");
            sec1Vue5.setContent("<p>During development, Vue provides a lot of warnings to help you with common errors and pitfalls. However, these warning strings become useless in production and bloat your app&rsquo;s payload size. In addition, some of these warning checks have small runtime costs that can be avoided in production mode.</p>\n" +
                    "<h3 id=\"Without-Build-Tools\"><a class=\"headerlink\" title=\"Without Build Tools\" href=\"https://vuejs.org/v2/guide/deployment.html#Without-Build-Tools\" data-scroll=\"\">Without Build Tools</a></h3>\n" +
                    "<p>If you are using the full build, i.e. directly including Vue via a script tag without a build tool, make sure to use the minified version (<code>vue.min.js</code>) for production. Both versions can be found in the&nbsp;<a href=\"https://vuejs.org/v2/guide/installation.html#Direct-lt-script-gt-Include\">Installation guide</a>.</p>\n" +
                    "<h3 id=\"With-Build-Tools\"><a class=\"headerlink\" title=\"With Build Tools\" href=\"https://vuejs.org/v2/guide/deployment.html#With-Build-Tools\" data-scroll=\"\">With Build Tools</a></h3>\n" +
                    "<p>When using a build tool like Webpack or Browserify, the production mode will be determined by&nbsp;<code>process.env.NODE_ENV</code>&nbsp;inside Vue&rsquo;s source code, and it will be in development mode by default. Both build tools provide ways to overwrite this variable to enable Vue&rsquo;s production mode, and warnings will be stripped by minifiers during the build. All&nbsp;<code>vue-cli</code>&nbsp;templates have these pre-configured for you, but it would be beneficial to know how it is done:</p>\n" +
                    "<h4 id=\"Webpack\">Webpack</h4>\n" +
                    "<p>In Webpack 4+, you can use the&nbsp;<code>mode</code>&nbsp;option:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br /><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>But in Webpack 3 and earlier, you&rsquo;ll need to use&nbsp;<a href=\"https://webpack.js.org/plugins/define-plugin/\" target=\"_blank\" rel=\"noopener\">DefinePlugin</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br /><br /><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">  plugins: [</span><br /><span class=\"line\">    <span class=\"comment\">// ...</span></span><br /><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin({</span><br /><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br /><span class=\"line\">    })</span><br /><span class=\"line\">  ]</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h4 id=\"Browserify\">Browserify</h4>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p>Run your bundling command with the actual&nbsp;<code>NODE_ENV</code>&nbsp;environment variable set to&nbsp;<code>\"production\"</code>. This tells&nbsp;<code>vueify</code>&nbsp;to avoid including hot-reload and development related code.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Apply a global&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;transform to your bundle. This allows the minifier to strip out all the warnings in Vue&rsquo;s source code wrapped in env variable conditional blocks. For example:</p>\n" +
                    "<figure class=\"highlight bash\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">NODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m &gt; build.js</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Or, using&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;with Gulp:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Use the envify custom module to specify environment variables</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> envify = <span class=\"built_in\">require</span>(<span class=\"string\">'envify/custom'</span>)</span><br /><br /><span class=\"line\">browserify(browserifyOptions)</span><br /><span class=\"line\">  .transform(vueify)</span><br /><span class=\"line\">  .transform(</span><br /><span class=\"line\">    <span class=\"comment\">// Required in order to process node_modules files</span></span><br /><span class=\"line\">    { <span class=\"attr\">global</span>: <span class=\"literal\">true</span> },</span><br /><span class=\"line\">    envify({ <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'production'</span> })</span><br /><span class=\"line\">  )</span><br /><span class=\"line\">  .bundle()</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Or, using&nbsp;<a href=\"https://github.com/hughsk/envify\" target=\"_blank\" rel=\"noopener\">envify</a>&nbsp;with Grunt and&nbsp;<a href=\"https://github.com/jmreidy/grunt-browserify\" target=\"_blank\" rel=\"noopener\">grunt-browserify</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Use the envify custom module to specify environment variables</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> envify = <span class=\"built_in\">require</span>(<span class=\"string\">'envify/custom'</span>)</span><br /><br /><span class=\"line\">browserify: {</span><br /><span class=\"line\">  dist: {</span><br /><span class=\"line\">    options: {</span><br /><span class=\"line\">      <span class=\"comment\">// Function to deviate from grunt-browserify's default order</span></span><br /><span class=\"line\">      configure: <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> b</span><br /><span class=\"line\">        .transform(<span class=\"string\">'vueify'</span>)</span><br /><span class=\"line\">        .transform(</span><br /><span class=\"line\">          <span class=\"comment\">// Required in order to process node_modules files</span></span><br /><span class=\"line\">          { <span class=\"attr\">global</span>: <span class=\"literal\">true</span> },</span><br /><span class=\"line\">          envify({ <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">'production'</span> })</span><br /><span class=\"line\">        )</span><br /><span class=\"line\">        .bundle()</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<h4 id=\"Rollup\">Rollup</h4>\n" +
                    "<p>Use&nbsp;<a href=\"https://github.com/rollup/rollup-plugin-replace\" target=\"_blank\" rel=\"noopener\">rollup-plugin-replace</a>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">const</span> replace = <span class=\"built_in\">require</span>(<span class=\"string\">'rollup-plugin-replace'</span>)</span><br /><br /><span class=\"line\">rollup({</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">  plugins: [</span><br /><span class=\"line\">    replace({</span><br /><span class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify( <span class=\"string\">'production'</span> )</span><br /><span class=\"line\">    })</span><br /><span class=\"line\">  ]</span><br /><span class=\"line\">}).then(...)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec1Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec1Vue5);

            Section sec2Vue5 = new Section();
            sec2Vue5.setOrdinalNumber(2);
            sec2Vue5.setDescription("Single File Components");
            sec2Vue5.setContent("<p>In many Vue projects, global components will be defined using&nbsp;<code>Vue.component</code>, followed by&nbsp;<code>new Vue({ el: '#container' })</code>&nbsp;to target a container element in the body of every page.</p>\n" +
                    "<p>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</p>\n" +
                    "<ul>\n" +
                    "<li><strong>Global definitions</strong>&nbsp;force unique names for every component</li>\n" +
                    "<li><strong>String templates</strong>&nbsp;lack syntax highlighting and require ugly slashes for multiline HTML</li>\n" +
                    "<li><strong>No CSS support</strong>&nbsp;means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</li>\n" +
                    "<li><strong>No build step</strong>&nbsp;restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</li>\n" +
                    "</ul>\n" +
                    "<p>All of these are solved by&nbsp;<strong>single-file components</strong>&nbsp;with a&nbsp;<code>.vue</code>&nbsp;extension, made possible with build tools such as Webpack or Browserify.</p>\n" +
                    "<p>Here&rsquo;s an example of a file we&rsquo;ll call&nbsp;<code>Hello.vue</code>:</p>\n" +
                    "<p><a href=\"https://gist.github.com/chrisvfritz/e2b6a6110e0829d78fa4aedf7cf6b235\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://vuejs.org/images/vue-component.png\" alt=\"Single-file component example (click for code as text)\" /></a></p>\n" +
                    "<p>Now we get:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/vuejs/awesome-vue#source-code-editing\" target=\"_blank\" rel=\"noopener\">Complete syntax highlighting</a></li>\n" +
                    "<li><a href=\"https://webpack.js.org/concepts/modules/#what-is-a-webpack-module\" target=\"_blank\" rel=\"noopener\">CommonJS modules</a></li>\n" +
                    "<li><a href=\"https://vue-loader.vuejs.org/en/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\">Component-scoped CSS</a></li>\n" +
                    "</ul>\n" +
                    "<p>As promised, we can also use preprocessors such as Pug, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</p>\n" +
                    "<p><a href=\"https://gist.github.com/chrisvfritz/1c9f2daea9bc078dcb47e9a82e5f7587\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://vuejs.org/images/vue-component-with-preprocessors.png\" alt=\"Single-file component example with preprocessors (click for code as text)\" /></a></p>\n" +
                    "<p>These specific languages are only examples. You could as easily use Bubl&eacute;, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with&nbsp;<code>vue-loader</code>, it also has first-class support for CSS Modules.</p>\n" +
                    "<h3 id=\"What-About-Separation-of-Concerns\"><a class=\"headerlink\" title=\"What About Separation of Concerns?\" href=\"https://vuejs.org/v2/guide/single-file-components.html#What-About-Separation-of-Concerns\" data-scroll=\"\">What About Separation of Concerns?</a></h3>\n" +
                    "<p>One important thing to note is that&nbsp;<strong>separation of concerns is not equal to separation of file types.</strong>&nbsp;In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic and styles are inherently coupled, and collocating them actually makes the component more cohesive and maintainable.</p>\n" +
                    "<p>Even if you don&rsquo;t like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- my-component.vue --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This will be pre-compiled<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./my-component.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./my-component.css\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h2 id=\"Getting-Started\"><a class=\"headerlink\" title=\"Getting Started\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Getting-Started\" data-scroll=\"\">Getting Started</a></h2>\n" +
                    "<h3 id=\"Example-Sandbox\"><a class=\"headerlink\" title=\"Example Sandbox\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Example-Sandbox\" data-scroll=\"\">Example Sandbox</a></h3>\n" +
                    "<p>If you want to dive right in and start playing with single-file components, check out&nbsp;<a href=\"https://codesandbox.io/s/o29j95wx9\" target=\"_blank\" rel=\"noopener\">this simple todo app</a>&nbsp;on CodeSandbox.</p>\n" +
                    "<h3 id=\"For-Users-New-to-Module-Build-Systems-in-JavaScript\"><a class=\"headerlink\" title=\"For Users New to Module Build Systems in JavaScript\" href=\"https://vuejs.org/v2/guide/single-file-components.html#For-Users-New-to-Module-Build-Systems-in-JavaScript\" data-scroll=\"\">For Users New to Module Build Systems in JavaScript</a></h3>\n" +
                    "<p>With&nbsp;<code>.vue</code>&nbsp;components, we&rsquo;re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven&rsquo;t already:</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><strong>Node Package Manager (NPM)</strong>: Read the&nbsp;<a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"noopener\">Getting Started guide</a>&nbsp;through section&nbsp;<em>10: Uninstalling global packages</em>.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><strong>Modern JavaScript with ES2015/16</strong>: Read through Babel&rsquo;s&nbsp;<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">Learn ES2015 guide</a>. You don&rsquo;t have to memorize every feature right now, but keep this page as a reference you can come back to.</p>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<p>After you&rsquo;ve taken a day to dive into these resources, we recommend checking out the&nbsp;<a href=\"https://vuejs-templates.github.io/webpack\" target=\"_blank\" rel=\"noopener\">webpack</a>&nbsp;template. Follow the instructions and you should have a Vue project with&nbsp;<code>.vue</code>&nbsp;components, ES2015, and hot-reloading in no time!</p>\n" +
                    "<p>To learn more about Webpack itself, check out&nbsp;<a href=\"https://webpack.js.org/configuration/\" target=\"_blank\" rel=\"noopener\">their official docs</a>&nbsp;and&nbsp;<a href=\"https://webpack.academy/p/the-core-concepts\" target=\"_blank\" rel=\"noopener\">Webpack Academy</a>. In Webpack, each file can be transformed by a &ldquo;loader&rdquo; before being included in the bundle, and Vue offers the&nbsp;<a href=\"https://vue-loader.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue-loader</a>&nbsp;plugin to translate single-file (<code>.vue</code>) components.</p>\n" +
                    "<h3 id=\"For-Advanced-Users\"><a class=\"headerlink\" title=\"For Advanced Users\" href=\"https://vuejs.org/v2/guide/single-file-components.html#For-Advanced-Users\" data-scroll=\"\">For Advanced Users</a></h3>\n" +
                    "<p>Whether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing&nbsp;<a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">github.com/vuejs-templates</a>, picking a template that&rsquo;s right for you, then following the instructions in the README to generate a new project with&nbsp;<a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>.</p>");
            sec2Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec2Vue5);

            Section sec3Vue5 = new Section();
            sec3Vue5.setOrdinalNumber(3);
            sec3Vue5.setDescription("Class and Style Bindings");
            sec3Vue5.setContent("<h3 id=\"Object-Syntax\"><a class=\"headerlink\" title=\"Object Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Object-Syntax\" data-scroll=\"\">Object Syntax</a></h3>\n" +
                    "<p>We can pass an object to&nbsp;<code>v-bind:class</code>&nbsp;to dynamically toggle classes:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The above syntax means the presence of the&nbsp;<code>active</code>&nbsp;class will be determined by the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener\">truthiness</a>&nbsp;of the data property&nbsp;<code>isActive</code>.</p>\n" +
                    "<p>You can have multiple classes toggled by having more fields in the object. In addition, the&nbsp;<code>v-bind:class</code>&nbsp;directive can also co-exist with the plain&nbsp;<code>class</code>&nbsp;attribute. So given the following template:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive, 'text-danger': hasError }\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>And the following data:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">  hasError: <span class=\"literal\">false</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It will render:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When&nbsp;<code>isActive</code>&nbsp;or&nbsp;<code>hasError</code>&nbsp;changes, the class list will be updated accordingly. For example, if&nbsp;<code>hasError</code>&nbsp;becomes&nbsp;<code>true</code>, the class list will become&nbsp;<code>\"static active text-danger\"</code>.</p>\n" +
                    "<p>The bound object doesn&rsquo;t have to be inline:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  classObject: {</span><br /><span class=\"line\">    active: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">    <span class=\"string\">'text-danger'</span>: <span class=\"literal\">false</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This will render the same result. We can also bind to a&nbsp;<a href=\"https://vuejs.org/v2/guide/computed.html\">computed property</a>&nbsp;that returns an object. This is a common and powerful pattern:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  isActive: <span class=\"literal\">true</span>,</span><br /><span class=\"line\">  error: <span class=\"literal\">null</span></span><br /><span class=\"line\">},</span><br /><span class=\"line\">computed: {</span><br /><span class=\"line\">  classObject: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      active: <span class=\"keyword\">this</span>.isActive &amp;&amp; !<span class=\"keyword\">this</span>.error,</span><br /><span class=\"line\">      <span class=\"string\">'text-danger'</span>: <span class=\"keyword\">this</span>.error &amp;&amp; <span class=\"keyword\">this</span>.error.type === <span class=\"string\">'fatal'</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Array-Syntax\"><a class=\"headerlink\" title=\"Array Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Array-Syntax\" data-scroll=\"\">Array Syntax</a></h3>\n" +
                    "<p>We can pass an array to&nbsp;<code>v-bind:class</code>&nbsp;to apply a list of classes:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[activeClass, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  activeClass: <span class=\"string\">'active'</span>,</span><br /><span class=\"line\">  errorClass: <span class=\"string\">'text-danger'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Which will render:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active text-danger\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[isActive ? activeClass : '', errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This will always apply&nbsp;<code>errorClass</code>, but will only apply&nbsp;<code>activeClass</code>&nbsp;when&nbsp;<code>isActive</code>is truthy.</p>\n" +
                    "<p>However, this can be a bit verbose if you have multiple conditional classes. That&rsquo;s why it&rsquo;s also possible to use the object syntax inside array syntax:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[{ active: isActive }, errorClass]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"With-Components\"><a class=\"headerlink\" title=\"With Components\" href=\"https://vuejs.org/v2/guide/class-and-style.html#With-Components\" data-scroll=\"\">With Components</a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>This section assumes knowledge of&nbsp;<a href=\"https://vuejs.org/v2/guide/components.html\">Vue Components</a>. Feel free to skip it and come back later.</p>\n" +
                    "</blockquote>\n" +
                    "<p>When you use the&nbsp;<code>class</code>&nbsp;attribute on a custom component, those classes will be added to the component&rsquo;s root element. Existing classes on this element will not be overwritten.</p>\n" +
                    "<p>For example, if you declare this component:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, {</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then add some classes when using it:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">class</span>=<span class=\"string\">\"baz boo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The rendered HTML will be:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar baz boo\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The same is true for class bindings:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"{ active: isActive }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>When&nbsp;<code>isActive</code>&nbsp;is truthy, the rendered HTML will be:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec3Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec3Vue5);

            Section sec4Vue5 = new Section();
            sec4Vue5.setOrdinalNumber(4);
            sec4Vue5.setDescription("Conditional Rendering");
            sec4Vue5.setContent("<p>In string templates, for example&nbsp;<a href=\"https://handlebarsjs.com/\" target=\"_blank\" rel=\"noopener\">Handlebars</a>, we would write a conditional block like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- Handlebars template --&gt;</span></span><br /><span class=\"line\">{{#if ok}}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">{{/if}}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>In Vue, we use the&nbsp;<code>v-if</code>&nbsp;directive to achieve the same:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It is also possible to add an &ldquo;else block&rdquo; with&nbsp;<code>v-else</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Conditional-Groups-with-v-if-on-lt-template-gt\"><a class=\"headerlink\" style=\"text-decoration: none; color: #2c3e50; font-weight: 600; pointer-events: auto;\" title=\"Conditional Groups with v-if on &lt;template&gt;\" href=\"https://vuejs.org/v2/guide/conditional.html#Conditional-Groups-with-v-if-on-lt-template-gt\" data-scroll=\"\">Conditional Groups with&nbsp;<code>v-if</code>&nbsp;on&nbsp;<code>&lt;template&gt;</code></a></h3>\n" +
                    "<p>Because&nbsp;<code>v-if</code>&nbsp;is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use&nbsp;<code>v-if</code>&nbsp;on a&nbsp;<code>&lt;template&gt;</code>&nbsp;element, which serves as an invisible wrapper. The final rendered result will not include the&nbsp;<code>&lt;template&gt;</code>&nbsp;element.</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Paragraph 2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"v-else\"><a class=\"headerlink\" title=\"v-else\" href=\"https://vuejs.org/v2/guide/conditional.html#v-else\" data-scroll=\"\"><code>v-else</code></a></h3>\n" +
                    "<p>You can use the&nbsp;<code>v-else</code>&nbsp;directive to indicate an &ldquo;else block&rdquo; for&nbsp;<code>v-if</code>:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></span><br /><span class=\"line\">  Now you see me</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  Now you don't</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>A&nbsp;<code>v-else</code>&nbsp;element must immediately follow a&nbsp;<code>v-if</code>&nbsp;or a&nbsp;<code>v-else-if</code>&nbsp;element - otherwise it will not be recognized.</p>\n" +
                    "<h3 id=\"v-else-if\"><a class=\"headerlink\" title=\"v-else-if\" href=\"https://vuejs.org/v2/guide/conditional.html#v-else-if\" data-scroll=\"\"><code>v-else-if</code></a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.1.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>The&nbsp;<code>v-else-if</code>, as the name suggests, serves as an &ldquo;else if block&rdquo; for&nbsp;<code>v-if</code>. It can also be chained multiple times:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br /><span class=\"line\">  A</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br /><span class=\"line\">  B</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br /><span class=\"line\">  C</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  Not A/B/C</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Similar to&nbsp;<code>v-else</code>, a&nbsp;<code>v-else-if</code>&nbsp;element must immediately follow a&nbsp;<code>v-if</code>&nbsp;or a&nbsp;<code>v-else-if</code>&nbsp;element.</p>\n" +
                    "<h3 id=\"Controlling-Reusable-Elements-with-key\"><a class=\"headerlink\" title=\"Controlling Reusable Elements with key\" href=\"https://vuejs.org/v2/guide/conditional.html#Controlling-Reusable-Elements-with-key\" data-scroll=\"\">Controlling Reusable Elements with&nbsp;<code>key</code></a></h3>\n" +
                    "<p>Vue tries to render elements as efficiently as possible, often re-using them instead of rendering from scratch. Beyond helping make Vue very fast, this can have some useful advantages. For example, if you allow users to toggle between multiple login types:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then switching the&nbsp;<code>loginType</code>&nbsp;in the code above will not erase what the user has already entered. Since both templates use the same elements, the&nbsp;<code>&lt;input&gt;</code>&nbsp;is not replaced - just its&nbsp;<code>placeholder</code>.</p>\n" +
                    "<p>Check it out for yourself by entering some text in the input, then pressing the toggle button:</p>\n" +
                    "<div id=\"no-key-example\" class=\"demo\">\n" +
                    "<div><label>Username</label>&nbsp;<input type=\"text\" placeholder=\"Enter your username\" /></div>\n" +
                    "<button>Toggle login type</button></div>\n" +
                    "<p>This isn&rsquo;t always desirable though, so Vue offers a way for you to say, &ldquo;These two elements are completely separate - don&rsquo;t re-use them.&rdquo; Add a&nbsp;<code>key</code>&nbsp;attribute with unique values:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your username\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"username-input\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter your email address\"</span> <span class=\"attr\">key</span>=<span class=\"string\">\"email-input\"</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now those inputs will be rendered from scratch each time you toggle. See for yourself:</p>\n" +
                    "<div id=\"key-example\" class=\"demo\">\n" +
                    "<div><label>Username</label>&nbsp;<input type=\"text\" placeholder=\"Enter your username\" /></div>\n" +
                    "<button>Toggle login type</button></div>\n" +
                    "<p>Note that the&nbsp;<code>&lt;label&gt;</code>&nbsp;elements are still efficiently re-used, because they don&rsquo;t have&nbsp;<code>key</code>&nbsp;attributes.</p>\n" +
                    "<h2 id=\"v-show\"><a class=\"headerlink\" title=\"v-show\" href=\"https://vuejs.org/v2/guide/conditional.html#v-show\" data-scroll=\"\"><code>v-show</code></a></h2>\n" +
                    "<p>Another option for conditionally displaying an element is the&nbsp;<code>v-show</code>&nbsp;directive. The usage is largely the same:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The difference is that an element with&nbsp;<code>v-show</code>&nbsp;will always be rendered and remain in the DOM;&nbsp;<code>v-show</code>&nbsp;only toggles the&nbsp;<code>display</code>&nbsp;CSS property of the element.</p>\n" +
                    "<p class=\"tip\">Note that&nbsp;<code>v-show</code>&nbsp;doesn&rsquo;t support the&nbsp;<code>&lt;template&gt;</code>&nbsp;element, nor does it work with&nbsp;<code>v-else</code>.</p>\n" +
                    "<h2 id=\"v-if-vs-v-show\"><a class=\"headerlink\" title=\"v-if vs v-show\" href=\"https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show\" data-scroll=\"\"><code>v-if</code>&nbsp;vs&nbsp;<code>v-show</code></a></h2>\n" +
                    "<p><code>v-if</code>&nbsp;is &ldquo;real&rdquo; conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.</p>\n" +
                    "<p><code>v-if</code>&nbsp;is also&nbsp;<strong>lazy</strong>: if the condition is false on initial render, it will not do anything - the conditional block won&rsquo;t be rendered until the condition becomes true for the first time.</p>\n" +
                    "<p>In comparison,&nbsp;<code>v-show</code>&nbsp;is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.</p>\n" +
                    "<p>Generally speaking,&nbsp;<code>v-if</code>&nbsp;has higher toggle costs while&nbsp;<code>v-show</code>&nbsp;has higher initial render costs. So prefer&nbsp;<code>v-show</code>&nbsp;if you need to toggle something very often, and prefer&nbsp;<code>v-if</code>&nbsp;if the condition is unlikely to change at runtime.</p>\n" +
                    "<h2 id=\"v-if-with-v-for\"><a class=\"headerlink\" title=\"v-if with v-for\" href=\"https://vuejs.org/v2/guide/conditional.html#v-if-with-v-for\" data-scroll=\"\"><code>v-if</code>&nbsp;with&nbsp;<code>v-for</code></a></h2>\n" +
                    "<p class=\"tip\">Using&nbsp;<code>v-if</code>&nbsp;and&nbsp;<code>v-for</code>&nbsp;together is&nbsp;<strong>not recommended</strong>. See the&nbsp;<a href=\"https://vuejs.org/v2/style-guide/#Avoid-v-if-with-v-for-essential\">style guide</a>&nbsp;for further information.</p>\n" +
                    "<p>When used together with&nbsp;<code>v-if</code>,&nbsp;<code>v-for</code>&nbsp;has a higher priority than&nbsp;<code>v-if</code>. See the&nbsp;<a href=\"https://vuejs.org/v2/guide/list.html#V-for-and-v-if\">list rendering guide</a>&nbsp;for details.</p>");
            sec4Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec4Vue5);

            Section sec5Vue5 = new Section();
            sec5Vue5.setOrdinalNumber(5);
            sec5Vue5.setDescription("Migration from Vue 1.x");
            sec5Vue5.setContent("<blockquote>\n" +
                    "<p>Woah - this is a super long page! Does that mean 2.0 is completely different, I&rsquo;ll have to learn the basics all over again, and migrating will be practically impossible?</p>\n" +
                    "</blockquote>\n" +
                    "<p>I&rsquo;m glad you asked! The answer is no. About 90% of the API is the same and the core concepts haven&rsquo;t changed. It&rsquo;s long because we like to offer very detailed explanations and include a lot of examples. Rest assured,&nbsp;<strong>this is not something you have to read from top to bottom!</strong></p>\n" +
                    "<blockquote>\n" +
                    "<p>Where should I start in a migration?</p>\n" +
                    "</blockquote>\n" +
                    "<ol>\n" +
                    "<li>\n" +
                    "<p>Start by running the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on a current project. We&rsquo;ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they&rsquo;ll let you know, offer suggestions, and provide links to more info.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn&rsquo;t catch, check it out.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>If you have any tests, run them and see what still fails. If you don&rsquo;t have tests, just open the app in your browser and keep an eye out for warnings or errors as you navigate around.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>By now, your app should be fully migrated. If you&rsquo;re still hungry for more though, you can read the rest of this page - or dive in to the new and improved guide from&nbsp;<a href=\"https://vuejs.org/v2/guide/index.html\">the beginning</a>. Many parts will be skimmable, since you&rsquo;re already familiar with the core concepts.</p>\n" +
                    "</li>\n" +
                    "</ol>\n" +
                    "<blockquote>\n" +
                    "<p>How long will it take to migrate a Vue 1.x app to 2.0?</p>\n" +
                    "</blockquote>\n" +
                    "<p>It depends on a few factors:</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p>The size of your app (small to medium-sized apps will probably be less than a day)</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>How many times you get distracted and start playing with a cool new feature. \uD83D\uDE09 &nbsp;Not judging, it also happened to us while building 2.0!</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p>Which obsolete features you&rsquo;re using. Most can be upgraded with find-and-replace, but others might take a few minutes. If you&rsquo;re not currently following best practices, Vue 2.0 will also try harder to force you to. This is a good thing in the long run, but could also mean a significant (though possibly overdue) refactor.</p>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<blockquote>\n" +
                    "<p>If I upgrade to Vue 2, will I also have to upgrade Vuex and Vue Router?</p>\n" +
                    "</blockquote>\n" +
                    "<p>Only Vue Router 2 is compatible with Vue 2, so yes, you&rsquo;ll have to follow the&nbsp;<a href=\"https://vuejs.org/v2/guide/migration-vue-router.html\">migration path for Vue Router</a>&nbsp;as well. Fortunately, most applications don&rsquo;t have a lot of router code, so this likely won&rsquo;t take more than an hour.</p>\n" +
                    "<p>As for Vuex, even version 0.8 is compatible with Vue 2, so you&rsquo;re not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.</p>");
            sec5Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec5Vue5);

            Section sec6Vue5 = new Section();
            sec6Vue5.setOrdinalNumber(6);
            sec6Vue5.setDescription("Migration from Vue 2.x");
            sec6Vue5.setContent("<h2 id=\"Templates\"><a class=\"headerlink\" title=\"Templates\" href=\"https://vuejs.org/v2/guide/migration.html#Templates\" data-scroll=\"\">Templates</a></h2>\n" +
                    "<h3 id=\"Fragment-Instances-removed\"><a class=\"headerlink\" title=\"Fragment Instances removed\" href=\"https://vuejs.org/v2/guide/migration.html#Fragment-Instances-removed\" data-scroll=\"\">Fragment Instances&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Every component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It&rsquo;s recommended to wrap the entire contents in a new element, like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run your end-to-end test suite or app after upgrading and look for&nbsp;<strong>console warnings</strong>&nbsp;about multiple root elements in a template.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Lifecycle-Hooks\"><a class=\"headerlink\" title=\"Lifecycle Hooks\" href=\"https://vuejs.org/v2/guide/migration.html#Lifecycle-Hooks\" data-scroll=\"\">Lifecycle Hooks</a></h2>\n" +
                    "<h3 id=\"beforeCompile-removed\"><a class=\"headerlink\" title=\"beforeCompile removed\" href=\"https://vuejs.org/v2/guide/migration.html#beforeCompile-removed\" data-scroll=\"\"><code>beforeCompile</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Use the&nbsp;<code>created</code>&nbsp;hook instead.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"compiled-replaced\"><a class=\"headerlink\" title=\"compiled replaced\" href=\"https://vuejs.org/v2/guide/migration.html#compiled-replaced\" data-scroll=\"\"><code>compiled</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>Use the new&nbsp;<code>mounted</code>&nbsp;hook instead.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"attached-removed\"><a class=\"headerlink\" title=\"attached removed\" href=\"https://vuejs.org/v2/guide/migration.html#attached-removed\" data-scroll=\"\"><code>attached</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">attached: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  doSomething()</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You could use:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    doSomething()</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"detached-removed\"><a class=\"headerlink\" title=\"detached removed\" href=\"https://vuejs.org/v2/guide/migration.html#detached-removed\" data-scroll=\"\"><code>detached</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Use a custom in-DOM check in other hooks. For example, to replace:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">detached: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  doSomething()</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You could use:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">destroyed: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    doSomething()</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"init-renamed\"><a class=\"headerlink\" title=\"init renamed\" href=\"https://vuejs.org/v2/guide/migration.html#init-renamed\" data-scroll=\"\"><code>init</code>&nbsp;<sup>renamed</sup></a></h3>\n" +
                    "<p>Use the new&nbsp;<code>beforeCreate</code>&nbsp;hook instead, which is essentially the same thing. It was renamed for consistency with other lifecycle methods.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"ready-replaced\"><a class=\"headerlink\" title=\"ready replaced\" href=\"https://vuejs.org/v2/guide/migration.html#ready-replaced\" data-scroll=\"\"><code>ready</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>Use the new&nbsp;<code>mounted</code>&nbsp;hook instead. It should be noted though that with&nbsp;<code>mounted</code>, there&rsquo;s no guarantee to be in-document. For that, also include&nbsp;<code>Vue.nextTick</code>/<code>vm.$nextTick</code>. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">mounted: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// code that assumes this.$el is in-document</span></span><br /><span class=\"line\">  })</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find all examples of this hook.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"v-for\"><a class=\"headerlink\" title=\"v-for\" href=\"https://vuejs.org/v2/guide/migration.html#v-for\" data-scroll=\"\"><code>v-for</code></a></h2>\n" +
                    "<h3 id=\"v-for-Argument-Order-for-Arrays-changed\"><a class=\"headerlink\" title=\"v-for Argument Order for Arrays changed\" href=\"https://vuejs.org/v2/guide/migration.html#v-for-Argument-Order-for-Arrays-changed\" data-scroll=\"\"><code>v-for</code>&nbsp;Argument Order for Arrays&nbsp;<sup>changed</sup></a></h3>\n" +
                    "<p>When including an&nbsp;<code>index</code>, the argument order for arrays used to be&nbsp;<code>(index, value)</code>. It is now&nbsp;<code>(value, index)</code>&nbsp;to be more consistent with JavaScript&rsquo;s native array methods such as&nbsp;<code>forEach</code>&nbsp;and&nbsp;<code>map</code>.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like&nbsp;<code>position</code>&nbsp;or&nbsp;<code>num</code>, the helper will not flag them.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"v-for-Argument-Order-for-Objects-changed\"><a class=\"headerlink\" title=\"v-for Argument Order for Objects changed\" href=\"https://vuejs.org/v2/guide/migration.html#v-for-Argument-Order-for-Objects-changed\" data-scroll=\"\"><code>v-for</code>&nbsp;Argument Order for Objects&nbsp;<sup>changed</sup></a></h3>\n" +
                    "<p>When including a&nbsp;<code>key</code>, the argument order for objects used to be&nbsp;<code>(key, value)</code>. It is now&nbsp;<code>(value, key)</code>&nbsp;to be more consistent with common object iterators such as lodash&rsquo;s.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like&nbsp;<code>name</code>&nbsp;or&nbsp;<code>property</code>, the helper will not flag them.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"index-and-key-removed\"><a class=\"headerlink\" title=\"$index and $key removed\" href=\"https://vuejs.org/v2/guide/migration.html#index-and-key-removed\" data-scroll=\"\"><code>$index</code>&nbsp;and&nbsp;<code>$key</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>The implicitly assigned&nbsp;<code>$index</code>&nbsp;and&nbsp;<code>$key</code>&nbsp;variables have been removed in favor of explicitly defining them in&nbsp;<code>v-for</code>. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of these removed variables. If you miss any, you should also see&nbsp;<strong>console errors</strong>&nbsp;such as:&nbsp;<code>Uncaught ReferenceError: $index is not defined</code></p>\n" +
                    "</div>\n" +
                    "<h3 id=\"track-by-replaced\"><a class=\"headerlink\" title=\"track-by replaced\" href=\"https://vuejs.org/v2/guide/migration.html#track-by-replaced\" data-scroll=\"\"><code>track-by</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p><code>track-by</code>&nbsp;has been replaced with&nbsp;<code>key</code>, which works like any other attribute: without the&nbsp;<code>v-bind:</code>&nbsp;or&nbsp;<code>:</code>&nbsp;prefix, it is treated as a literal string. In most cases, you&rsquo;d want to use a dynamic binding which expects a full expression instead of a key. For example, in place of:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">track-by</span>=<span class=\"string\">\"id\"</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You would now write:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>track-by</code>.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"v-for-Range-Values-changed\"><a class=\"headerlink\" title=\"v-for Range Values changed\" href=\"https://vuejs.org/v2/guide/migration.html#v-for-Range-Values-changed\" data-scroll=\"\"><code>v-for</code>&nbsp;Range Values&nbsp;<sup>changed</sup></a></h3>\n" +
                    "<p>Previously,&nbsp;<code>v-for=\"number in 10\"</code>&nbsp;would have&nbsp;<code>number</code>&nbsp;starting at 0 and ending at 9. Now it starts at 1 and ends at 10.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Search your codebase for the regex&nbsp;<code>/\\w+ in \\d+/</code>. Wherever it appears in a&nbsp;<code>v-for</code>, check to see if you may be affected.</p>\n" +
                    "</div>");
            sec6Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec6Vue5);

            Section sec7Vue5 = new Section();
            sec7Vue5.setOrdinalNumber(7);
            sec7Vue5.setDescription("Migration from Vue 3.x");
            sec7Vue5.setContent("<h2 id=\"Props\"><a class=\"headerlink\" title=\"Props\" href=\"https://vuejs.org/v2/guide/migration.html#Props\" data-scroll=\"\">Props</a></h2>\n" +
                    "<h3 id=\"coerce-Prop-Option-removed\"><a class=\"headerlink\" title=\"coerce Prop Option removed\" href=\"https://vuejs.org/v2/guide/migration.html#coerce-Prop-Option-removed\" data-scroll=\"\"><code>coerce</code>&nbsp;Prop Option&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>If you want to coerce a prop, setup a local computed value based on it instead. For example, instead of:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">props: {</span><br /><span class=\"line\">  username: {</span><br /><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br /><span class=\"line\">    coerce: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br /><span class=\"line\">        .toLowerCase()</span><br /><span class=\"line\">        .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You could write:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">props: {</span><br /><span class=\"line\">  username: <span class=\"built_in\">String</span>,</span><br /><span class=\"line\">},</span><br /><span class=\"line\">computed: {</span><br /><span class=\"line\">  normalizedUsername: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.username</span><br /><span class=\"line\">      .toLowerCase()</span><br /><span class=\"line\">      .replace(<span class=\"regexp\">/\\s+/</span>, <span class=\"string\">'-'</span>)</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>There are a few advantages:</p>\n" +
                    "<ul>\n" +
                    "<li>You still have access to the original value of the prop.</li>\n" +
                    "<li>You are forced to be more explicit, by giving your coerced value a name that differentiates it from the value passed in the prop.</li>\n" +
                    "</ul>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>coerce</code>option.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"twoWay-Prop-Option-removed\"><a class=\"headerlink\" title=\"twoWay Prop Option removed\" href=\"https://vuejs.org/v2/guide/migration.html#twoWay-Prop-Option-removed\" data-scroll=\"\"><code>twoWay</code>&nbsp;Prop Option&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/components.html#Custom-Events\">Custom component events</a></li>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a>&nbsp;(using component events)</li>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/state-management.html\">Global state management</a></li>\n" +
                    "</ul>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>twoWay</code>option.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"once-and-sync-Modifiers-on-v-bind-removed\"><a class=\"headerlink\" title=\".once and .sync Modifiers on v-bind removed\" href=\"https://vuejs.org/v2/guide/migration.html#once-and-sync-Modifiers-on-v-bind-removed\" data-scroll=\"\"><code>.once</code>&nbsp;and&nbsp;<code>.sync</code>&nbsp;Modifiers on&nbsp;<code>v-bind</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/components.html#Custom-Events\">Custom component events</a></li>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/components.html#Form-Input-Components-using-Custom-Events\">Custom input components</a>&nbsp;(using component events)</li>\n" +
                    "<li><a href=\"https://vuejs.org/v2/guide/state-management.html\">Global state management</a></li>\n" +
                    "</ul>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>.once</code>and&nbsp;<code>.sync</code>&nbsp;modifiers.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"Prop-Mutation-deprecated\"><a class=\"headerlink\" title=\"Prop Mutation deprecated\" href=\"https://vuejs.org/v2/guide/migration.html#Prop-Mutation-deprecated\" data-scroll=\"\">Prop Mutation&nbsp;<sup>deprecated</sup></a></h3>\n" +
                    "<p>Mutating a prop locally is now considered an anti-pattern, e.g. declaring a prop and then setting&nbsp;<code>this.myProp = 'someOtherValue'</code>&nbsp;in the component. Due to the new rendering mechanism, whenever the parent component re-renders, the child component&rsquo;s local changes will be overwritten.</p>\n" +
                    "<p>Most use cases of mutating a prop can be replaced by one of these options:</p>\n" +
                    "<ul>\n" +
                    "<li>a data property, with the prop used to set its default value</li>\n" +
                    "<li>a computed property</li>\n" +
                    "</ul>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run your end-to-end test suite or app after upgrading and look for&nbsp;<strong>console warnings</strong>&nbsp;about prop mutations.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"Props-on-a-Root-Instance-replaced\"><a class=\"headerlink\" title=\"Props on a Root Instance replaced\" href=\"https://vuejs.org/v2/guide/migration.html#Props-on-a-Root-Instance-replaced\" data-scroll=\"\">Props on a Root Instance&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>On root Vue instances (i.e. instances created with&nbsp;<code>new Vue({ ... })</code>), you must use&nbsp;<code>propsData</code>&nbsp;instead of&nbsp;<code>props</code>.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run your end-to-end test suite, if you have one. The&nbsp;<strong>failed tests</strong>&nbsp;should alert to you to the fact that props passed to root instances are no longer working.</p>\n" +
                    "</div>");
            sec7Vue5.setLesson(vueJsLesson5);
            vueJsLesson5.getSections().add(sec7Vue5);

            Section sec1Vue6 = new Section();
            sec1Vue6.setOrdinalNumber(1);
            sec1Vue6.setDescription("Migration from Vue Router 0.7.x");
            sec1Vue6.setContent("<h2 id=\"Router-Initialization\"><a class=\"headerlink\" title=\"Router Initialization\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#Router-Initialization\" data-scroll=\"\">Router Initialization</a></h2>\n" +
                    "<h3 id=\"router-start-replaced\"><a class=\"headerlink\" title=\"router.start replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-start-replaced\" data-scroll=\"\"><code>router.start</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>There is no longer a special API to initialize an app with Vue Router. That means instead of:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.start({</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></span><br /><span class=\"line\">}, <span class=\"string\">'#app'</span>)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You pass a router property to a Vue instance:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br /><span class=\"line\">  router: router,</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;router-view&gt;&lt;/router-view&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Or, if you&rsquo;re using the runtime-only build of Vue:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br /><span class=\"line\">  router: router,</span><br /><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(<span class=\"string\">'router-view'</span>)</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>router.start</code>&nbsp;being called.</p>\n" +
                    "</div>");
            sec1Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec1Vue6);

            Section sec2Vue6 = new Section();
            sec2Vue6.setOrdinalNumber(2);
            sec2Vue6.setDescription("Migration from Vue Router 0.7.x");
            sec2Vue6.setContent("<h3 id=\"router-map-replaced\"><a class=\"headerlink\" title=\"router.map replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-map-replaced\" data-scroll=\"\"><code>router.map</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>Routes are now defined as an array on a&nbsp;<a href=\"https://router.vuejs.org/en/essentials/getting-started.html#javascript\" target=\"_blank\" rel=\"noopener\"><code>routes</code>&nbsp;option</a>&nbsp;at router instantiation. So these routes for example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.map({</span><br /><span class=\"line\">  <span class=\"string\">'/foo'</span>: {</span><br /><span class=\"line\">    component: Foo</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  <span class=\"string\">'/bar'</span>: {</span><br /><span class=\"line\">    component: Bar</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Will instead be defined with:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter({</span><br /><span class=\"line\">  routes: [</span><br /><span class=\"line\">    { <span class=\"attr\">path</span>: <span class=\"string\">'/foo'</span>, <span class=\"attr\">component</span>: Foo },</span><br /><span class=\"line\">    { <span class=\"attr\">path</span>: <span class=\"string\">'/bar'</span>, <span class=\"attr\">component</span>: Bar }</span><br /><span class=\"line\">  ]</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same key order across browsers.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>router.map</code>being called.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"router-on-removed\"><a class=\"headerlink\" title=\"router.on removed\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-on-removed\" data-scroll=\"\"><code>router.on</code>&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>If you need to programmatically generate routes when starting up your app, you can do so by dynamically pushing definitions to a routes array. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// Normal base routes</span></span><br /><span class=\"line\"><span class=\"keyword\">var</span> routes = [</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">]</span><br /><br /><span class=\"line\"><span class=\"comment\">// Dynamically generated routes</span></span><br /><span class=\"line\">marketingPages.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page</span>) </span>{</span><br /><span class=\"line\">  routes.push({</span><br /><span class=\"line\">    path: <span class=\"string\">'/marketing/'</span> + page.slug</span><br /><span class=\"line\">    component: {</span><br /><span class=\"line\">      extends: MarketingComponent</span><br /><span class=\"line\">      data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> { <span class=\"attr\">page</span>: page }</span><br /><span class=\"line\">      }</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  })</span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router({</span><br /><span class=\"line\">  routes: routes</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you need to add new routes after the router has been instantiated, you can replace the router&rsquo;s matcher with a new one that includes the route you&rsquo;d like to add:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.match = createMatcher(</span><br /><span class=\"line\">  [{</span><br /><span class=\"line\">    path: <span class=\"string\">'/my/new/path'</span>,</span><br /><span class=\"line\">    component: MyComponent</span><br /><span class=\"line\">  }].concat(router.options.routes)</span><br /><span class=\"line\">)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>router.on</code>being called.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"router-beforeEach-changed\"><a class=\"headerlink\" title=\"router.beforeEach changed\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-beforeEach-changed\" data-scroll=\"\"><code>router.beforeEach</code>&nbsp;<sup>changed</sup></a></h3>\n" +
                    "<p><code>router.beforeEach</code>&nbsp;now works asynchronously and takes a&nbsp;<code>next</code>&nbsp;function as its third argument.</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">transition</span>) </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (transition.to.path === <span class=\"string\">'/forbidden'</span>) {</span><br /><span class=\"line\">    transition.abort()</span><br /><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br /><span class=\"line\">    transition.next()</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">to, from, next</span>) </span>{</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (to.path === <span class=\"string\">'/forbidden'</span>) {</span><br /><span class=\"line\">    next(<span class=\"literal\">false</span>)</span><br /><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br /><span class=\"line\">    next()</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"subRoutes-renamed\"><a class=\"headerlink\" title=\"subRoutes renamed\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#subRoutes-renamed\" data-scroll=\"\"><code>subRoutes</code>&nbsp;<sup>renamed</sup></a></h3>\n" +
                    "<p><a href=\"https://router.vuejs.org/en/essentials/nested-routes.html\" target=\"_blank\" rel=\"noopener\">Renamed to&nbsp;<code>children</code></a>&nbsp;for consistency within Vue and with other routing libraries.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>subRoutes</code>&nbsp;option.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"router-redirect-replaced\"><a class=\"headerlink\" title=\"router.redirect replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-redirect-replaced\" data-scroll=\"\"><code>router.redirect</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>This is now an&nbsp;<a href=\"https://router.vuejs.org/en/essentials/redirect-and-alias.html\" target=\"_blank\" rel=\"noopener\">option on route definitions</a>. So for example, you will update:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.redirect({</span><br /><span class=\"line\">  <span class=\"string\">'/tos'</span>: <span class=\"string\">'/terms-of-service'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>to a definition like below in your&nbsp;<code>routes</code>&nbsp;configuration:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{</span><br /><span class=\"line\">  path: <span class=\"string\">'/tos'</span>,</span><br /><span class=\"line\">  redirect: <span class=\"string\">'/terms-of-service'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>router.redirect</code>&nbsp;being called.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"router-alias-replaced\"><a class=\"headerlink\" title=\"router.alias replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#router-alias-replaced\" data-scroll=\"\"><code>router.alias</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>This is now an&nbsp;<a href=\"https://router.vuejs.org/en/essentials/redirect-and-alias.html\" target=\"_blank\" rel=\"noopener\">option on the definition for the route</a>&nbsp;you&rsquo;d like to alias to. So for example, you will update:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">router.alias({</span><br /><span class=\"line\">  <span class=\"string\">'/manage'</span>: <span class=\"string\">'/admin'</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>to a definition like below in your&nbsp;<code>routes</code>&nbsp;configuration:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{</span><br /><span class=\"line\">  path: <span class=\"string\">'/admin'</span>,</span><br /><span class=\"line\">  component: AdminPanel,</span><br /><span class=\"line\">  alias: <span class=\"string\">'/manage'</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you need multiple aliases, you can also use an array syntax:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">alias: [<span class=\"string\">'/manage'</span>, <span class=\"string\">'/administer'</span>, <span class=\"string\">'/administrate'</span>]</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>router.alias</code>&nbsp;being called.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"Arbitrary-Route-Properties-replaced\"><a class=\"headerlink\" title=\"Arbitrary Route Properties replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#Arbitrary-Route-Properties-replaced\" data-scroll=\"\">Arbitrary Route Properties&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>Arbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"string\">'/admin'</span>: {</span><br /><span class=\"line\">  component: AdminPanel,</span><br /><span class=\"line\">  requiresAuth: <span class=\"literal\">true</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then you would now update it to:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">{</span><br /><span class=\"line\">  path: <span class=\"string\">'/admin'</span>,</span><br /><span class=\"line\">  component: AdminPanel,</span><br /><span class=\"line\">  meta: {</span><br /><span class=\"line\">    requiresAuth: <span class=\"literal\">true</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Then when later accessing this property on a route, you will still go through meta. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">if</span> (route.meta.requiresAuth) {</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of arbitrary route properties not scoped under meta.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"Syntax-for-Arrays-in-Queries-removed\"><a class=\"headerlink\" title=\"[] Syntax for Arrays in Queries removed\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#Syntax-for-Arrays-in-Queries-removed\" data-scroll=\"\">[] Syntax for Arrays in Queries&nbsp;<sup>removed</sup></a></h3>\n" +
                    "<p>When passing arrays to query parameters the QueryString syntax is no longer&nbsp;<code>/foo?users[]=Tom&amp;users[]=Jerry</code>, instead, the new syntax is&nbsp;<code>/foo?users=Tom&amp;users=Jerry</code>. Internally,&nbsp;<code>$route.query.users</code>&nbsp;will still be an Array, but if there&rsquo;s only one parameter in the query:&nbsp;<code>/foo?users=Tom</code>, when directly accessing this route, there&rsquo;s no way for the router to know if we were expecting&nbsp;<code>users</code>to be an Array. Because of this, consider adding a computed property and replacing every reference of&nbsp;<code>$route.query.users</code>&nbsp;with it:</p>\n" +
                    "<figure class=\"highlight javascript\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br /><span class=\"line\">  <span class=\"comment\">// ...</span></span><br /><span class=\"line\">  computed: {</span><br /><span class=\"line\">    <span class=\"comment\">// users will always be an array</span></span><br /><span class=\"line\">    users () {</span><br /><span class=\"line\">      <span class=\"keyword\">const</span> users = <span class=\"keyword\">this</span>.$route.query.users</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(users) ? users : [users]</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec2Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec2Vue6);

            Section sec3Vue6 = new Section();
            sec3Vue6.setOrdinalNumber(3);
            sec3Vue6.setDescription("Migration from Vuex 0.6.x to 1.0");
            sec3Vue6.setContent("<p><code>store.watch</code>&nbsp;now only accept functions. So for example, you would have to replace:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">store.watch(<span class=\"string\">'user.notifications'</span>, callback)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>with:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">store.watch(</span><br /><span class=\"line\">  <span class=\"comment\">// When the returned result changes...</span></span><br /><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">state</span>) </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> state.user.notifications</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  <span class=\"comment\">// Run this callback</span></span><br /><span class=\"line\">  callback</span><br /><span class=\"line\">)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This gives you more complete control over the reactive properties you&rsquo;d like to watch.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>store.watch</code>with a string as the first argument.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Store&rsquo;s-Event-Emitter-removed\"><a class=\"headerlink\" title=\"Store&rsquo;s Event Emitter removed\" href=\"https://vuejs.org/v2/guide/migration-vuex.html#Store%E2%80%99s-Event-Emitter-removed\" data-scroll=\"\">Store&rsquo;s Event Emitter&nbsp;<sup>removed</sup></a></h2>\n" +
                    "<p>The store instance no longer exposes the event emitter interface (<code>on</code>,&nbsp;<code>off</code>,&nbsp;<code>emit</code>). If you were previously using the store as a global event bus,&nbsp;<a href=\"https://vuejs.org/v2/guide/migration.html#dispatch-and-broadcast-removed\">see this section</a>&nbsp;for migration instructions.</p>\n" +
                    "<p>Instead of using this interface to watch events emitted by the store itself (e.g.&nbsp;<code>store.on('mutation', callback)</code>), a new method&nbsp;<code>store.subscribe</code>&nbsp;is introduced. Typical usage inside a plugin would be:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> myPlugin = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> {</span><br /><span class=\"line\">  store.subscribe(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mutation, state</span>) </span>{</span><br /><span class=\"line\">    <span class=\"comment\">// Do something...</span></span><br /><span class=\"line\">  })</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>See example&nbsp;<a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\" target=\"_blank\" rel=\"noopener\">the plugins docs</a>&nbsp;for more info.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of&nbsp;<code>store.on</code>,&nbsp;<code>store.off</code>, and&nbsp;<code>store.emit</code>.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Middlewares-replaced\"><a class=\"headerlink\" title=\"Middlewares replaced\" href=\"https://vuejs.org/v2/guide/migration-vuex.html#Middlewares-replaced\" data-scroll=\"\">Middlewares&nbsp;<sup>replaced</sup></a></h2>\n" +
                    "<p>Middlewares are replaced by plugins. A plugin is a function that receives the store as the only argument, and can listen to the mutation event on the store:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">const</span> myPlugins = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> {</span><br /><span class=\"line\">  store.subscribe(<span class=\"string\">'mutation'</span>, (mutation, state) =&gt; {</span><br /><span class=\"line\">    <span class=\"comment\">// Do something...</span></span><br /><span class=\"line\">  })</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>For more details, see&nbsp;<a href=\"https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md\" target=\"_blank\" rel=\"noopener\">the plugins docs</a>.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>middlewares</code>&nbsp;option on a store.</p>\n" +
                    "</div>");
            sec3Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec3Vue6);

            Section sec4Vue6 = new Section();
            sec4Vue6.setOrdinalNumber(4);
            sec4Vue6.setDescription("Comparison with Other Frameworks");
            sec4Vue6.setContent("<h2 id=\"React\"><a class=\"headerlink\" title=\"React\" href=\"https://vuejs.org/v2/guide/comparison.html#React\" data-scroll=\"\">React</a></h2>\n" +
                    "<p>React and Vue share many similarities. They both:</p>\n" +
                    "<ul>\n" +
                    "<li>utilize a virtual DOM</li>\n" +
                    "<li>provide reactive and composable view components</li>\n" +
                    "<li>maintain focus in the core library, with concerns such as routing and global state management handled by companion libraries</li>\n" +
                    "</ul>\n" +
                    "<p>Being so similar in scope, we&rsquo;ve put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.</p>\n" +
                    "<p>With that said, it&rsquo;s inevitable that the comparison would appear biased towards Vue to some React users, as many of the subjects explored are to some extent subjective. We acknowledge the existence of varying technical taste, and this comparison primarily aims to outline the reasons why Vue could potentially be a better fit if your preferences happen to coincide with ours.</p>\n" +
                    "<p>Some of the sections below may also be slightly outdated due to recent updates in React 16+, and we are planning to work with the React community to revamp this section in the near future.</p>\n" +
                    "<h3 id=\"Runtime-Performance\"><a class=\"headerlink\" title=\"Runtime Performance\" href=\"https://vuejs.org/v2/guide/comparison.html#Runtime-Performance\" data-scroll=\"\">Runtime Performance</a></h3>\n" +
                    "<p>Both React and Vue are exceptionally and similarly fast, so speed is unlikely to be a deciding factor in choosing between them. For specific metrics though, check out this&nbsp;<a href=\"https://stefankrause.net/js-frameworks-benchmark8/table.html\" target=\"_blank\" rel=\"noopener\">3rd party benchmark</a>, which focuses on raw render/update performance with very simple component trees.</p>\n" +
                    "<h4 id=\"Optimization-Efforts\">Optimization Efforts</h4>\n" +
                    "<p>In React, when a component&rsquo;s state changes, it triggers the re-render of the entire component sub-tree, starting at that component as root. To avoid unnecessary re-renders of child components, you need to either use&nbsp;<code>PureComponent</code>&nbsp;or implement&nbsp;<code>shouldComponentUpdate</code>&nbsp;whenever you can. You may also need to use immutable data structures to make your state changes more optimization-friendly. However, in certain cases you may not be able to rely on such optimizations because&nbsp;<code>PureComponent/shouldComponentUpdate</code>&nbsp;assumes the entire sub tree&rsquo;s render output is determined by the props of the current component. If that is not the case, then such optimizations may lead to inconsistent DOM state.</p>\n" +
                    "<p>In Vue, a component&rsquo;s dependencies are automatically tracked during its render, so the system knows precisely which components actually need to re-render when state changes. Each component can be considered to have&nbsp;<code>shouldComponentUpdate</code>automatically implemented for you, without the nested component caveats.</p>\n" +
                    "<p>Overall this removes the need for a whole class of performance optimizations from the developer&rsquo;s plate, and allows them to focus more on building the app itself as it scales.</p>");
            sec4Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec4Vue6);

            Section sec5Vue6 = new Section();
            sec5Vue6.setOrdinalNumber(5);
            sec5Vue6.setDescription("Join the Vue.js Community!");
            sec5Vue6.setContent("<p>Vue&rsquo;s community is growing incredibly fast and if you&rsquo;re reading this, there&rsquo;s a good chance you&rsquo;re ready to join it. So&hellip; welcome!</p>\n" +
                    "<p>Now we&rsquo;ll answer both what the community can do for you and what you can do for the community.</p>\n" +
                    "<h2 id=\"Resources\"><a class=\"headerlink\" title=\"Resources\" href=\"https://vuejs.org/v2/guide/join.html#Resources\" data-scroll=\"\">Resources</a></h2>\n" +
                    "<h3 id=\"Code-of-Conduct\"><a class=\"headerlink\" title=\"Code of Conduct\" href=\"https://vuejs.org/v2/guide/join.html#Code-of-Conduct\" data-scroll=\"\">Code of Conduct</a></h3>\n" +
                    "<p>Our&nbsp;<a href=\"https://vuejs.org/coc\">Code of Conduct</a>&nbsp;is a guide to make it easier to enrich all of us and the technical communities in which we participate.</p>\n" +
                    "<h3 id=\"Get-Support\"><a class=\"headerlink\" title=\"Get Support\" href=\"https://vuejs.org/v2/guide/join.html#Get-Support\" data-scroll=\"\">Get Support</a></h3>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://forum.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Forum</a>: The best place to ask questions and get answers about Vue and its ecosystem.</li>\n" +
                    "<li><a href=\"https://chat.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Chat</a>: A place for Vue devs to meet and chat in real time.</li>\n" +
                    "<li><a href=\"https://www.vuemeetups.org/\" target=\"_blank\" rel=\"noopener\">Meetups</a>: Want to find local Vue.js enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!</li>\n" +
                    "<li><a href=\"https://github.com/vuejs\" target=\"_blank\" rel=\"noopener\">GitHub</a>: If you have a bug to report or feature to request, that&rsquo;s what the GitHub issues are for. We also welcome pull requests!</li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"Explore-the-Ecosystem\"><a class=\"headerlink\" title=\"Explore the Ecosystem\" href=\"https://vuejs.org/v2/guide/join.html#Explore-the-Ecosystem\" data-scroll=\"\">Explore the Ecosystem</a></h3>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">The Awesome Vue Page</a>: See what other awesome resources have been published by other awesome people.</li>\n" +
                    "<li><a href=\"https://forum.vuejs.org/c/show-and-tell\" target=\"_blank\" rel=\"noopener\">The &ldquo;Show and Tell&rdquo; Subforum</a>: Another great place to check out what others have built with and for the growing Vue ecosystem.</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"What-You-Can-Do\"><a class=\"headerlink\" title=\"What You Can Do\" href=\"https://vuejs.org/v2/guide/join.html#What-You-Can-Do\" data-scroll=\"\">What You Can Do</a></h2>\n" +
                    "<h3 id=\"Contribute-Code\"><a class=\"headerlink\" title=\"Contribute Code\" href=\"https://vuejs.org/v2/guide/join.html#Contribute-Code\" data-scroll=\"\">Contribute Code</a></h3>\n" +
                    "<p>As with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read&nbsp;<a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">the contributing guide</a>.</p>\n" +
                    "<p>After that, you&rsquo;ll be ready to contribute to Vue&rsquo;s core repositories:</p>\n" +
                    "<ul>\n" +
                    "<li><a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"noopener\">vue</a>: the core library</li>\n" +
                    "<li><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"noopener\">vuex</a>: Flux-inspired state management</li>\n" +
                    "<li><a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener\">vue-router</a>: a routing system for SPAs</li>\n" +
                    "</ul>\n" +
                    "<p>&hellip;as well as many smaller official&nbsp;<a href=\"https://github.com/vuejs\" target=\"_blank\" rel=\"noopener\">companion libraries</a>.</p>\n" +
                    "<h3 id=\"Share-and-Build-Your-Experience\"><a class=\"headerlink\" title=\"Share (and Build) Your Experience\" href=\"https://vuejs.org/v2/guide/join.html#Share-and-Build-Your-Experience\" data-scroll=\"\">Share (and Build) Your Experience</a></h3>\n" +
                    "<p>Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:</p>\n" +
                    "<ul>\n" +
                    "<li><strong>Develop learning materials.</strong>&nbsp;It&rsquo;s often said that the best way to learn is to teach. If there&rsquo;s something interesting you&rsquo;re doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.</li>\n" +
                    "<li><strong>Watch a repo you care about.</strong>&nbsp;This will send you notifications whenever there&rsquo;s activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It&rsquo;s a fantastic way to build expertise so that you&rsquo;re eventually able to help address issues and pull requests.</li>\n" +
                    "</ul>\n" +
                    "<h3 id=\"Translate-Docs\"><a class=\"headerlink\" title=\"Translate Docs\" href=\"https://vuejs.org/v2/guide/join.html#Translate-Docs\" data-scroll=\"\">Translate Docs</a></h3>\n" +
                    "<p>Vue has already spread across the globe, with even the core team in at least half a dozen timezones.&nbsp;<a href=\"https://forum.vuejs.org/\" target=\"_blank\" rel=\"noopener\">The forum</a>&nbsp;includes 7 languages and counting and many of our docs have&nbsp;<a href=\"https://github.com/vuejs?utf8=%E2%9C%93&amp;query=vuejs.org\" target=\"_blank\" rel=\"noopener\">actively-maintained translations</a>. We&rsquo;re very proud of Vue&rsquo;s international reach, but we can do even better.</p>\n" +
                    "<p>I hope that right now, you&rsquo;re reading this sentence in your preferred language. If not, would you like to help us get there?</p>\n" +
                    "<p>If so, please feel free to fork the repo for&nbsp;<a href=\"https://github.com/vuejs/vuejs.org/\" target=\"_blank\" rel=\"noopener\">these docs</a>&nbsp;or for any other officially maintained documentation, then start translating. Once you&rsquo;ve made some progress, open an issue or pull request in the main repo and we&rsquo;ll put out a call for more contributors to help you out.</p>");
            sec5Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec5Vue6);

            Section sec6Vue6 = new Section();
            sec6Vue6.setOrdinalNumber(6);
            sec6Vue6.setDescription("Reactivity in Depth");
            sec6Vue6.setContent("<h2 id=\"Change-Detection-Caveats\"><a class=\"headerlink\" title=\"Change Detection Caveats\" href=\"https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats\" data-scroll=\"\">Change Detection Caveats</a></h2>\n" +
                    "<p>Due to the limitations of modern JavaScript (and the abandonment of&nbsp;<code>Object.observe</code>), Vue&nbsp;<strong>cannot detect property addition or deletion</strong>. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the&nbsp;<code>data</code>&nbsp;object in order for Vue to convert it and make it reactive. For example:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    a: <span class=\"number\">1</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><span class=\"line\"><span class=\"comment\">// `vm.a` is now reactive</span></span><br /><br /><span class=\"line\">vm.b = <span class=\"number\">2</span></span><br /><span class=\"line\"><span class=\"comment\">// `vm.b` is NOT reactive</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Vue does not allow dynamically adding new root-level reactive properties to an already created instance. However, it&rsquo;s possible to add reactive properties to a nested object using the&nbsp;<code>Vue.set(object, key, value)</code>&nbsp;method:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.set(vm.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You can also use the&nbsp;<code>vm.$set</code>&nbsp;instance method, which is an alias to the global&nbsp;<code>Vue.set</code>:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.someObject, <span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Sometimes you may want to assign a number of properties to an existing object, for example using&nbsp;<code>Object.assign()</code>&nbsp;or&nbsp;<code>_.extend()</code>. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">// instead of `Object.assign(this.someObject, { a: 1, b: 2 })`</span></span><br /><span class=\"line\"><span class=\"keyword\">this</span>.someObject = <span class=\"built_in\">Object</span>.assign({}, <span class=\"keyword\">this</span>.someObject, { <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> })</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>There are also a few array-related caveats, which were discussed earlier in the&nbsp;<a href=\"https://vuejs.org/v2/guide/list.html#Caveats\">list rendering section</a>.</p>\n" +
                    "<h2 id=\"Declaring-Reactive-Properties\"><a class=\"headerlink\" title=\"Declaring Reactive Properties\" href=\"https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties\" data-scroll=\"\">Declaring Reactive Properties</a></h2>\n" +
                    "<p>Since Vue doesn&rsquo;t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even with an empty value:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    <span class=\"comment\">// declare message with an empty value</span></span><br /><span class=\"line\">    message: <span class=\"string\">''</span></span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;div&gt;{{ message }}&lt;/div&gt;'</span></span><br /><span class=\"line\">})</span><br /><span class=\"line\"><span class=\"comment\">// set `message` later</span></span><br /><span class=\"line\">vm.message = <span class=\"string\">'Hello!'</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>If you don&rsquo;t declare&nbsp;<code>message</code>&nbsp;in the data option, Vue will warn you that the render function is trying to access a property that doesn&rsquo;t exist.</p>\n" +
                    "<p>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the&nbsp;<code>data</code>&nbsp;object is like the schema for your component&rsquo;s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</p>");
            sec6Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec6Vue6);

            Section sec7Vue6 = new Section();
            sec7Vue6.setOrdinalNumber(7);
            sec7Vue6.setDescription("Server-Side Rendering");
            sec7Vue6.setContent("<h2 id=\"\" data-scroll-id=\"The-Complete-SSR-Guide\"><a class=\"headerlink\" title=\"The Complete SSR Guide\" href=\"https://vuejs.org/v2/guide/ssr.html#The-Complete-SSR-Guide\" data-scroll=\"\">The Complete SSR Guide</a></h2>\n" +
                    "<p>We have created a standalone guide for creating server-rendered Vue applications. This is a very in-depth guide for those who are already familiar with client-side Vue development, server-side Node.js development and webpack. Check it out at&nbsp;<a href=\"https://ssr.vuejs.org/\" target=\"_blank\" rel=\"noopener\">ssr.vuejs.org</a>.</p>\n" +
                    "<h2 id=\"Nuxt-js\"><a class=\"headerlink\" title=\"Nuxt.js\" href=\"https://vuejs.org/v2/guide/ssr.html#Nuxt-js\" data-scroll=\"\">Nuxt.js</a></h2>\n" +
                    "<p>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier:&nbsp;<a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener\">Nuxt.js</a>. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</p>");
            sec7Vue6.setLesson(vueJsLesson6);
            vueJsLesson6.getSections().add(sec7Vue6);

            Section sec1Vue7 = new Section();
            sec1Vue7.setOrdinalNumber(1);
            sec1Vue7.setDescription("State Management");
            sec1Vue7.setContent("<h2 id=\"Async-Update-Queue\"><a class=\"headerlink\" title=\"Async Update Queue\" href=\"https://vuejs.org/v2/guide/reactivity.html#Async-Update-Queue\" data-scroll=\"\">Async Update Queue</a></h2>\n" +
                    "<p>In case you haven&rsquo;t noticed yet, Vue performs DOM updates&nbsp;<strong>asynchronously</strong>. Whenever a data change is observed, it will open a queue and buffer all the data changes that happen in the same event loop. If the same watcher is triggered multiple times, it will be pushed into the queue only once. This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations. Then, in the next event loop &ldquo;tick&rdquo;, Vue flushes the queue and performs the actual (already de-duped) work. Internally Vue tries native&nbsp;<code>Promise.then</code>&nbsp;and&nbsp;<code>MessageChannel</code>&nbsp;for the asynchronous queuing and falls back to&nbsp;<code>setTimeout(fn, 0)</code>.</p>\n" +
                    "<p>For example, when you set&nbsp;<code>vm.someData = 'new value'</code>, the component will not re-render immediately. It will update in the next &ldquo;tick&rdquo;, when the queue is flushed. Most of the time we don&rsquo;t need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a &ldquo;data-driven&rdquo; fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use&nbsp;<code>Vue.nextTick(callback)</code>&nbsp;immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span>{{ message }}<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    message: <span class=\"string\">'123'</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span><br /><span class=\"line\">vm.message = <span class=\"string\">'new message'</span> <span class=\"comment\">// change data</span></span><br /><span class=\"line\">vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// false</span></span><br /><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">  vm.$el.textContent === <span class=\"string\">'new message'</span> <span class=\"comment\">// true</span></span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>There is also the&nbsp;<code>vm.$nextTick()</code>&nbsp;instance method, which is especially handy inside components, because it doesn&rsquo;t need global&nbsp;<code>Vue</code>&nbsp;and its callback&rsquo;s&nbsp;<code>this</code>&nbsp;context will be automatically bound to the current Vue instance:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">Vue.component(<span class=\"string\">'example'</span>, {</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;span&gt;{{ message }}&lt;/span&gt;'</span>,</span><br /><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br /><span class=\"line\">      message: <span class=\"string\">'not updated'</span></span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  },</span><br /><span class=\"line\">  methods: {</span><br /><span class=\"line\">    updateMessage: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'updated'</span></span><br /><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'not updated'</span></span><br /><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'updated'</span></span><br /><span class=\"line\">      })</span><br /><span class=\"line\">    }</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Since&nbsp;<code>$nextTick()</code>&nbsp;returns a promise, you can achieve the same as the above using the new&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"noopener\">ES2016 async/await</a>&nbsp;syntax:</p>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">methods: {</span><br /><span class=\"line\">  <span class=\"keyword\">async</span> updateMessage: <span class=\"function\"><span class=\"keyword\">function</span> () </span>{</span><br /><span class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">'updated'</span></span><br /><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'not updated'</span></span><br /><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.$nextTick()</span><br /><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$el.textContent) <span class=\"comment\">// =&gt; 'updated'</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>");
            sec1Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec1Vue7);

            Section sec2Vue7 = new Section();
            sec2Vue7.setOrdinalNumber(2);
            sec2Vue7.setDescription("Scaling Up");
            sec2Vue7.setContent("<h2 id=\"Getting-Started\"><a class=\"headerlink\" title=\"Getting Started\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Getting-Started\" data-scroll=\"\">Getting Started</a></h2>\n" +
                    "<h3 id=\"Example-Sandbox\"><a class=\"headerlink\" title=\"Example Sandbox\" href=\"https://vuejs.org/v2/guide/single-file-components.html#Example-Sandbox\" data-scroll=\"\">Example Sandbox</a></h3>\n" +
                    "<p>If you want to dive right in and start playing with single-file components, check out&nbsp;<a href=\"https://codesandbox.io/s/o29j95wx9\" target=\"_blank\" rel=\"noopener\">this simple todo app</a>&nbsp;on CodeSandbox.</p>\n" +
                    "<h3 id=\"For-Users-New-to-Module-Build-Systems-in-JavaScript\"><a class=\"headerlink\" title=\"For Users New to Module Build Systems in JavaScript\" href=\"https://vuejs.org/v2/guide/single-file-components.html#For-Users-New-to-Module-Build-Systems-in-JavaScript\" data-scroll=\"\">For Users New to Module Build Systems in JavaScript</a></h3>\n" +
                    "<p>With&nbsp;<code>.vue</code>&nbsp;components, we&rsquo;re entering the realm of advanced JavaScript applications. That means learning to use a few additional tools if you haven&rsquo;t already:</p>\n" +
                    "<ul>\n" +
                    "<li>\n" +
                    "<p><strong>Node Package Manager (NPM)</strong>: Read the&nbsp;<a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"noopener\">Getting Started guide</a>&nbsp;through section&nbsp;<em>10: Uninstalling global packages</em>.</p>\n" +
                    "</li>\n" +
                    "<li>\n" +
                    "<p><strong>Modern JavaScript with ES2015/16</strong>: Read through Babel&rsquo;s&nbsp;<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">Learn ES2015 guide</a>. You don&rsquo;t have to memorize every feature right now, but keep this page as a reference you can come back to.</p>\n" +
                    "</li>\n" +
                    "</ul>\n" +
                    "<p>After you&rsquo;ve taken a day to dive into these resources, we recommend checking out the&nbsp;<a href=\"https://vuejs-templates.github.io/webpack\" target=\"_blank\" rel=\"noopener\">webpack</a>&nbsp;template. Follow the instructions and you should have a Vue project with&nbsp;<code>.vue</code>&nbsp;components, ES2015, and hot-reloading in no time!</p>\n" +
                    "<p>To learn more about Webpack itself, check out&nbsp;<a href=\"https://webpack.js.org/configuration/\" target=\"_blank\" rel=\"noopener\">their official docs</a>&nbsp;and&nbsp;<a href=\"https://webpack.academy/p/the-core-concepts\" target=\"_blank\" rel=\"noopener\">Webpack Academy</a>. In Webpack, each file can be transformed by a &ldquo;loader&rdquo; before being included in the bundle, and Vue offers the&nbsp;<a href=\"https://vue-loader.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue-loader</a>&nbsp;plugin to translate single-file (<code>.vue</code>) components.</p>\n" +
                    "<h3 id=\"For-Advanced-Users\"><a class=\"headerlink\" title=\"For Advanced Users\" href=\"https://vuejs.org/v2/guide/single-file-components.html#For-Advanced-Users\" data-scroll=\"\">For Advanced Users</a></h3>\n" +
                    "<p>Whether you prefer Webpack or Browserify, we have documented templates for both simple and more complex projects. We recommend browsing&nbsp;<a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"noopener\">github.com/vuejs-templates</a>, picking a template that&rsquo;s right for you, then following the instructions in the README to generate a new project with&nbsp;<a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">vue-cli</a>.</p>");
            sec2Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec2Vue7);

            Section sec3Vue7 = new Section();
            sec3Vue7.setOrdinalNumber(3);
            sec3Vue7.setDescription("Matching");
            sec3Vue7.setContent("<h2 id=\"Route-Matching\" tabindex=\"-1\" data-scroll-id=\"Route-Matching\"><a class=\"headerlink\" title=\"Route Matching\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#Route-Matching\" data-scroll=\"\">Route Matching</a></h2>\n" +
                    "<p>Route matching now uses&nbsp;<a href=\"https://github.com/pillarjs/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a>&nbsp;under the hood, making it much more flexible than previously.</p>\n" +
                    "<h3 id=\"One-or-More-Named-Parameters-changed\"><a class=\"headerlink\" title=\"One or More Named Parameters changed\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#One-or-More-Named-Parameters-changed\" data-scroll=\"\">One or More Named Parameters&nbsp;<sup>changed</sup></a></h3>\n" +
                    "<p>The syntax has changed slightly, so&nbsp;<code>/category/*tags</code>&nbsp;for example, should be updated to&nbsp;<code>/category/:tags+</code>.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the obsolete route syntax.</p>\n" +
                    "</div>\n" +
                    "<h2 id=\"Links\"><a class=\"headerlink\" title=\"Links\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#Links\" data-scroll=\"\">Links</a></h2>\n" +
                    "<h3 id=\"v-link-replaced\"><a class=\"headerlink\" title=\"v-link replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#v-link-replaced\" data-scroll=\"\"><code>v-link</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>The&nbsp;<code>v-link</code>&nbsp;directive has been replaced with a new&nbsp;<a href=\"https://router.vuejs.org/en/api/router-link.html\" target=\"_blank\" rel=\"noopener\"><code>&lt;router-link&gt;</code>&nbsp;component</a>, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>You&rsquo;ll need to update it like this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Note that&nbsp;<code>target=\"_blank\"</code>&nbsp;is not supported on&nbsp;<code>&lt;router-link&gt;</code>, so if you need to open a link in a new tab, you have to use&nbsp;<code>&lt;a&gt;</code>&nbsp;instead.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>v-link</code>directive.</p>\n" +
                    "</div>\n" +
                    "<h3 id=\"v-link-active-replaced\"><a class=\"headerlink\" title=\"v-link-active replaced\" href=\"https://vuejs.org/v2/guide/migration-vue-router.html#v-link-active-replaced\" data-scroll=\"\"><code>v-link-active</code>&nbsp;<sup>replaced</sup></a></h3>\n" +
                    "<p>The&nbsp;<code>v-link-active</code>&nbsp;directive has also been replaced by the&nbsp;<code>tag</code>&nbsp;attribute on&nbsp;<a href=\"https://router.vuejs.org/en/api/router-link.html\" target=\"_blank\" rel=\"noopener\">the&nbsp;<code>&lt;router-link&gt;</code>&nbsp;component</a>. So for example, you&rsquo;ll update this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-link-active</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'/about'\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>to this:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>The&nbsp;<code>&lt;a&gt;</code>&nbsp;will be the actual link (and will get the correct href), but the active class will be applied to the outer&nbsp;<code>&lt;li&gt;</code>.</p>\n" +
                    "<div class=\"upgrade-path\">\n" +
                    "<h4>Upgrade Path</h4>\n" +
                    "<p>Run the&nbsp;<a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"noopener\">migration helper</a>&nbsp;on your codebase to find examples of the&nbsp;<code>v-link-active</code>&nbsp;directive.</p>\n" +
                    "</div>");
            sec3Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec3Vue7);

            Section sec4Vue7 = new Section();
            sec4Vue7.setOrdinalNumber(4);
            sec4Vue7.setDescription("Development Tooling");
            sec4Vue7.setContent("<h3 id=\"Project-Creation\"><a class=\"headerlink\" title=\"Project Creation\" href=\"https://vuejs.org/v2/guide/typescript.html#Project-Creation\" data-scroll=\"\">Project Creation</a></h3>\n" +
                    "<p><a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">Vue CLI 3</a>&nbsp;can generate new projects that use TypeScript. To get started:</p>\n" +
                    "<figure class=\"highlight bash\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\"># 1. Install Vue CLI, if it's not already installed</span></span><br /><span class=\"line\">npm install --global @vue/cli</span><br /><br /><span class=\"line\"><span class=\"comment\"># 2. Create a new project, then choose the \"Manually select features\" option</span></span><br /><span class=\"line\">vue create my-project-name</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Editor-Support\"><a class=\"headerlink\" title=\"Editor Support\" href=\"https://vuejs.org/v2/guide/typescript.html#Editor-Support\" data-scroll=\"\">Editor Support</a></h3>\n" +
                    "<p>For developing Vue applications with TypeScript, we strongly recommend using&nbsp;<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>, which provides great out-of-the-box support for TypeScript. If you are using&nbsp;<a href=\"https://vuejs.org/v2/guide/single-file-components.html\">single-file components</a>&nbsp;(SFCs), get the awesome&nbsp;<a href=\"https://github.com/vuejs/vetur\" target=\"_blank\" rel=\"noopener\">Vetur extension</a>, which provides TypeScript inference inside SFCs and many other great features.</p>\n" +
                    "<p><a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"noopener\">WebStorm</a>&nbsp;also provides out-of-the-box support for both TypeScript and Vue.</p>\n" +
                    "<h2 id=\"Basic-Usage\"><a class=\"headerlink\" title=\"Basic Usage\" href=\"https://vuejs.org/v2/guide/typescript.html#Basic-Usage\" data-scroll=\"\">Basic Usage</a></h2>\n" +
                    "<p>To let TypeScript properly infer types inside Vue component options, you need to define components with&nbsp;<code>Vue.component</code>&nbsp;or&nbsp;<code>Vue.extend</code>:</p>\n" +
                    "<figure class=\"highlight ts\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> Component = Vue.extend({</span><br /><span class=\"line\">  <span class=\"comment\">// type inference enabled</span></span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">const</span> Component = {</span><br /><span class=\"line\">  <span class=\"comment\">// this will NOT have type inference,</span></span><br /><span class=\"line\">  <span class=\"comment\">// because TypeScript can't tell this is options for a Vue component.</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>");
            sec4Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec4Vue7);

            Section sec5Vue7 = new Section();
            sec5Vue7.setOrdinalNumber(5);
            sec5Vue7.setDescription("Compilation Scope");
            sec5Vue7.setContent("<p>When you want to use data inside a slot, such as in:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation-link</span> <span class=\"attr\">url</span>=<span class=\"string\">\"/profile\"</span>&gt;</span></span><br /><span class=\"line\">  Logged in as {{ user.name }}</span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation-link</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>That slot has access to the same instance properties (i.e. the same &ldquo;scope&rdquo;) as the rest of the template. The slot does&nbsp;<strong>not</strong>&nbsp;have access to&nbsp;<code>&lt;navigation-link&gt;</code>&lsquo;s scope. For example, trying to access&nbsp;<code>url</code>&nbsp;would not work. As a rule, remember that:</p>\n" +
                    "<blockquote>\n" +
                    "<p>Everything in the parent template is compiled in parent scope; everything in the child template is compiled in the child scope.</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"Scoped-Slots\"><a class=\"headerlink\" title=\"Scoped Slots\" href=\"https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots\" data-scroll=\"\">Scoped Slots</a></h2>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.1.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>Sometimes you&rsquo;ll want to provide a component with a reusable slot that can access data from the child component. For example, a simple&nbsp;<code>&lt;todo-list&gt;</code>&nbsp;component may contain the following in its template:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br /><span class=\"line\">    {{ todo.text }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>But in some parts of our app, we want the individual todo items to render something different than just the&nbsp;<code>todo.text</code>. This is where scoped slots come in.</p>\n" +
                    "<p>To make the feature possible, all we have to do is wrap the todo item content in a&nbsp;<code>&lt;slot&gt;</code>&nbsp;element, then pass the slot any data relevant to its context: in this case, the&nbsp;<code>todo</code>&nbsp;object:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">\"todo in todos\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- We have a slot for each todo, passing it the --&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- `todo` object as a slot prop.                --&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">v-bind:todo</span>=<span class=\"string\">\"todo\"</span>&gt;</span></span><br /><span class=\"line\">      <span class=\"comment\">&lt;!-- Fallback content --&gt;</span></span><br /><span class=\"line\">      {{ todo.text }}</span><br /><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Now when we use the&nbsp;<code>&lt;todo-list&gt;</code>&nbsp;component, we can optionally define an alternative&nbsp;<code>&lt;template&gt;</code>&nbsp;for todo items, but with access to data from the child via the&nbsp;<code>slot-scope</code>&nbsp;attribute:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">todo-list</span> <span class=\"attr\">v-bind:todos</span>=<span class=\"string\">\"todos\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- Define `slotProps` as the name of our slot scope --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">\"slotProps\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- Define a custom template for todo items, using --&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!-- `slotProps` to customize each todo.            --&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"slotProps.todo.isComplete\"</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br /><span class=\"line\">    {{ slotProps.todo.text }}</span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">todo-list</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<blockquote>\n" +
                    "<p>In 2.5.0+,&nbsp;<code>slot-scope</code>&nbsp;is no longer limited to the&nbsp;<code>&lt;template&gt;</code>&nbsp;element, but can instead be used on any element or component in the slot.</p>\n" +
                    "</blockquote>");
            sec5Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec5Vue7);

            Section sec6Vue7 = new Section();
            sec6Vue7.setOrdinalNumber(6);
            sec6Vue7.setDescription("System Modifier Keys");
            sec6Vue7.setContent("<p>You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:</p>\n" +
                    "<ul>\n" +
                    "<li><code>.ctrl</code></li>\n" +
                    "<li><code>.alt</code></li>\n" +
                    "<li><code>.shift</code></li>\n" +
                    "<li><code>.meta</code></li>\n" +
                    "</ul>\n" +
                    "<blockquote>\n" +
                    "<p>Note: On Macintosh keyboards, meta is the command key (⌘). On Windows keyboards, meta is the windows key (⊞). On Sun Microsystems keyboards, meta is marked as a solid diamond (◆). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled &ldquo;META&rdquo;. On Symbolics keyboards, meta is labeled &ldquo;META&rdquo; or &ldquo;Meta&rdquo;.</p>\n" +
                    "</blockquote>\n" +
                    "<p>For example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- Alt + C --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.alt.67</span>=<span class=\"string\">\"clear\"</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- Ctrl + Click --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>Do something<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p class=\"tip\">Note that modifier keys are different from regular keys and when used with&nbsp;<code>keyup</code>&nbsp;events, they have to be pressed when the event is emitted. In other words,&nbsp;<code>keyup.ctrl</code>&nbsp;will only trigger if you release a key while holding down&nbsp;<code>ctrl</code>. It won&rsquo;t trigger if you release the&nbsp;<code>ctrl</code>&nbsp;key alone. If you do want such behaviour, use the&nbsp;<code>keyCode</code>&nbsp;for&nbsp;<code>ctrl</code>&nbsp;instead:&nbsp;<code>keyup.17</code>.</p>\n" +
                    "<h3 id=\"exact-Modifier\"><a class=\"headerlink\" title=\".exact Modifier\" href=\"https://vuejs.org/v2/guide/events.html#exact-Modifier\" data-scroll=\"\"><code>.exact</code>&nbsp;Modifier</a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.5.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>The&nbsp;<code>.exact</code>&nbsp;modifier allows control of the exact combination of system modifiers needed to trigger an event.</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will fire even if Alt or Shift is also pressed --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.ctrl</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- this will only fire when Ctrl and no other keys are pressed --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.ctrl.exact</span>=<span class=\"string\">\"onCtrlClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br /><br /><span class=\"line\"><span class=\"comment\">&lt;!-- this will only fire when no system modifiers are pressed --&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.exact</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Mouse-Button-Modifiers\"><a class=\"headerlink\" title=\"Mouse Button Modifiers\" href=\"https://vuejs.org/v2/guide/events.html#Mouse-Button-Modifiers\" data-scroll=\"\">Mouse Button Modifiers</a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>New in 2.2.0+</p>\n" +
                    "</blockquote>\n" +
                    "<ul>\n" +
                    "<li><code>.left</code></li>\n" +
                    "<li><code>.right</code></li>\n" +
                    "<li><code>.middle</code></li>\n" +
                    "</ul>\n" +
                    "<p>These modifiers restrict the handler to events triggered by a specific mouse button.</p>");
            sec6Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec6Vue7);

            Section sec7Vue7 = new Section();
            sec7Vue7.setOrdinalNumber(7);
            sec7Vue7.setDescription("Binding Inline Styles");
            sec7Vue7.setContent("<h3 id=\"Object-Syntax-1\"><a class=\"headerlink\" title=\"Object Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Object-Syntax-1\" data-scroll=\"\">Object Syntax</a></h3>\n" +
                    "<p>The object syntax for&nbsp;<code>v-bind:style</code>&nbsp;is pretty straightforward - it looks almost like CSS, except it&rsquo;s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"{ color: activeColor, fontSize: fontSize + 'px' }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  activeColor: <span class=\"string\">'red'</span>,</span><br /><span class=\"line\">  fontSize: <span class=\"number\">30</span></span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>It is often a good idea to bind to a style object directly so that the template is cleaner:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"styleObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<figure class=\"highlight js\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\">data: {</span><br /><span class=\"line\">  styleObject: {</span><br /><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br /><span class=\"line\">    fontSize: <span class=\"string\">'13px'</span></span><br /><span class=\"line\">  }</span><br /><span class=\"line\">}</span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>Again, the object syntax is often used in conjunction with computed properties that return objects.</p>\n" +
                    "<h3 id=\"Array-Syntax-1\"><a class=\"headerlink\" title=\"Array Syntax\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Array-Syntax-1\" data-scroll=\"\">Array Syntax</a></h3>\n" +
                    "<p>The array syntax for&nbsp;<code>v-bind:style</code>&nbsp;allows you to apply multiple style objects to the same element:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"[baseStyles, overridingStyles]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<h3 id=\"Auto-prefixing\"><a class=\"headerlink\" title=\"Auto-prefixing\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Auto-prefixing\" data-scroll=\"\">Auto-prefixing</a></h3>\n" +
                    "<p>When you use a CSS property that requires&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\" target=\"_blank\" rel=\"noopener\">vendor prefixes</a>&nbsp;in&nbsp;<code>v-bind:style</code>, for example&nbsp;<code>transform</code>, Vue will automatically detect and add appropriate prefixes to the applied styles.</p>\n" +
                    "<h3 id=\"Multiple-Values\"><a class=\"headerlink\" title=\"Multiple Values\" href=\"https://vuejs.org/v2/guide/class-and-style.html#Multiple-Values\" data-scroll=\"\">Multiple Values</a></h3>\n" +
                    "<blockquote>\n" +
                    "<p>2.3.0+</p>\n" +
                    "</blockquote>\n" +
                    "<p>Starting in 2.3.0+ you can provide an array of multiple (prefixed) values to a style property, for example:</p>\n" +
                    "<figure class=\"highlight html\">\n" +
                    "<table>\n" +
                    "<tbody>\n" +
                    "<tr>\n" +
                    "<td class=\"code\">\n" +
                    "<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n" +
                    "</td>\n" +
                    "</tr>\n" +
                    "</tbody>\n" +
                    "</table>\n" +
                    "</figure>\n" +
                    "<p>This will only render the last value in the array which the browser supports. In this example, it will render&nbsp;<code>display: flex</code>&nbsp;for browsers that support the unprefixed version of flexbox.</p>");
            sec7Vue7.setLesson(vueJsLesson7);
            vueJsLesson7.getSections().add(sec7Vue7);

            //Init Role ----------------------------------------------------------------------------------------------------------
            Role role_user = new Role();
            role_user.setRole("ROLE_USER");
            Role saved_role_user = roleRepository.save(role_user);

            Role role_learner = new Role();
            role_learner.setRole("ROLE_LEARNER");
            Role saved_role_learner = roleRepository.save(role_learner);

            Role role_admin = new Role();
            role_admin.setRole("ROLE_ADMIN");
            Role saved_role_admin = roleRepository.save(role_admin);

            Role role_instructor = new Role();
            role_instructor.setRole("ROLE_INSTRUCTOR");
            Role saved_role_instructor = roleRepository.save(role_instructor);

            //Save Category, Role, Lesson, Course, Section ----------------------------------------------------------------------------------------------------------

            Category savedcat1 = categoryRepository.save(cat1);
            Category savedcat2 = categoryRepository.save(cat2);
            Category savedcat3 = categoryRepository.save(cat3);
            Category savedcat4 = categoryRepository.save(cat4);

            Course savedVueJs = courseRepository.save(vueJs);
            Course savedNodeJs = courseRepository.save(nodeJs);
            Course savedReactJS = courseRepository.save(reactJs);
            Course savedcScharp = courseRepository.save(cScharp);
            Course savedphpCourse = courseRepository.save(phpCourse);
            Course saveddockerCourse = courseRepository.save(dockerCourse);
            Course savedelectronicCourse = courseRepository.save(electronicCourse);
            Course savedBusiness = courseRepository.save(business);
            Course savedmarketingCourse = courseRepository.save(marketingCourse);
            Course savedJava = courseRepository.save(java);
            Course savedtypeScript = courseRepository.save(typeScript);
            Course savedHtml = courseRepository.save(html);
            Course savedCss = courseRepository.save(css);
            Course savedLinux = courseRepository.save(linux);

            Lesson savedNodeJsLesson1 = lessonRepository.save(nodeJsLesson1);
            Lesson savedNodeJsLesson2 = lessonRepository.save(nodeJsLesson2);
            Lesson savedNodeJsLesson3 = lessonRepository.save(nodeJsLesson3);
            Lesson savedNodeJsLesson4 = lessonRepository.save(nodeJsLesson4);
            Lesson savedNodeJsLesson5 = lessonRepository.save(nodeJsLesson5);
            Lesson savedNodeJsLesson6 = lessonRepository.save(nodeJsLesson6);
            Lesson savedNodeJsLesson7 = lessonRepository.save(nodeJsLesson7);
            Lesson saveReactJsLesson1 = lessonRepository.save(reactJsLesson1);
            Lesson saveReactJsLesson2 = lessonRepository.save(reactJsLesson2);
            Lesson saveReactJsLesson3 = lessonRepository.save(reactJsLesson3);
            Lesson saveReactJsLesson4 = lessonRepository.save(reactJsLesson4);
            Lesson saveReactJsLesson5 = lessonRepository.save(reactJsLesson5);
            Lesson saveReactJsLesson6 = lessonRepository.save(reactJsLesson6);
            Lesson saveReactJsLesson7 = lessonRepository.save(reactJsLesson7);
            Lesson savedVueJsLesson1 = lessonRepository.save(vueJsLesson1);
            Lesson savedVueJsLesson2 = lessonRepository.save(vueJsLesson2);
            Lesson savedVueJsLesson3 = lessonRepository.save(vueJsLesson3);
            Lesson savedVueJsLesson4 = lessonRepository.save(vueJsLesson4);
            Lesson savedVueJsLesson5 = lessonRepository.save(vueJsLesson5);
            Lesson savedVueJsLesson6 = lessonRepository.save(vueJsLesson6);
            Lesson savedVueJsLesson7 = lessonRepository.save(vueJsLesson7);

            //Init Instructor ----------------------------------------------------------------------------------------------------------
            Admin admin1= new Admin();
            admin1.setUsername("admin");
            admin1.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            admin1.getRoles().add(saved_role_admin);
            admin1.setEmail("admin@gmail.com");
            admin1.setName("Admin Quang");
            adminRepository.save(admin1);

            Instructor alex = new Instructor();
            alex.setUsername("alex");
            alex.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            alex.getRoles().add(saved_role_instructor);
            alex.setName("Alex Jefferson");
            alex.setEmail("alex@gmail.com");
            alex.setCompany("FPT");
            alex.setQuote("Không có gì quý hơn độc lập tự do hạnh phúc");
            alex.getCourses().add(savedNodeJs);
            alex.getCourses().add(savedVueJs);
            alex.getCategories().add(savedcat1);
            alex.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--T4K0Tjc_--/v1540526585/geek/irene_f2cza2.jpg","cb5cb33439d81972f13d0f0cdd7444b077e1b25a5f5b74bc7dcf62050012e66eaac88df8ae8ec604cb36bf931ca929c11b863380762b5f8bd6456442adad992a8ceeda09b42f0e2f525f8fe05113c0df69105336535951d08afb8037e1772cb71dd5ee4fcc6867eb36d60a3c1e07fb0fd9fe83d7dfe27d360cd530f2661fb3978632786ab1aa7642e187e86ca9bcabca"));
            Instructor savedA = instructorRepository.save(alex);

            Instructor quill = new Instructor();
            quill.setUsername("quill");
            quill.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            quill.getRoles().add(saved_role_instructor);
            quill.setName("Quilliam Johnson");
            quill.setCompany("TMA Solutions");
            quill.setEmail("quill@tma.com");
            quill.setQuote("Cảm giác dạy học thì giống như một người mẹ");
            quill.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--bLkxdzZn--/v1540526659/geek/captain_vonp8b.jpg","02492856ffd783f06dcd1021c7efc35c841feac4e39da1a1152107b30e00066b0daa321ba4c08edba2dec41a89569aed7bb344d8e3222f560027599c8ee7e325e85ac603b97c72de1a74d8a9bb631a2e15afd95c9e02bcfd1de058326f8c7886166edc0f366dd5795f957faa5b9db6d9e7c4e2f8dbcc93b207912ff544c52e66ecec356a3b39f6ee06792a395c12f8ee"));
            quill.getCourses().add(savedNodeJs);
            quill.getCourses().add(savedReactJS);
            quill.getCategories().add(savedcat1);
            quill.getCategories().add(savedcat2);
            Instructor savedQ = instructorRepository.save(quill);

            Instructor tripleh = new Instructor();
            tripleh.setUsername("tripleh");
            tripleh.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            tripleh.getRoles().add(saved_role_instructor);
            tripleh.setName("Triple H");
            tripleh.setCompany("WWE Cop");
            tripleh.setEmail("hhh@tma.com");
            tripleh.setQuote("Tôi chỉ cảm thấy hạnh phúc khi thấy những người xung quanh mình hạnh phúc");
            tripleh.getCategories().add(savedcat3);
            tripleh.getCourses().add(saveddockerCourse);
            tripleh.getCourses().add(savedelectronicCourse);
            tripleh.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--cwxXS8Ed--/v1540526706/geek/tripleh_qadolk.jpg","f35ef04866bf07e95983ce1a7a146b814d95ef29a07a132fbe3ebf1c9a9a574d03c7c45c18a5305bfe478961c4ff8024964e5bb6da71568dd3336777097a24b59bfd46b09258833683a8ee6d315f0343728d19d0fc2f4c2ab6b16a8c17c6e0af13aa072baa32b1fdf284a4f4fc40cc215dbb5c4fa7786605517ac0badce84ec37bf1fbcecc06659d06cbc9b9e2eefb0b"));
            Instructor savedtripleh = instructorRepository.save(tripleh);

            Instructor rose = new Instructor();
            rose.setUsername("rose");
            rose.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            rose.getRoles().add(saved_role_instructor);
            rose.setName("Park Chaeyoung");
            rose.setCompany("YG Copany");
            rose.setEmail("rosanne@tma.com");
            rose.setQuote("너의 눈에 비친 나의 모습이 늘 처음 만난 그 날만 같길 소리 없이 타오르는 불꽃같이");
            rose.getCategories().add(savedcat4);
            rose.getCourses().add(savedBusiness);
            rose.getCourses().add(savedmarketingCourse);
            rose.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--Tc0so-9p--/v1540526758/geek/jisoo_tcpgxv.jpg","fb424ae7896c1e429cfe8b6e6ef483daa3268b4d1cd447b07f9360f282f1fe735ff53173efeaa46cdf075ea99cdefb185ce32fee45d82591af15b634a8211ade0eb4bebb976a8f71ae65c969c034396a1742138579957d406c8382cdb93ab959b9f2aa1366f46fd2a3c719baa2f72830e60eda33cc498b2aa57121933b74518d32e408ce36e087857ce3314dfd97aa9b"));
            Instructor savedRose = instructorRepository.save(rose);

            Instructor mrDao = new Instructor();
            mrDao.setUsername("daonm");
            mrDao.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            mrDao.getRoles().add(saved_role_instructor);
            mrDao.setName("Nguyen Minh Dao");
            mrDao.setCompany("HCMUTE");
            mrDao.setEmail("daomn@tma.com");
            mrDao.setQuote("너의 눈에 비친 나의 모습이 늘 처음 만난 그 날만 같길 소리 없이 타오르는 불꽃같이");
            mrDao.getCategories().add(savedcat1);
            mrDao.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--csfdlqRD--/v1540526799/geek/mrdao_f7t5eg.jpg","6d0b3176551e76d75bba06ac74c8ab7755539e779e5e7b38198b234c9278211f2e85f1d2a4fd16729da8b720fca2c1cff366afa5371b596441112587251063abe5355e01ff46cf2644cdfb3dbbe0f407901e544334e982f77bdd90669c5dcfc96979b624614d153fa0f6b39ded9b352e328745de7a7df8a94bdbb22dec38fb3fd3f21035da883780e2cb4a9db88cc58d"));
            Instructor savedMrDao = instructorRepository.save(mrDao);

            Instructor rapMonster = new Instructor();
            rapMonster.setUsername("rmonster");
            rapMonster.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            rapMonster.getRoles().add(saved_role_instructor);
            rapMonster.setName("Rap Monster");
            rapMonster.setCompany("BigHit");
            rapMonster.setEmail("rm@tma.com");
            rapMonster.setQuote("너의 눈에 비친 나의 모습이 늘 처음 만난 그 날만 같길 소리 없이 타오르는 불꽃같이");
            rapMonster.getCategories().add(savedcat1);
            rapMonster.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--MTUe50aj--/v1540526856/geek/rm_qy7n3r.jpg","83c23c26feb5788a8913abe18273e5d9db86f207965f48475f955b51fb06702001969ea60775c68aea00bbdc1342aa7f873d1f3d4ea51eb8eb9ac2dbd53e73601b4cd912663c96a7821420cadca1345d03eaa49622dfdadb51da52ad3871f6124d008ef9257e02b20d4a1efeec62de34b756aa1ccf3e592a6781b43ceee143d225bfc455b356fd6e7f3cc59f35ed3d13"));
            Instructor savedRapMonster = instructorRepository.save(rapMonster);

            Instructor mrHuy = new Instructor();
            mrHuy.setUsername("huynguyen");
            mrHuy.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            mrHuy.getRoles().add(saved_role_instructor);
            mrHuy.setName("Nguyễn Quang Huy");
            mrHuy.setCompany("HCMUTE");
            mrHuy.setEmail("huynguyen@tma.com");
            mrHuy.setQuote("너의 눈에 비친 나의 모습이 늘 처음 만난 그 날만 같길 소리 없이 타오르는 불꽃같이");
            mrHuy.getCategories().add(savedcat1);
            mrHuy.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--jGkDLJSa--/v1540526898/geek/mrhuy_vl47x9.jpg","911848ab7dcb81207e021b2f54170599b325f5202c90968d6e82c8060463bdae6c02fe49151cb883223955e7121d9435d5e8f61c00bc26daba8d710fbd03c697199eaa1913bce532de3cad0df1f40267b28910484dd32c98e98a54c2cfba599290c84399614aec01f65ca3bc0e1bb109084aa0464c39555e1936684a98ea31190e113f26bc7e7967b2f1f7cb2eb0af2e"));
            Instructor savedMrHuy = instructorRepository.save(mrHuy);

            Instructor lisa = new Instructor();
            lisa.setUsername("lisa");
            lisa.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            lisa.getRoles().add(saved_role_instructor);
            lisa.setName("Lalisa Manoban");
            lisa.setCompany("YG Copany");
            lisa.setEmail("lisa@tma.com");
            lisa.setQuote("너의 눈에 비친 나의 모습이 늘 처음 만난 그 날만 같길 소리 없이 타오르는 불꽃같이");
            lisa.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--913coQRo--/v1540526988/geek/lisa_ghvqcw.jpg","e07c565e38a2e15b5d04950a41f3ba0004bba8f168cc5e0ab65257b429e166093cdc93e7c5d13a97d4d7c80013e7d75355f21f361dbd7d0256b517af70b350346a997fbdeff9e4efa4bb720b60e619809ae31ce74f6da519304dc16d4bf484652e030f0f79be044eec447c2895efb46afabbf9230d8449e42e56c963836e699ab1707aef5a148348f26d00c3d25b9e17"));
            lisa.getCourses().add(savedcScharp);
            lisa.getCourses().add(savedphpCourse);
            lisa.getCourses().add(savedtypeScript);
            lisa.getCourses().add(savedHtml);
            lisa.getCourses().add(savedLinux);
            lisa.getCourses().add(savedCss);
            lisa.getCourses().add(savedJava);
            lisa.getCategories().add(savedcat3);
            Instructor savedLisa = instructorRepository.save(lisa);

            // Init Student--------------------------------------------------------------------------------

            Student dinhquang = new Student();
            dinhquang.getRoles().add(saved_role_learner);
            dinhquang.setUsername("dinhquang");
            dinhquang.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            dinhquang.setEmail("ledinhquang@gmail.com");
            dinhquang.setName("Lê Đình Quang");
//          dinhquang.setDob(new Date("03-04-2018"));
            dinhquang.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--913coQRo--/v1540526988/geek/lisa_ghvqcw.jpg","e07c565e38a2e15b5d04950a41f3ba0004bba8f168cc5e0ab65257b429e166093cdc93e7c5d13a97d4d7c80013e7d75355f21f361dbd7d0256b517af70b350346a997fbdeff9e4efa4bb720b60e619809ae31ce74f6da519304dc16d4bf484652e030f0f79be044eec447c2895efb46afabbf9230d8449e42e56c963836e699ab1707aef5a148348f26d00c3d25b9e17"));
            dinhquang.setSchool("UTE");

            dinhquang.addCourse(saveddockerCourse);
            dinhquang.addCourse(savedNodeJs);
            Student savedDinhQuang = studentRepository.save(dinhquang);

            Student hongvan = new Student();
            hongvan.getRoles().add(saved_role_learner);
            hongvan.setUsername("hongvan");
            hongvan.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            hongvan.setName("Hồng Vân");
            hongvan.setEmail("hongvan@gmail.com");
            hongvan.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--913coQRo--/v1540526988/geek/lisa_ghvqcw.jpg","e07c565e38a2e15b5d04950a41f3ba0004bba8f168cc5e0ab65257b429e166093cdc93e7c5d13a97d4d7c80013e7d75355f21f361dbd7d0256b517af70b350346a997fbdeff9e4efa4bb720b60e619809ae31ce74f6da519304dc16d4bf484652e030f0f79be044eec447c2895efb46afabbf9230d8449e42e56c963836e699ab1707aef5a148348f26d00c3d25b9e17"));
            hongvan.setSchool("PVS");
            hongvan.addCourse(saveddockerCourse);
            Student savedHongVan = studentRepository.save(hongvan);

            Student khanhhoang = new Student();
            khanhhoang.getRoles().add(saved_role_learner);
            khanhhoang.setUsername("khanhhoang");
            khanhhoang.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            khanhhoang.setName("Khánh Hoàng");
            khanhhoang.setEmail("khanhhoang@gmail.com");
            khanhhoang.setImage(new Image("https://res.cloudinary.com/quanglibrary/image/upload/s--913coQRo--/v1540526988/geek/lisa_ghvqcw.jpg","e07c565e38a2e15b5d04950a41f3ba0004bba8f168cc5e0ab65257b429e166093cdc93e7c5d13a97d4d7c80013e7d75355f21f361dbd7d0256b517af70b350346a997fbdeff9e4efa4bb720b60e619809ae31ce74f6da519304dc16d4bf484652e030f0f79be044eec447c2895efb46afabbf9230d8449e42e56c963836e699ab1707aef5a148348f26d00c3d25b9e17"));
            khanhhoang.setSchool("PVS");


            Student savedKhanhHoang = studentRepository.save(khanhhoang);


            StudentCourse studentCourse=new StudentCourse(khanhhoang,saveddockerCourse);

//            studentCourse.setCourse(saveddockerCourse);
//            studentCourse.setStudent(savedKhanhHoang);

            savedKhanhHoang.getCourses().add(studentCourse);

            studentRepository.save(savedKhanhHoang);

            //Init Account ----------------------------------------------------------------------------------------------------------
            Account user1 = new Account();
            user1.setUsername("quang");
            user1.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            user1.getRoles().add(saved_role_admin);
            user1.getRoles().add(saved_role_user);

            Account savedUser1 = accountRepository.save(user1);

            Account user2 = new Account();
            user2.setUsername("thang");
            user2.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            user2.getRoles().add(saved_role_learner);
            Account savedUser2 = accountRepository.save(user2);

            Account user3 = new Account();
            user3.setUsername("hai");
            user3.setEncrytedPassword(EncrytedPasswordUtils.encrytePassword("123"));
            Account savedUser3 = accountRepository.save(user3);

//            savedUser1.getCourses().add(ac1);
//            savedNodeJs.getAccounts().add(ac1);
//
//            accountRepository.save(savedUser1);
//            courseRepository.save(savedNodeJs);
//            for (Section s: savedNodeJsLesson1.getSections()) {
//                System.out.println(s.getDescription());
//            }
//            System.out.println("--------------------");
//
//            for(Course c: savedA.getCourses()){
//                System.out.println(c.getName());
//            }

//            Optional<Instructor> instructorOptional = instructorRepository.findByName("Quilliam Johnson");
//            if (instructorOptional.isPresent()) {
//                Instructor quillfound = instructorOptional.get();
//                Optional<Course> courseOptional = courseRepository.findByName("Node JS Basic");
//                if (courseOptional.isPresent()) {
//                    Course nodefound = courseOptional.get();
//                    quillfound.getCourses().add(nodefound);
//                    instructorRepository.save(quillfound);
//                }
//            }
//
//            Category en = categoryRepository.findByName("Engineering").get();
//
//
//            Optional<Category> optionalCategory = categoryRepository.findByNameOrId(en.getId(),en.getId());
//            if(optionalCategory.isPresent()){
//                System.out.println(optionalCategory.get().getName());
//            }

            Optional<Student> accountOptional = studentRepository.findByUsername("dinhquang");
            if (accountOptional.isPresent()) {
                System.out.println("found");
                System.out.println(accountOptional.get().getEncrytedPassword());

                System.out.println(accountOptional.get().getCourses().size());
                for (StudentCourse ac : accountOptional.get().getCourses()
                ) {
                    System.out.println(ac.getCourse().getName());
                }
            }

            Optional<Course> courseOptional = courseRepository.findByName("Docker - magic tool");
            if (courseOptional.isPresent()) {
                System.out.println("found");
                for (StudentCourse ac : courseOptional.get().getStudents()
                ) {
                    System.out.println(ac.getStudent().getName());
                }
            }
        }
    }
}
